
analog_laser_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000113d0  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  08011598  08011598  00012598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011930  08011930  00013188  2**0
                  CONTENTS
  4 .ARM          00000008  08011930  08011930  00012930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011938  08011938  00013188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011938  08011938  00012938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801193c  0801193c  0001293c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  08011940  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020ac  20000188  08011ac8  00013188  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002234  08011ac8  00013234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013188  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021671  00000000  00000000  000131b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b0e  00000000  00000000  00034829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c18  00000000  00000000  00039338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015ae  00000000  00000000  0003af50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c3e1  00000000  00000000  0003c4fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000241ce  00000000  00000000  000688df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104268  00000000  00000000  0008caad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00190d15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081dc  00000000  00000000  00190d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00198f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000188 	.word	0x20000188
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08011580 	.word	0x08011580

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000018c 	.word	0x2000018c
 8000204:	08011580 	.word	0x08011580

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2uiz>:
 8000b30:	004a      	lsls	r2, r1, #1
 8000b32:	d211      	bcs.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b34:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b38:	d211      	bcs.n	8000b5e <__aeabi_d2uiz+0x2e>
 8000b3a:	d50d      	bpl.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b3c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b44:	d40e      	bmi.n	8000b64 <__aeabi_d2uiz+0x34>
 8000b46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_d2uiz+0x3a>
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0000 	mov.w	r0, #0
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2f>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b78:	bf24      	itt	cs
 8000b7a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b7e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b82:	d90d      	bls.n	8000ba0 <__aeabi_d2f+0x30>
 8000b84:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b88:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b8c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b90:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b94:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b98:	bf08      	it	eq
 8000b9a:	f020 0001 	biceq.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ba4:	d121      	bne.n	8000bea <__aeabi_d2f+0x7a>
 8000ba6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000baa:	bfbc      	itt	lt
 8000bac:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bb0:	4770      	bxlt	lr
 8000bb2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bb6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bba:	f1c2 0218 	rsb	r2, r2, #24
 8000bbe:	f1c2 0c20 	rsb	ip, r2, #32
 8000bc2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bca:	bf18      	it	ne
 8000bcc:	f040 0001 	orrne.w	r0, r0, #1
 8000bd0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bdc:	ea40 000c 	orr.w	r0, r0, ip
 8000be0:	fa23 f302 	lsr.w	r3, r3, r2
 8000be4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be8:	e7cc      	b.n	8000b84 <__aeabi_d2f+0x14>
 8000bea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bee:	d107      	bne.n	8000c00 <__aeabi_d2f+0x90>
 8000bf0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf4:	bf1e      	ittt	ne
 8000bf6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bfa:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bfe:	4770      	bxne	lr
 8000c00:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c04:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c08:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <__aeabi_uldivmod>:
 8000c10:	b953      	cbnz	r3, 8000c28 <__aeabi_uldivmod+0x18>
 8000c12:	b94a      	cbnz	r2, 8000c28 <__aeabi_uldivmod+0x18>
 8000c14:	2900      	cmp	r1, #0
 8000c16:	bf08      	it	eq
 8000c18:	2800      	cmpeq	r0, #0
 8000c1a:	bf1c      	itt	ne
 8000c1c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c20:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c24:	f000 b988 	b.w	8000f38 <__aeabi_idiv0>
 8000c28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c30:	f000 f806 	bl	8000c40 <__udivmoddi4>
 8000c34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3c:	b004      	add	sp, #16
 8000c3e:	4770      	bx	lr

08000c40 <__udivmoddi4>:
 8000c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c44:	9d08      	ldr	r5, [sp, #32]
 8000c46:	468e      	mov	lr, r1
 8000c48:	4604      	mov	r4, r0
 8000c4a:	4688      	mov	r8, r1
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d14a      	bne.n	8000ce6 <__udivmoddi4+0xa6>
 8000c50:	428a      	cmp	r2, r1
 8000c52:	4617      	mov	r7, r2
 8000c54:	d962      	bls.n	8000d1c <__udivmoddi4+0xdc>
 8000c56:	fab2 f682 	clz	r6, r2
 8000c5a:	b14e      	cbz	r6, 8000c70 <__udivmoddi4+0x30>
 8000c5c:	f1c6 0320 	rsb	r3, r6, #32
 8000c60:	fa01 f806 	lsl.w	r8, r1, r6
 8000c64:	fa20 f303 	lsr.w	r3, r0, r3
 8000c68:	40b7      	lsls	r7, r6
 8000c6a:	ea43 0808 	orr.w	r8, r3, r8
 8000c6e:	40b4      	lsls	r4, r6
 8000c70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c74:	fa1f fc87 	uxth.w	ip, r7
 8000c78:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c7c:	0c23      	lsrs	r3, r4, #16
 8000c7e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c86:	fb01 f20c 	mul.w	r2, r1, ip
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d909      	bls.n	8000ca2 <__udivmoddi4+0x62>
 8000c8e:	18fb      	adds	r3, r7, r3
 8000c90:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c94:	f080 80ea 	bcs.w	8000e6c <__udivmoddi4+0x22c>
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	f240 80e7 	bls.w	8000e6c <__udivmoddi4+0x22c>
 8000c9e:	3902      	subs	r1, #2
 8000ca0:	443b      	add	r3, r7
 8000ca2:	1a9a      	subs	r2, r3, r2
 8000ca4:	b2a3      	uxth	r3, r4
 8000ca6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000caa:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cb2:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cb6:	459c      	cmp	ip, r3
 8000cb8:	d909      	bls.n	8000cce <__udivmoddi4+0x8e>
 8000cba:	18fb      	adds	r3, r7, r3
 8000cbc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000cc0:	f080 80d6 	bcs.w	8000e70 <__udivmoddi4+0x230>
 8000cc4:	459c      	cmp	ip, r3
 8000cc6:	f240 80d3 	bls.w	8000e70 <__udivmoddi4+0x230>
 8000cca:	443b      	add	r3, r7
 8000ccc:	3802      	subs	r0, #2
 8000cce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cd2:	eba3 030c 	sub.w	r3, r3, ip
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	b11d      	cbz	r5, 8000ce2 <__udivmoddi4+0xa2>
 8000cda:	40f3      	lsrs	r3, r6
 8000cdc:	2200      	movs	r2, #0
 8000cde:	e9c5 3200 	strd	r3, r2, [r5]
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d905      	bls.n	8000cf6 <__udivmoddi4+0xb6>
 8000cea:	b10d      	cbz	r5, 8000cf0 <__udivmoddi4+0xb0>
 8000cec:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e7f5      	b.n	8000ce2 <__udivmoddi4+0xa2>
 8000cf6:	fab3 f183 	clz	r1, r3
 8000cfa:	2900      	cmp	r1, #0
 8000cfc:	d146      	bne.n	8000d8c <__udivmoddi4+0x14c>
 8000cfe:	4573      	cmp	r3, lr
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0xc8>
 8000d02:	4282      	cmp	r2, r0
 8000d04:	f200 8105 	bhi.w	8000f12 <__udivmoddi4+0x2d2>
 8000d08:	1a84      	subs	r4, r0, r2
 8000d0a:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	4690      	mov	r8, r2
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	d0e5      	beq.n	8000ce2 <__udivmoddi4+0xa2>
 8000d16:	e9c5 4800 	strd	r4, r8, [r5]
 8000d1a:	e7e2      	b.n	8000ce2 <__udivmoddi4+0xa2>
 8000d1c:	2a00      	cmp	r2, #0
 8000d1e:	f000 8090 	beq.w	8000e42 <__udivmoddi4+0x202>
 8000d22:	fab2 f682 	clz	r6, r2
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	f040 80a4 	bne.w	8000e74 <__udivmoddi4+0x234>
 8000d2c:	1a8a      	subs	r2, r1, r2
 8000d2e:	0c03      	lsrs	r3, r0, #16
 8000d30:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d34:	b280      	uxth	r0, r0
 8000d36:	b2bc      	uxth	r4, r7
 8000d38:	2101      	movs	r1, #1
 8000d3a:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d3e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d46:	fb04 f20c 	mul.w	r2, r4, ip
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d907      	bls.n	8000d5e <__udivmoddi4+0x11e>
 8000d4e:	18fb      	adds	r3, r7, r3
 8000d50:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x11c>
 8000d56:	429a      	cmp	r2, r3
 8000d58:	f200 80e0 	bhi.w	8000f1c <__udivmoddi4+0x2dc>
 8000d5c:	46c4      	mov	ip, r8
 8000d5e:	1a9b      	subs	r3, r3, r2
 8000d60:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d64:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d68:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d6c:	fb02 f404 	mul.w	r4, r2, r4
 8000d70:	429c      	cmp	r4, r3
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x144>
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x142>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f200 80ca 	bhi.w	8000f16 <__udivmoddi4+0x2d6>
 8000d82:	4602      	mov	r2, r0
 8000d84:	1b1b      	subs	r3, r3, r4
 8000d86:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0x98>
 8000d8c:	f1c1 0620 	rsb	r6, r1, #32
 8000d90:	408b      	lsls	r3, r1
 8000d92:	fa22 f706 	lsr.w	r7, r2, r6
 8000d96:	431f      	orrs	r7, r3
 8000d98:	fa0e f401 	lsl.w	r4, lr, r1
 8000d9c:	fa20 f306 	lsr.w	r3, r0, r6
 8000da0:	fa2e fe06 	lsr.w	lr, lr, r6
 8000da4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000da8:	4323      	orrs	r3, r4
 8000daa:	fa00 f801 	lsl.w	r8, r0, r1
 8000dae:	fa1f fc87 	uxth.w	ip, r7
 8000db2:	fbbe f0f9 	udiv	r0, lr, r9
 8000db6:	0c1c      	lsrs	r4, r3, #16
 8000db8:	fb09 ee10 	mls	lr, r9, r0, lr
 8000dbc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000dc0:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dc4:	45a6      	cmp	lr, r4
 8000dc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x1a0>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000dd2:	f080 809c 	bcs.w	8000f0e <__udivmoddi4+0x2ce>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8099 	bls.w	8000f0e <__udivmoddi4+0x2ce>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	eba4 040e 	sub.w	r4, r4, lr
 8000de4:	fa1f fe83 	uxth.w	lr, r3
 8000de8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dec:	fb09 4413 	mls	r4, r9, r3, r4
 8000df0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000df4:	fb03 fc0c 	mul.w	ip, r3, ip
 8000df8:	45a4      	cmp	ip, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x1ce>
 8000dfc:	193c      	adds	r4, r7, r4
 8000dfe:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e02:	f080 8082 	bcs.w	8000f0a <__udivmoddi4+0x2ca>
 8000e06:	45a4      	cmp	ip, r4
 8000e08:	d97f      	bls.n	8000f0a <__udivmoddi4+0x2ca>
 8000e0a:	3b02      	subs	r3, #2
 8000e0c:	443c      	add	r4, r7
 8000e0e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e12:	eba4 040c 	sub.w	r4, r4, ip
 8000e16:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e1a:	4564      	cmp	r4, ip
 8000e1c:	4673      	mov	r3, lr
 8000e1e:	46e1      	mov	r9, ip
 8000e20:	d362      	bcc.n	8000ee8 <__udivmoddi4+0x2a8>
 8000e22:	d05f      	beq.n	8000ee4 <__udivmoddi4+0x2a4>
 8000e24:	b15d      	cbz	r5, 8000e3e <__udivmoddi4+0x1fe>
 8000e26:	ebb8 0203 	subs.w	r2, r8, r3
 8000e2a:	eb64 0409 	sbc.w	r4, r4, r9
 8000e2e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e32:	fa22 f301 	lsr.w	r3, r2, r1
 8000e36:	431e      	orrs	r6, r3
 8000e38:	40cc      	lsrs	r4, r1
 8000e3a:	e9c5 6400 	strd	r6, r4, [r5]
 8000e3e:	2100      	movs	r1, #0
 8000e40:	e74f      	b.n	8000ce2 <__udivmoddi4+0xa2>
 8000e42:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e46:	0c01      	lsrs	r1, r0, #16
 8000e48:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e4c:	b280      	uxth	r0, r0
 8000e4e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e52:	463b      	mov	r3, r7
 8000e54:	4638      	mov	r0, r7
 8000e56:	463c      	mov	r4, r7
 8000e58:	46b8      	mov	r8, r7
 8000e5a:	46be      	mov	lr, r7
 8000e5c:	2620      	movs	r6, #32
 8000e5e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e62:	eba2 0208 	sub.w	r2, r2, r8
 8000e66:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e6a:	e766      	b.n	8000d3a <__udivmoddi4+0xfa>
 8000e6c:	4601      	mov	r1, r0
 8000e6e:	e718      	b.n	8000ca2 <__udivmoddi4+0x62>
 8000e70:	4610      	mov	r0, r2
 8000e72:	e72c      	b.n	8000cce <__udivmoddi4+0x8e>
 8000e74:	f1c6 0220 	rsb	r2, r6, #32
 8000e78:	fa2e f302 	lsr.w	r3, lr, r2
 8000e7c:	40b7      	lsls	r7, r6
 8000e7e:	40b1      	lsls	r1, r6
 8000e80:	fa20 f202 	lsr.w	r2, r0, r2
 8000e84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e8e:	b2bc      	uxth	r4, r7
 8000e90:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e94:	0c11      	lsrs	r1, r2, #16
 8000e96:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e9a:	fb08 f904 	mul.w	r9, r8, r4
 8000e9e:	40b0      	lsls	r0, r6
 8000ea0:	4589      	cmp	r9, r1
 8000ea2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ea6:	b280      	uxth	r0, r0
 8000ea8:	d93e      	bls.n	8000f28 <__udivmoddi4+0x2e8>
 8000eaa:	1879      	adds	r1, r7, r1
 8000eac:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000eb0:	d201      	bcs.n	8000eb6 <__udivmoddi4+0x276>
 8000eb2:	4589      	cmp	r9, r1
 8000eb4:	d81f      	bhi.n	8000ef6 <__udivmoddi4+0x2b6>
 8000eb6:	eba1 0109 	sub.w	r1, r1, r9
 8000eba:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ebe:	fb09 f804 	mul.w	r8, r9, r4
 8000ec2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec6:	b292      	uxth	r2, r2
 8000ec8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ecc:	4542      	cmp	r2, r8
 8000ece:	d229      	bcs.n	8000f24 <__udivmoddi4+0x2e4>
 8000ed0:	18ba      	adds	r2, r7, r2
 8000ed2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000ed6:	d2c4      	bcs.n	8000e62 <__udivmoddi4+0x222>
 8000ed8:	4542      	cmp	r2, r8
 8000eda:	d2c2      	bcs.n	8000e62 <__udivmoddi4+0x222>
 8000edc:	f1a9 0102 	sub.w	r1, r9, #2
 8000ee0:	443a      	add	r2, r7
 8000ee2:	e7be      	b.n	8000e62 <__udivmoddi4+0x222>
 8000ee4:	45f0      	cmp	r8, lr
 8000ee6:	d29d      	bcs.n	8000e24 <__udivmoddi4+0x1e4>
 8000ee8:	ebbe 0302 	subs.w	r3, lr, r2
 8000eec:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ef0:	3801      	subs	r0, #1
 8000ef2:	46e1      	mov	r9, ip
 8000ef4:	e796      	b.n	8000e24 <__udivmoddi4+0x1e4>
 8000ef6:	eba7 0909 	sub.w	r9, r7, r9
 8000efa:	4449      	add	r1, r9
 8000efc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f00:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f04:	fb09 f804 	mul.w	r8, r9, r4
 8000f08:	e7db      	b.n	8000ec2 <__udivmoddi4+0x282>
 8000f0a:	4673      	mov	r3, lr
 8000f0c:	e77f      	b.n	8000e0e <__udivmoddi4+0x1ce>
 8000f0e:	4650      	mov	r0, sl
 8000f10:	e766      	b.n	8000de0 <__udivmoddi4+0x1a0>
 8000f12:	4608      	mov	r0, r1
 8000f14:	e6fd      	b.n	8000d12 <__udivmoddi4+0xd2>
 8000f16:	443b      	add	r3, r7
 8000f18:	3a02      	subs	r2, #2
 8000f1a:	e733      	b.n	8000d84 <__udivmoddi4+0x144>
 8000f1c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f20:	443b      	add	r3, r7
 8000f22:	e71c      	b.n	8000d5e <__udivmoddi4+0x11e>
 8000f24:	4649      	mov	r1, r9
 8000f26:	e79c      	b.n	8000e62 <__udivmoddi4+0x222>
 8000f28:	eba1 0109 	sub.w	r1, r1, r9
 8000f2c:	46c4      	mov	ip, r8
 8000f2e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f32:	fb09 f804 	mul.w	r8, r9, r4
 8000f36:	e7c4      	b.n	8000ec2 <__udivmoddi4+0x282>

08000f38 <__aeabi_idiv0>:
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	0000      	movs	r0, r0
	...

08000f40 <get_sector>:
#include "main.h"
#include "FOC.h"


uint16_t get_sector(float angle)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	ed87 0a01 	vstr	s0, [r7, #4]
	//	return(0);
//	}
//	else
//	{

	return(floor((double)(angle/_PI_div3)+1));
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff fac0 	bl	80004d0 <__aeabi_f2d>
 8000f50:	a312      	add	r3, pc, #72	@ (adr r3, 8000f9c <get_sector+0x5c>)
 8000f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f56:	f7ff fc3d 	bl	80007d4 <__aeabi_ddiv>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	4610      	mov	r0, r2
 8000f60:	4619      	mov	r1, r3
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	4b0c      	ldr	r3, [pc, #48]	@ (8000f98 <get_sector+0x58>)
 8000f68:	f7ff f954 	bl	8000214 <__adddf3>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	ec43 2b17 	vmov	d7, r2, r3
 8000f74:	eeb0 0a47 	vmov.f32	s0, s14
 8000f78:	eef0 0a67 	vmov.f32	s1, s15
 8000f7c:	f00e fca0 	bl	800f8c0 <floor>
 8000f80:	ec53 2b10 	vmov	r2, r3, d0
 8000f84:	4610      	mov	r0, r2
 8000f86:	4619      	mov	r1, r3
 8000f88:	f7ff fdd2 	bl	8000b30 <__aeabi_d2uiz>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	b29b      	uxth	r3, r3
//	}
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	3ff00000 	.word	0x3ff00000
 8000f9c:	4abd0449 	.word	0x4abd0449
 8000fa0:	3ff0c151 	.word	0x3ff0c151
 8000fa4:	00000000 	.word	0x00000000

08000fa8 <shaftAngle>:

float shaftAngle(int16_t counts)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	80fb      	strh	r3, [r7, #6]

	return((float)counts/_encoder_cnt_rev*_2PI);
 8000fb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fb6:	ee07 3a90 	vmov	s15, r3
 8000fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fbe:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001000 <shaftAngle+0x58>
 8000fc2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000fc6:	ee16 0a90 	vmov	r0, s13
 8000fca:	f7ff fa81 	bl	80004d0 <__aeabi_f2d>
 8000fce:	a30a      	add	r3, pc, #40	@ (adr r3, 8000ff8 <shaftAngle+0x50>)
 8000fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd4:	f7ff fad4 	bl	8000580 <__aeabi_dmul>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4610      	mov	r0, r2
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f7ff fdc6 	bl	8000b70 <__aeabi_d2f>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	ee07 3a90 	vmov	s15, r3
}
 8000fea:	eeb0 0a67 	vmov.f32	s0, s15
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	f3af 8000 	nop.w
 8000ff8:	f01b866e 	.word	0xf01b866e
 8000ffc:	401921f9 	.word	0x401921f9
 8001000:	48800000 	.word	0x48800000
 8001004:	00000000 	.word	0x00000000

08001008 <electricalAngle>:
//	return((float)counts/_encoder_cnt_rev*_2PI);
//}


float electricalAngle(float shaft_angle, int pole_pairs)
{
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001012:	6038      	str	r0, [r7, #0]
	if(shaft_angle<0)
 8001014:	edd7 7a01 	vldr	s15, [r7, #4]
 8001018:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800101c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001020:	d50f      	bpl.n	8001042 <electricalAngle+0x3a>
	{
		shaft_angle=shaft_angle+_2PI;
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff fa54 	bl	80004d0 <__aeabi_f2d>
 8001028:	a319      	add	r3, pc, #100	@ (adr r3, 8001090 <electricalAngle+0x88>)
 800102a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102e:	f7ff f8f1 	bl	8000214 <__adddf3>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4610      	mov	r0, r2
 8001038:	4619      	mov	r1, r3
 800103a:	f7ff fd99 	bl	8000b70 <__aeabi_d2f>
 800103e:	4603      	mov	r3, r0
 8001040:	607b      	str	r3, [r7, #4]
	}
	return (fmod(shaft_angle,_2PI) * pole_pairs);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff fa44 	bl	80004d0 <__aeabi_f2d>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	ed9f 1b10 	vldr	d1, [pc, #64]	@ 8001090 <electricalAngle+0x88>
 8001050:	ec43 2b10 	vmov	d0, r2, r3
 8001054:	f00e fa30 	bl	800f4b8 <fmod>
 8001058:	ec55 4b10 	vmov	r4, r5, d0
 800105c:	6838      	ldr	r0, [r7, #0]
 800105e:	f7ff fa25 	bl	80004ac <__aeabi_i2d>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	4620      	mov	r0, r4
 8001068:	4629      	mov	r1, r5
 800106a:	f7ff fa89 	bl	8000580 <__aeabi_dmul>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	4610      	mov	r0, r2
 8001074:	4619      	mov	r1, r3
 8001076:	f7ff fd7b 	bl	8000b70 <__aeabi_d2f>
 800107a:	4603      	mov	r3, r0
 800107c:	ee07 3a90 	vmov	s15, r3
}
 8001080:	eeb0 0a67 	vmov.f32	s0, s15
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bdb0      	pop	{r4, r5, r7, pc}
 800108a:	bf00      	nop
 800108c:	f3af 8000 	nop.w
 8001090:	f01b866e 	.word	0xf01b866e
 8001094:	401921f9 	.word	0x401921f9

08001098 <SVPWM>:


void SVPWM(float Uq, float angle_electrical,int16_t motor)
{
 8001098:	b5b0      	push	{r4, r5, r7, lr}
 800109a:	b092      	sub	sp, #72	@ 0x48
 800109c:	af00      	add	r7, sp, #0
 800109e:	ed87 0a03 	vstr	s0, [r7, #12]
 80010a2:	edc7 0a02 	vstr	s1, [r7, #8]
 80010a6:	4603      	mov	r3, r0
 80010a8:	80fb      	strh	r3, [r7, #6]
	//angle_electrical=angle_electrical+_PI;
	// if negative voltages change inverse the phase
     // angle + 180degrees


     if(Uq < 0) angle_electrical += _PI;
 80010aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80010ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b6:	d510      	bpl.n	80010da <SVPWM+0x42>
 80010b8:	68b8      	ldr	r0, [r7, #8]
 80010ba:	f7ff fa09 	bl	80004d0 <__aeabi_f2d>
 80010be:	f20f 434c 	addw	r3, pc, #1100	@ 0x44c
 80010c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c6:	f7ff f8a5 	bl	8000214 <__adddf3>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4610      	mov	r0, r2
 80010d0:	4619      	mov	r1, r3
 80010d2:	f7ff fd4d 	bl	8000b70 <__aeabi_d2f>
 80010d6:	4603      	mov	r3, r0
 80010d8:	60bb      	str	r3, [r7, #8]
   // if (angle_electrical>_2PI) angle_electrical-=_2PI;
    // if (angle_electrical<0) angle_electrical+=_2PI;

     Uq = fabs(Uq);
 80010da:	edd7 7a03 	vldr	s15, [r7, #12]
 80010de:	eef0 7ae7 	vabs.f32	s15, s15
 80010e2:	edc7 7a03 	vstr	s15, [r7, #12]
     // angle normalisation in between 0 and 2pi
     // only necessary if using _sin and _cos - approximation functions
//     angle_el = normalizeAngle(angle_el + zero_electric_angle + _PI_2);

     // find the sector we are in currently
     double sector2 = get_sector(angle_electrical);
 80010e6:	ed97 0a02 	vldr	s0, [r7, #8]
 80010ea:	f7ff ff29 	bl	8000f40 <get_sector>
 80010ee:	4603      	mov	r3, r0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff f9cb 	bl	800048c <__aeabi_ui2d>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
     uint16_t sector = get_sector(angle_electrical);
 80010fe:	ed97 0a02 	vldr	s0, [r7, #8]
 8001102:	f7ff ff1d 	bl	8000f40 <get_sector>
 8001106:	4603      	mov	r3, r0
 8001108:	85fb      	strh	r3, [r7, #46]	@ 0x2e
     // calculate the duty cycles
     float T1 = _SQRT3*sin(sector*_PI_div3 - angle_electrical) * Uq/voltage_power_supply;
 800110a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff f9cd 	bl	80004ac <__aeabi_i2d>
 8001112:	a3f5      	add	r3, pc, #980	@ (adr r3, 80014e8 <SVPWM+0x450>)
 8001114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001118:	f7ff fa32 	bl	8000580 <__aeabi_dmul>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4614      	mov	r4, r2
 8001122:	461d      	mov	r5, r3
 8001124:	68b8      	ldr	r0, [r7, #8]
 8001126:	f7ff f9d3 	bl	80004d0 <__aeabi_f2d>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4620      	mov	r0, r4
 8001130:	4629      	mov	r1, r5
 8001132:	f7ff f86d 	bl	8000210 <__aeabi_dsub>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	ec43 2b17 	vmov	d7, r2, r3
 800113e:	eeb0 0a47 	vmov.f32	s0, s14
 8001142:	eef0 0a67 	vmov.f32	s1, s15
 8001146:	f00e fa83 	bl	800f650 <sin>
 800114a:	ec51 0b10 	vmov	r0, r1, d0
 800114e:	a3e8      	add	r3, pc, #928	@ (adr r3, 80014f0 <SVPWM+0x458>)
 8001150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001154:	f7ff fa14 	bl	8000580 <__aeabi_dmul>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4614      	mov	r4, r2
 800115e:	461d      	mov	r5, r3
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f7ff f9b5 	bl	80004d0 <__aeabi_f2d>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4620      	mov	r0, r4
 800116c:	4629      	mov	r1, r5
 800116e:	f7ff fa07 	bl	8000580 <__aeabi_dmul>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4610      	mov	r0, r2
 8001178:	4619      	mov	r1, r3
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	4bde      	ldr	r3, [pc, #888]	@ (80014f8 <SVPWM+0x460>)
 8001180:	f7ff fb28 	bl	80007d4 <__aeabi_ddiv>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4610      	mov	r0, r2
 800118a:	4619      	mov	r1, r3
 800118c:	f7ff fcf0 	bl	8000b70 <__aeabi_d2f>
 8001190:	4603      	mov	r3, r0
 8001192:	62bb      	str	r3, [r7, #40]	@ 0x28
     float T2 = _SQRT3*sin(angle_electrical - (sector-1.0)*_PI_div3) * Uq/voltage_power_supply;
 8001194:	68b8      	ldr	r0, [r7, #8]
 8001196:	f7ff f99b 	bl	80004d0 <__aeabi_f2d>
 800119a:	4604      	mov	r4, r0
 800119c:	460d      	mov	r5, r1
 800119e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff f983 	bl	80004ac <__aeabi_i2d>
 80011a6:	f04f 0200 	mov.w	r2, #0
 80011aa:	4bd4      	ldr	r3, [pc, #848]	@ (80014fc <SVPWM+0x464>)
 80011ac:	f7ff f830 	bl	8000210 <__aeabi_dsub>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4610      	mov	r0, r2
 80011b6:	4619      	mov	r1, r3
 80011b8:	a3cb      	add	r3, pc, #812	@ (adr r3, 80014e8 <SVPWM+0x450>)
 80011ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011be:	f7ff f9df 	bl	8000580 <__aeabi_dmul>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4620      	mov	r0, r4
 80011c8:	4629      	mov	r1, r5
 80011ca:	f7ff f821 	bl	8000210 <__aeabi_dsub>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	ec43 2b17 	vmov	d7, r2, r3
 80011d6:	eeb0 0a47 	vmov.f32	s0, s14
 80011da:	eef0 0a67 	vmov.f32	s1, s15
 80011de:	f00e fa37 	bl	800f650 <sin>
 80011e2:	ec51 0b10 	vmov	r0, r1, d0
 80011e6:	a3c2      	add	r3, pc, #776	@ (adr r3, 80014f0 <SVPWM+0x458>)
 80011e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ec:	f7ff f9c8 	bl	8000580 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4614      	mov	r4, r2
 80011f6:	461d      	mov	r5, r3
 80011f8:	68f8      	ldr	r0, [r7, #12]
 80011fa:	f7ff f969 	bl	80004d0 <__aeabi_f2d>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4620      	mov	r0, r4
 8001204:	4629      	mov	r1, r5
 8001206:	f7ff f9bb 	bl	8000580 <__aeabi_dmul>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	4bb8      	ldr	r3, [pc, #736]	@ (80014f8 <SVPWM+0x460>)
 8001218:	f7ff fadc 	bl	80007d4 <__aeabi_ddiv>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	f7ff fca4 	bl	8000b70 <__aeabi_d2f>
 8001228:	4603      	mov	r3, r0
 800122a:	627b      	str	r3, [r7, #36]	@ 0x24
     // two versions possible
     // centered around voltage_power_supply/2
     float T0 = 1 - T1 - T2;
 800122c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001230:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001234:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001238:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800123c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001240:	edc7 7a08 	vstr	s15, [r7, #32]
     //float T0 = 0;

     // calculate the duty cycles(times)
     float Ta,Tb,Tc;

          switch(sector){
 8001244:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001246:	3b01      	subs	r3, #1
 8001248:	2b05      	cmp	r3, #5
 800124a:	f200 80ed 	bhi.w	8001428 <SVPWM+0x390>
 800124e:	a201      	add	r2, pc, #4	@ (adr r2, 8001254 <SVPWM+0x1bc>)
 8001250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001254:	0800126d 	.word	0x0800126d
 8001258:	080012b7 	.word	0x080012b7
 800125c:	08001301 	.word	0x08001301
 8001260:	0800134b 	.word	0x0800134b
 8001264:	08001395 	.word	0x08001395
 8001268:	080013df 	.word	0x080013df
            case 1:
              Ta = T1 + T2 + T0/2;
 800126c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001270:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001274:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001278:	edd7 6a08 	vldr	s13, [r7, #32]
 800127c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8001280:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001284:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001288:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
              Tb = T2 + T0/2;
 800128c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001290:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001294:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001298:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800129c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a0:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
              Tc = T0/2;
 80012a4:	ed97 7a08 	vldr	s14, [r7, #32]
 80012a8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80012ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012b0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
              break;
 80012b4:	e0c1      	b.n	800143a <SVPWM+0x3a2>
            case 2:
              Ta = T1 +  T0/2;
 80012b6:	ed97 7a08 	vldr	s14, [r7, #32]
 80012ba:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80012be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012c2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80012c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ca:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
              Tb = T1 + T2 + T0/2;
 80012ce:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80012d2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80012d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012da:	edd7 6a08 	vldr	s13, [r7, #32]
 80012de:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80012e2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80012e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ea:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
              Tc = T0/2;
 80012ee:	ed97 7a08 	vldr	s14, [r7, #32]
 80012f2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80012f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012fa:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
              break;
 80012fe:	e09c      	b.n	800143a <SVPWM+0x3a2>
            case 3:
              Ta = T0/2;
 8001300:	ed97 7a08 	vldr	s14, [r7, #32]
 8001304:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001308:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800130c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
              Tb = T1 + T2 + T0/2;
 8001310:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001314:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001318:	ee37 7a27 	vadd.f32	s14, s14, s15
 800131c:	edd7 6a08 	vldr	s13, [r7, #32]
 8001320:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8001324:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001328:	ee77 7a27 	vadd.f32	s15, s14, s15
 800132c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
              Tc = T2 + T0/2;
 8001330:	ed97 7a08 	vldr	s14, [r7, #32]
 8001334:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001338:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800133c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001344:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
              break;
 8001348:	e077      	b.n	800143a <SVPWM+0x3a2>
            case 4:
              Ta = T0/2;
 800134a:	ed97 7a08 	vldr	s14, [r7, #32]
 800134e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001352:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001356:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
              Tb = T1+ T0/2;
 800135a:	ed97 7a08 	vldr	s14, [r7, #32]
 800135e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001362:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001366:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800136a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800136e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
              Tc = T1 + T2 + T0/2;
 8001372:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001376:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800137a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800137e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001382:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8001386:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800138a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800138e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
              break;
 8001392:	e052      	b.n	800143a <SVPWM+0x3a2>
            case 5:
              Ta = T2 + T0/2;
 8001394:	ed97 7a08 	vldr	s14, [r7, #32]
 8001398:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800139c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013a0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80013a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a8:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
              Tb = T0/2;
 80013ac:	ed97 7a08 	vldr	s14, [r7, #32]
 80013b0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80013b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013b8:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
              Tc = T1 + T2 + T0/2;
 80013bc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80013c0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80013c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013c8:	edd7 6a08 	vldr	s13, [r7, #32]
 80013cc:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80013d0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80013d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013d8:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
              break;
 80013dc:	e02d      	b.n	800143a <SVPWM+0x3a2>
            case 6:
              Ta = T1 + T2 + T0/2;
 80013de:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80013e2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80013e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013ea:	edd7 6a08 	vldr	s13, [r7, #32]
 80013ee:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80013f2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80013f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013fa:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
              Tb = T0/2;
 80013fe:	ed97 7a08 	vldr	s14, [r7, #32]
 8001402:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001406:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800140a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
              Tc = T1 + T0/2;
 800140e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001412:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001416:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800141a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800141e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001422:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
              break;
 8001426:	e008      	b.n	800143a <SVPWM+0x3a2>
            default:
             // possible error state
              Ta = 0;
 8001428:	f04f 0300 	mov.w	r3, #0
 800142c:	647b      	str	r3, [r7, #68]	@ 0x44
              Tb = 0;
 800142e:	f04f 0300 	mov.w	r3, #0
 8001432:	643b      	str	r3, [r7, #64]	@ 0x40
              Tc = 0;
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	63fb      	str	r3, [r7, #60]	@ 0x3c
          // calculate the phase voltages and center
        //  Ua = Ta*voltage_power_supply;
        //  Ub = Tb*voltage_power_supply;
       //   Uc = Tc*voltage_power_supply;

          Ua = Ta*SVPWM_period;
 800143a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800143e:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001500 <SVPWM+0x468>
 8001442:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001446:	edc7 7a07 	vstr	s15, [r7, #28]
          Ub = Tb*SVPWM_period;
 800144a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800144e:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001500 <SVPWM+0x468>
 8001452:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001456:	edc7 7a06 	vstr	s15, [r7, #24]
          Uc = Tc*SVPWM_period;
 800145a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800145e:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001500 <SVPWM+0x468>
 8001462:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001466:	edc7 7a05 	vstr	s15, [r7, #20]

          switch(motor){
 800146a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d002      	beq.n	8001478 <SVPWM+0x3e0>
 8001472:	2b02      	cmp	r3, #2
 8001474:	d01a      	beq.n	80014ac <SVPWM+0x414>
          }




}
 8001476:	e031      	b.n	80014dc <SVPWM+0x444>
          		  TIM1->CCR1=Ua;//2;//Ua;
 8001478:	4b22      	ldr	r3, [pc, #136]	@ (8001504 <SVPWM+0x46c>)
 800147a:	edd7 7a07 	vldr	s15, [r7, #28]
 800147e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001482:	ee17 2a90 	vmov	r2, s15
 8001486:	635a      	str	r2, [r3, #52]	@ 0x34
          		  TIM1->CCR2=Ub;//2;//Ub;
 8001488:	4b1e      	ldr	r3, [pc, #120]	@ (8001504 <SVPWM+0x46c>)
 800148a:	edd7 7a06 	vldr	s15, [r7, #24]
 800148e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001492:	ee17 2a90 	vmov	r2, s15
 8001496:	639a      	str	r2, [r3, #56]	@ 0x38
          		  TIM1->CCR3=Uc;//2;//Uc;
 8001498:	4b1a      	ldr	r3, [pc, #104]	@ (8001504 <SVPWM+0x46c>)
 800149a:	edd7 7a05 	vldr	s15, [r7, #20]
 800149e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014a2:	ee17 2a90 	vmov	r2, s15
 80014a6:	63da      	str	r2, [r3, #60]	@ 0x3c
          		  break;
 80014a8:	bf00      	nop
}
 80014aa:	e017      	b.n	80014dc <SVPWM+0x444>
          		 TIM8->CCR1=Ua;
 80014ac:	4b16      	ldr	r3, [pc, #88]	@ (8001508 <SVPWM+0x470>)
 80014ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80014b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014b6:	ee17 2a90 	vmov	r2, s15
 80014ba:	635a      	str	r2, [r3, #52]	@ 0x34
          		 TIM8->CCR2=Ub;
 80014bc:	4b12      	ldr	r3, [pc, #72]	@ (8001508 <SVPWM+0x470>)
 80014be:	edd7 7a06 	vldr	s15, [r7, #24]
 80014c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014c6:	ee17 2a90 	vmov	r2, s15
 80014ca:	639a      	str	r2, [r3, #56]	@ 0x38
          		 TIM8->CCR3=Uc;
 80014cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001508 <SVPWM+0x470>)
 80014ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80014d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014d6:	ee17 2a90 	vmov	r2, s15
 80014da:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80014dc:	bf00      	nop
 80014de:	3748      	adds	r7, #72	@ 0x48
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bdb0      	pop	{r4, r5, r7, pc}
 80014e4:	f3af 8000 	nop.w
 80014e8:	4abd0449 	.word	0x4abd0449
 80014ec:	3ff0c151 	.word	0x3ff0c151
 80014f0:	1c0010c7 	.word	0x1c0010c7
 80014f4:	3ffbb67b 	.word	0x3ffbb67b
 80014f8:	40280000 	.word	0x40280000
 80014fc:	3ff00000 	.word	0x3ff00000
 8001500:	457d2000 	.word	0x457d2000
 8001504:	40010000 	.word	0x40010000
 8001508:	40010400 	.word	0x40010400
 800150c:	f01b866e 	.word	0xf01b866e
 8001510:	400921f9 	.word	0x400921f9

08001514 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]

  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	ed93 7a06 	vldr	s14, [r3, #24]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	edd3 7a07 	vldr	s15, [r3, #28]
 800152a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	edd3 7a08 	vldr	s15, [r3, #32]
 8001534:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0 * S->Kd);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	edd3 7a06 	vldr	s15, [r3, #24]
 8001544:	eeb1 7a67 	vneg.f32	s14, s15
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	edd3 7a08 	vldr	s15, [r3, #32]
 800154e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001552:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a1a      	ldr	r2, [r3, #32]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d006      	beq.n	8001578 <arm_pid_init_f32+0x64>
  {
    /* Clear the state buffer.  The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	330c      	adds	r3, #12
 800156e:	220c      	movs	r2, #12
 8001570:	2100      	movs	r1, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f00d ff04 	bl	800f380 <memset>
  }

}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001580:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001584:	ed2d 8b02 	vpush	{d8}
 8001588:	b09e      	sub	sp, #120	@ 0x78
 800158a:	af00      	add	r7, sp, #0
	uint32_t rmse;
	uint32_t laser_on;
};

struct usb_tx galvo_tx, *ptr_galvo_tx;
ptr_galvo_tx=&galvo_tx;
 800158c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001590:	677b      	str	r3, [r7, #116]	@ 0x74
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001592:	f002 fe9c 	bl	80042ce <HAL_Init>
  /* USER CODE BEGIN Init */
  arm_pid_instance_f32 pid;
  arm_pid_instance_f32 pid2;
  // Initialize PID loop
//Motor1 PID control
  pid.Kp=pid_K;
 8001596:	4bb0      	ldr	r3, [pc, #704]	@ (8001858 <main+0x2d8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pid.Ki=pid_Ki;
 800159c:	4baf      	ldr	r3, [pc, #700]	@ (800185c <main+0x2dc>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	643b      	str	r3, [r7, #64]	@ 0x40
  pid.Kd=pid_kd;
 80015a2:	4baf      	ldr	r3, [pc, #700]	@ (8001860 <main+0x2e0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	647b      	str	r3, [r7, #68]	@ 0x44
  arm_pid_init_f32(&pid, 1);
 80015a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ac:	2101      	movs	r1, #1
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff ffb0 	bl	8001514 <arm_pid_init_f32>

  //Motor2 PID control
    pid2.Kp=pid2_K;
 80015b4:	4bab      	ldr	r3, [pc, #684]	@ (8001864 <main+0x2e4>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	61bb      	str	r3, [r7, #24]
    pid2.Ki=pid2_Ki;
 80015ba:	4bab      	ldr	r3, [pc, #684]	@ (8001868 <main+0x2e8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	61fb      	str	r3, [r7, #28]
    pid2.Kd=pid2_kd;
 80015c0:	4baa      	ldr	r3, [pc, #680]	@ (800186c <main+0x2ec>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	623b      	str	r3, [r7, #32]
    arm_pid_init_f32(&pid2, 1);
 80015c6:	463b      	mov	r3, r7
 80015c8:	2101      	movs	r1, #1
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff ffa2 	bl	8001514 <arm_pid_init_f32>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015d0:	f001 fa96 	bl	8002b00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015d4:	f002 f854 	bl	8003680 <MX_GPIO_Init>
  MX_DMA_Init();
 80015d8:	f002 f834 	bl	8003644 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80015dc:	f002 f802 	bl	80035e4 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80015e0:	f00c ffe4 	bl	800e5ac <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80015e4:	f001 fcae 	bl	8002f44 <MX_TIM1_Init>
  MX_TIM8_Init();
 80015e8:	f001 feec 	bl	80033c4 <MX_TIM8_Init>
  MX_TIM2_Init();
 80015ec:	f001 fd70 	bl	80030d0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80015f0:	f001 fdbc 	bl	800316c <MX_TIM3_Init>
  MX_TIM4_Init();
 80015f4:	f001 fe10 	bl	8003218 <MX_TIM4_Init>
  MX_TIM5_Init();
 80015f8:	f001 fe64 	bl	80032c4 <MX_TIM5_Init>
  MX_ADC1_Init();
 80015fc:	f001 faee 	bl	8002bdc <MX_ADC1_Init>
  MX_ADC3_Init();
 8001600:	f001 fb5c 	bl	8002cbc <MX_ADC3_Init>
  MX_CAN1_Init();
 8001604:	f001 fbf2 	bl	8002dec <MX_CAN1_Init>
  MX_I2C2_SMBUS_Init();
 8001608:	f001 fc5a 	bl	8002ec0 <MX_I2C2_SMBUS_Init>
  MX_TIM12_Init();
 800160c:	f001 ff82 	bl	8003514 <MX_TIM12_Init>
  MX_DAC_Init();
 8001610:	f001 fc22 	bl	8002e58 <MX_DAC_Init>
  MX_USART2_Init();
 8001614:	f001 ffba 	bl	800358c <MX_USART2_Init>
  /* USER CODE BEGIN 2 */
  //1microsecond time base
  HAL_TIM_Base_Start(&htim2);
 8001618:	4895      	ldr	r0, [pc, #596]	@ (8001870 <main+0x2f0>)
 800161a:	f007 f81d 	bl	8008658 <HAL_TIM_Base_Start>


  //HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
  //HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
  //Start SVPWM timers
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800161e:	2100      	movs	r1, #0
 8001620:	4894      	ldr	r0, [pc, #592]	@ (8001874 <main+0x2f4>)
 8001622:	f007 f941 	bl	80088a8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001626:	2100      	movs	r1, #0
 8001628:	4892      	ldr	r0, [pc, #584]	@ (8001874 <main+0x2f4>)
 800162a:	f008 fb13 	bl	8009c54 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800162e:	2104      	movs	r1, #4
 8001630:	4890      	ldr	r0, [pc, #576]	@ (8001874 <main+0x2f4>)
 8001632:	f007 f939 	bl	80088a8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001636:	2104      	movs	r1, #4
 8001638:	488e      	ldr	r0, [pc, #568]	@ (8001874 <main+0x2f4>)
 800163a:	f008 fb0b 	bl	8009c54 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800163e:	2108      	movs	r1, #8
 8001640:	488c      	ldr	r0, [pc, #560]	@ (8001874 <main+0x2f4>)
 8001642:	f007 f931 	bl	80088a8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001646:	2108      	movs	r1, #8
 8001648:	488a      	ldr	r0, [pc, #552]	@ (8001874 <main+0x2f4>)
 800164a:	f008 fb03 	bl	8009c54 <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800164e:	2100      	movs	r1, #0
 8001650:	4889      	ldr	r0, [pc, #548]	@ (8001878 <main+0x2f8>)
 8001652:	f007 f929 	bl	80088a8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 8001656:	2100      	movs	r1, #0
 8001658:	4887      	ldr	r0, [pc, #540]	@ (8001878 <main+0x2f8>)
 800165a:	f008 fafb 	bl	8009c54 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800165e:	2104      	movs	r1, #4
 8001660:	4885      	ldr	r0, [pc, #532]	@ (8001878 <main+0x2f8>)
 8001662:	f007 f921 	bl	80088a8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 8001666:	2104      	movs	r1, #4
 8001668:	4883      	ldr	r0, [pc, #524]	@ (8001878 <main+0x2f8>)
 800166a:	f008 faf3 	bl	8009c54 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800166e:	2108      	movs	r1, #8
 8001670:	4881      	ldr	r0, [pc, #516]	@ (8001878 <main+0x2f8>)
 8001672:	f007 f919 	bl	80088a8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 8001676:	2108      	movs	r1, #8
 8001678:	487f      	ldr	r0, [pc, #508]	@ (8001878 <main+0x2f8>)
 800167a:	f008 faeb 	bl	8009c54 <HAL_TIMEx_PWMN_Start>


  HAL_TIM_OnePulse_Start(&htim5, TIM_CHANNEL_1);
 800167e:	2100      	movs	r1, #0
 8001680:	487e      	ldr	r0, [pc, #504]	@ (800187c <main+0x2fc>)
 8001682:	f007 fa65 	bl	8008b50 <HAL_TIM_OnePulse_Start>
    TIM5->ARR = 0;
 8001686:	4b7e      	ldr	r3, [pc, #504]	@ (8001880 <main+0x300>)
 8001688:	2200      	movs	r2, #0
 800168a:	62da      	str	r2, [r3, #44]	@ 0x2c
  //TIM5->CCMR1 = 0b1100000;
 //   SVPWM(1,electricalAngle(rotor_offset1+0.5,motor_pole_pairs),1);
 //   SVPWM(1,electricalAngle(rotor_offset2-0.5,motor_pole_pairs),2);

HAL_Delay(1000);
 800168c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001690:	f002 fe7a 	bl	8004388 <HAL_Delay>
//HAL_Delay(1000);
//TIM5->CR1 |= TIM_CR1_CEN;
//HAL_Delay(1000);
  //Start Encoders
  //Enable encoders
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001694:	213c      	movs	r1, #60	@ 0x3c
 8001696:	487b      	ldr	r0, [pc, #492]	@ (8001884 <main+0x304>)
 8001698:	f007 fb62 	bl	8008d60 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800169c:	213c      	movs	r1, #60	@ 0x3c
 800169e:	487a      	ldr	r0, [pc, #488]	@ (8001888 <main+0x308>)
 80016a0:	f007 fb5e 	bl	8008d60 <HAL_TIM_Encoder_Start>
 //  SVPWM(0,electricalAngle(rotor_offset1,motor_pole_pairs),1);
//   SVPWM(0,electricalAngle(rotor_offset2,motor_pole_pairs),2);

 // TIM3->CNT=30000;
  encoder1 = __HAL_TIM_GET_COUNTER(&htim3);
 80016a4:	4b77      	ldr	r3, [pc, #476]	@ (8001884 <main+0x304>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016aa:	b21a      	sxth	r2, r3
 80016ac:	4b77      	ldr	r3, [pc, #476]	@ (800188c <main+0x30c>)
 80016ae:	801a      	strh	r2, [r3, #0]
  encoder2 = __HAL_TIM_GET_COUNTER(&htim4);
 80016b0:	4b75      	ldr	r3, [pc, #468]	@ (8001888 <main+0x308>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b6:	b21a      	sxth	r2, r3
 80016b8:	4b75      	ldr	r3, [pc, #468]	@ (8001890 <main+0x310>)
 80016ba:	801a      	strh	r2, [r3, #0]
  //home
 // home_offset=align_mirror();
  home_offset=(3 * _PI / 2) - 0.2292; //+ 0.2; //_PI/4+_PI;//2.5*_PI_div3+_2PI;
 80016bc:	4b75      	ldr	r3, [pc, #468]	@ (8001894 <main+0x314>)
 80016be:	4a76      	ldr	r2, [pc, #472]	@ (8001898 <main+0x318>)
 80016c0:	601a      	str	r2, [r3, #0]
  home2_offset= (2 *_PI) - 1.54;
 80016c2:	4b76      	ldr	r3, [pc, #472]	@ (800189c <main+0x31c>)
 80016c4:	4a76      	ldr	r2, [pc, #472]	@ (80018a0 <main+0x320>)
 80016c6:	601a      	str	r2, [r3, #0]

	if(motor_homed==0)
 80016c8:	4b76      	ldr	r3, [pc, #472]	@ (80018a4 <main+0x324>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d158      	bne.n	8001782 <main+0x202>
	{
		SVPWM(1,electricalAngle((home_offset+_PI/2),motor_pole_pairs),1);
 80016d0:	4b70      	ldr	r3, [pc, #448]	@ (8001894 <main+0x314>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe fefb 	bl	80004d0 <__aeabi_f2d>
 80016da:	a35d      	add	r3, pc, #372	@ (adr r3, 8001850 <main+0x2d0>)
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	f7fe fd98 	bl	8000214 <__adddf3>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f7ff fa40 	bl	8000b70 <__aeabi_d2f>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2001      	movs	r0, #1
 80016f4:	ee00 3a10 	vmov	s0, r3
 80016f8:	f7ff fc86 	bl	8001008 <electricalAngle>
 80016fc:	eef0 7a40 	vmov.f32	s15, s0
 8001700:	2001      	movs	r0, #1
 8001702:	eef0 0a67 	vmov.f32	s1, s15
 8001706:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800170a:	f7ff fcc5 	bl	8001098 <SVPWM>
	  HAL_Delay(2000);
 800170e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001712:	f002 fe39 	bl	8004388 <HAL_Delay>
	  TIM3->CNT=0;
 8001716:	4b64      	ldr	r3, [pc, #400]	@ (80018a8 <main+0x328>)
 8001718:	2200      	movs	r2, #0
 800171a:	625a      	str	r2, [r3, #36]	@ 0x24
	  encoder1 = (int16_t) TIM3->CNT;
 800171c:	4b62      	ldr	r3, [pc, #392]	@ (80018a8 <main+0x328>)
 800171e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001720:	b21a      	sxth	r2, r3
 8001722:	4b5a      	ldr	r3, [pc, #360]	@ (800188c <main+0x30c>)
 8001724:	801a      	strh	r2, [r3, #0]
//	  encoder1 = (int16_t) TIM3->CNT;
//	  rotor[1]=shaftAngle(encoder1);
	//  home_offset=(rotor[1]-rotor[0])/2;


	  SVPWM(1,electricalAngle((home2_offset+_PI/2),motor_pole_pairs),2);
 8001726:	4b5d      	ldr	r3, [pc, #372]	@ (800189c <main+0x31c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe fed0 	bl	80004d0 <__aeabi_f2d>
 8001730:	a347      	add	r3, pc, #284	@ (adr r3, 8001850 <main+0x2d0>)
 8001732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001736:	f7fe fd6d 	bl	8000214 <__adddf3>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4610      	mov	r0, r2
 8001740:	4619      	mov	r1, r3
 8001742:	f7ff fa15 	bl	8000b70 <__aeabi_d2f>
 8001746:	4603      	mov	r3, r0
 8001748:	2001      	movs	r0, #1
 800174a:	ee00 3a10 	vmov	s0, r3
 800174e:	f7ff fc5b 	bl	8001008 <electricalAngle>
 8001752:	eef0 7a40 	vmov.f32	s15, s0
 8001756:	2002      	movs	r0, #2
 8001758:	eef0 0a67 	vmov.f32	s1, s15
 800175c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001760:	f7ff fc9a 	bl	8001098 <SVPWM>
	  HAL_Delay(2000);
 8001764:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001768:	f002 fe0e 	bl	8004388 <HAL_Delay>
	  TIM4->CNT=0;
 800176c:	4b4f      	ldr	r3, [pc, #316]	@ (80018ac <main+0x32c>)
 800176e:	2200      	movs	r2, #0
 8001770:	625a      	str	r2, [r3, #36]	@ 0x24
	  encoder2 = (int16_t) TIM4->CNT;
 8001772:	4b4e      	ldr	r3, [pc, #312]	@ (80018ac <main+0x32c>)
 8001774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001776:	b21a      	sxth	r2, r3
 8001778:	4b45      	ldr	r3, [pc, #276]	@ (8001890 <main+0x310>)
 800177a:	801a      	strh	r2, [r3, #0]
	//	  rotor2[1]=shaftAngle(encoder2);
		//  home2_offset=-(rotor2[1]-rotor2[0])/2;

		//  SVPWM(1,electricalAngle(rotor_offset2-0.5,motor_pole_pairs),2);
		//  HAL_Delay(1000);
		  motor_homed=1;
 800177c:	4b49      	ldr	r3, [pc, #292]	@ (80018a4 <main+0x324>)
 800177e:	2201      	movs	r2, #1
 8001780:	601a      	str	r2, [r3, #0]

	}
	TIM3->CNT=0;
 8001782:	4b49      	ldr	r3, [pc, #292]	@ (80018a8 <main+0x328>)
 8001784:	2200      	movs	r2, #0
 8001786:	625a      	str	r2, [r3, #36]	@ 0x24
	encoder1 = (int16_t) TIM3->CNT;
 8001788:	4b47      	ldr	r3, [pc, #284]	@ (80018a8 <main+0x328>)
 800178a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800178c:	b21a      	sxth	r2, r3
 800178e:	4b3f      	ldr	r3, [pc, #252]	@ (800188c <main+0x30c>)
 8001790:	801a      	strh	r2, [r3, #0]
	TIM4->CNT=0;
 8001792:	4b46      	ldr	r3, [pc, #280]	@ (80018ac <main+0x32c>)
 8001794:	2200      	movs	r2, #0
 8001796:	625a      	str	r2, [r3, #36]	@ 0x24
	encoder2 = (int16_t) TIM4->CNT;
 8001798:	4b44      	ldr	r3, [pc, #272]	@ (80018ac <main+0x32c>)
 800179a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179c:	b21a      	sxth	r2, r3
 800179e:	4b3c      	ldr	r3, [pc, #240]	@ (8001890 <main+0x310>)
 80017a0:	801a      	strh	r2, [r3, #0]




	target_angle=shaftAngle(4800);//shaftAngle(4500);// 0.1;
 80017a2:	f44f 5096 	mov.w	r0, #4800	@ 0x12c0
 80017a6:	f7ff fbff 	bl	8000fa8 <shaftAngle>
 80017aa:	eef0 7a40 	vmov.f32	s15, s0
 80017ae:	4b40      	ldr	r3, [pc, #256]	@ (80018b0 <main+0x330>)
 80017b0:	edc3 7a00 	vstr	s15, [r3]
	  target_angle2= shaftAngle(4800);//shaftAngle(4500);// 0.1;// 0.17;
 80017b4:	f44f 5096 	mov.w	r0, #4800	@ 0x12c0
 80017b8:	f7ff fbf6 	bl	8000fa8 <shaftAngle>
 80017bc:	eef0 7a40 	vmov.f32	s15, s0
 80017c0:	4b3c      	ldr	r3, [pc, #240]	@ (80018b4 <main+0x334>)
 80017c2:	edc3 7a00 	vstr	s15, [r3]
	  move_position[0]=target_angle;
 80017c6:	4b3a      	ldr	r3, [pc, #232]	@ (80018b0 <main+0x330>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a3b      	ldr	r2, [pc, #236]	@ (80018b8 <main+0x338>)
 80017cc:	6013      	str	r3, [r2, #0]
	  move_position[1]=target_angle;
 80017ce:	4b38      	ldr	r3, [pc, #224]	@ (80018b0 <main+0x330>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a39      	ldr	r2, [pc, #228]	@ (80018b8 <main+0x338>)
 80017d4:	6053      	str	r3, [r2, #4]
	  move_position2[0]=target_angle2;
 80017d6:	4b37      	ldr	r3, [pc, #220]	@ (80018b4 <main+0x334>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a38      	ldr	r2, [pc, #224]	@ (80018bc <main+0x33c>)
 80017dc:	6013      	str	r3, [r2, #0]
	   move_position2[1]=target_angle2;
 80017de:	4b35      	ldr	r3, [pc, #212]	@ (80018b4 <main+0x334>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a36      	ldr	r2, [pc, #216]	@ (80018bc <main+0x33c>)
 80017e4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN WHILE */

  //Code to test motor
 //  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 //  HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
   HAL_ADC_Start_DMA(&hadc3, &AD_RES, 6);
 80017e6:	2206      	movs	r2, #6
 80017e8:	4935      	ldr	r1, [pc, #212]	@ (80018c0 <main+0x340>)
 80017ea:	4836      	ldr	r0, [pc, #216]	@ (80018c4 <main+0x344>)
 80017ec:	f002 fe34 	bl	8004458 <HAL_ADC_Start_DMA>
//  }

  while (1)
  {
	  //calculate cycle time
	  	time_base=__HAL_TIM_GET_COUNTER(&htim2);
 80017f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001870 <main+0x2f0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f6:	4a34      	ldr	r2, [pc, #208]	@ (80018c8 <main+0x348>)
 80017f8:	6013      	str	r3, [r2, #0]
	 	t1=t2;
 80017fa:	4b34      	ldr	r3, [pc, #208]	@ (80018cc <main+0x34c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a34      	ldr	r2, [pc, #208]	@ (80018d0 <main+0x350>)
 8001800:	6013      	str	r3, [r2, #0]
		t2=time_base;
 8001802:	4b31      	ldr	r3, [pc, #196]	@ (80018c8 <main+0x348>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a31      	ldr	r2, [pc, #196]	@ (80018cc <main+0x34c>)
 8001808:	6013      	str	r3, [r2, #0]
		time_step=t2-t1;
 800180a:	4b30      	ldr	r3, [pc, #192]	@ (80018cc <main+0x34c>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	4b30      	ldr	r3, [pc, #192]	@ (80018d0 <main+0x350>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	4a2f      	ldr	r2, [pc, #188]	@ (80018d4 <main+0x354>)
 8001816:	6013      	str	r3, [r2, #0]

	  //read encoders
		 encoder1 = (int16_t) TIM3->CNT;
 8001818:	4b23      	ldr	r3, [pc, #140]	@ (80018a8 <main+0x328>)
 800181a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181c:	b21a      	sxth	r2, r3
 800181e:	4b1b      	ldr	r3, [pc, #108]	@ (800188c <main+0x30c>)
 8001820:	801a      	strh	r2, [r3, #0]
		 //encoder1 = encoder1-30000;
		 encoder2 = (int16_t) TIM4->CNT;
 8001822:	4b22      	ldr	r3, [pc, #136]	@ (80018ac <main+0x32c>)
 8001824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001826:	b21a      	sxth	r2, r3
 8001828:	4b19      	ldr	r3, [pc, #100]	@ (8001890 <main+0x310>)
 800182a:	801a      	strh	r2, [r3, #0]


	if (move_position[0]!=move_position[1])
 800182c:	4b22      	ldr	r3, [pc, #136]	@ (80018b8 <main+0x338>)
 800182e:	ed93 7a00 	vldr	s14, [r3]
 8001832:	4b21      	ldr	r3, [pc, #132]	@ (80018b8 <main+0x338>)
 8001834:	edd3 7a01 	vldr	s15, [r3, #4]
 8001838:	eeb4 7a67 	vcmp.f32	s14, s15
 800183c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001840:	f000 80c7 	beq.w	80019d2 <main+0x452>
	{
		move_start_time=time_base;
 8001844:	4b20      	ldr	r3, [pc, #128]	@ (80018c8 <main+0x348>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a23      	ldr	r2, [pc, #140]	@ (80018d8 <main+0x358>)
 800184a:	6013      	str	r3, [r2, #0]
 800184c:	e046      	b.n	80018dc <main+0x35c>
 800184e:	bf00      	nop
 8001850:	f01b866e 	.word	0xf01b866e
 8001854:	3ff921f9 	.word	0x3ff921f9
 8001858:	20000000 	.word	0x20000000
 800185c:	200006bc 	.word	0x200006bc
 8001860:	20000004 	.word	0x20000004
 8001864:	20000008 	.word	0x20000008
 8001868:	200006c4 	.word	0x200006c4
 800186c:	2000000c 	.word	0x2000000c
 8001870:	2000036c 	.word	0x2000036c
 8001874:	20000320 	.word	0x20000320
 8001878:	2000049c 	.word	0x2000049c
 800187c:	20000450 	.word	0x20000450
 8001880:	40000c00 	.word	0x40000c00
 8001884:	200003b8 	.word	0x200003b8
 8001888:	20000404 	.word	0x20000404
 800188c:	2000060c 	.word	0x2000060c
 8001890:	2000060e 	.word	0x2000060e
 8001894:	200006cc 	.word	0x200006cc
 8001898:	408f7640 	.word	0x408f7640
 800189c:	200006d0 	.word	0x200006d0
 80018a0:	4097c821 	.word	0x4097c821
 80018a4:	200006d4 	.word	0x200006d4
 80018a8:	40000400 	.word	0x40000400
 80018ac:	40000800 	.word	0x40000800
 80018b0:	2000063c 	.word	0x2000063c
 80018b4:	2000068c 	.word	0x2000068c
 80018b8:	2000064c 	.word	0x2000064c
 80018bc:	20000698 	.word	0x20000698
 80018c0:	200006f0 	.word	0x200006f0
 80018c4:	200001ec 	.word	0x200001ec
 80018c8:	2000061c 	.word	0x2000061c
 80018cc:	20000624 	.word	0x20000624
 80018d0:	20000620 	.word	0x20000620
 80018d4:	20000628 	.word	0x20000628
 80018d8:	20000630 	.word	0x20000630
		move_position[1]=current_position;
 80018dc:	4bb6      	ldr	r3, [pc, #728]	@ (8001bb8 <main+0x638>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4ab6      	ldr	r2, [pc, #728]	@ (8001bbc <main+0x63c>)
 80018e2:	6053      	str	r3, [r2, #4]
		move_start_position=current_position;
 80018e4:	4bb4      	ldr	r3, [pc, #720]	@ (8001bb8 <main+0x638>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4ab5      	ldr	r2, [pc, #724]	@ (8001bc0 <main+0x640>)
 80018ea:	6013      	str	r3, [r2, #0]
		move_distance=move_position[0]-move_position[1];
 80018ec:	4bb3      	ldr	r3, [pc, #716]	@ (8001bbc <main+0x63c>)
 80018ee:	ed93 7a00 	vldr	s14, [r3]
 80018f2:	4bb2      	ldr	r3, [pc, #712]	@ (8001bbc <main+0x63c>)
 80018f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80018f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018fc:	4bb1      	ldr	r3, [pc, #708]	@ (8001bc4 <main+0x644>)
 80018fe:	edc3 7a00 	vstr	s15, [r3]
		move_mid_point=move_position[1]+move_distance/2;
 8001902:	4bae      	ldr	r3, [pc, #696]	@ (8001bbc <main+0x63c>)
 8001904:	ed93 7a01 	vldr	s14, [r3, #4]
 8001908:	4bae      	ldr	r3, [pc, #696]	@ (8001bc4 <main+0x644>)
 800190a:	edd3 6a00 	vldr	s13, [r3]
 800190e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8001912:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001916:	ee77 7a27 	vadd.f32	s15, s14, s15
 800191a:	4bab      	ldr	r3, [pc, #684]	@ (8001bc8 <main+0x648>)
 800191c:	edc3 7a00 	vstr	s15, [r3]
		//accel time in us
		accel_time=(float) sqrt(2*(fabs(move_distance))/accel_limit)*1e6;
 8001920:	4ba8      	ldr	r3, [pc, #672]	@ (8001bc4 <main+0x644>)
 8001922:	edd3 7a00 	vldr	s15, [r3]
 8001926:	eef0 7ae7 	vabs.f32	s15, s15
 800192a:	ee17 0a90 	vmov	r0, s15
 800192e:	f7fe fdcf 	bl	80004d0 <__aeabi_f2d>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	f7fe fc6d 	bl	8000214 <__adddf3>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	4610      	mov	r0, r2
 8001940:	4619      	mov	r1, r3
 8001942:	a399      	add	r3, pc, #612	@ (adr r3, 8001ba8 <main+0x628>)
 8001944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001948:	f7fe ff44 	bl	80007d4 <__aeabi_ddiv>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	ec43 2b17 	vmov	d7, r2, r3
 8001954:	eeb0 0a47 	vmov.f32	s0, s14
 8001958:	eef0 0a67 	vmov.f32	s1, s15
 800195c:	f00d fe4a 	bl	800f5f4 <sqrt>
 8001960:	ec53 2b10 	vmov	r2, r3, d0
 8001964:	4610      	mov	r0, r2
 8001966:	4619      	mov	r1, r3
 8001968:	f7ff f902 	bl	8000b70 <__aeabi_d2f>
 800196c:	4603      	mov	r3, r0
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fdae 	bl	80004d0 <__aeabi_f2d>
 8001974:	a38e      	add	r3, pc, #568	@ (adr r3, 8001bb0 <main+0x630>)
 8001976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197a:	f7fe fe01 	bl	8000580 <__aeabi_dmul>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4610      	mov	r0, r2
 8001984:	4619      	mov	r1, r3
 8001986:	f7ff f8f3 	bl	8000b70 <__aeabi_d2f>
 800198a:	4603      	mov	r3, r0
 800198c:	4a8f      	ldr	r2, [pc, #572]	@ (8001bcc <main+0x64c>)
 800198e:	6013      	str	r3, [r2, #0]
		decel_time=accel_time;
 8001990:	4b8e      	ldr	r3, [pc, #568]	@ (8001bcc <main+0x64c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a8e      	ldr	r2, [pc, #568]	@ (8001bd0 <main+0x650>)
 8001996:	6013      	str	r3, [r2, #0]
		//duration of move (triangular profile)
		move_time=accel_time+accel_time;
 8001998:	4b8c      	ldr	r3, [pc, #560]	@ (8001bcc <main+0x64c>)
 800199a:	edd3 7a00 	vldr	s15, [r3]
 800199e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019a2:	4b8c      	ldr	r3, [pc, #560]	@ (8001bd4 <main+0x654>)
 80019a4:	edc3 7a00 	vstr	s15, [r3]
		move_end_time=time_base+move_time;
 80019a8:	4b8b      	ldr	r3, [pc, #556]	@ (8001bd8 <main+0x658>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	ee07 3a90 	vmov	s15, r3
 80019b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019b4:	4b87      	ldr	r3, [pc, #540]	@ (8001bd4 <main+0x654>)
 80019b6:	edd3 7a00 	vldr	s15, [r3]
 80019ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019c2:	ee17 2a90 	vmov	r2, s15
 80019c6:	4b85      	ldr	r3, [pc, #532]	@ (8001bdc <main+0x65c>)
 80019c8:	601a      	str	r2, [r3, #0]
		move_position[1]=move_position[0];
 80019ca:	4b7c      	ldr	r3, [pc, #496]	@ (8001bbc <main+0x63c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a7b      	ldr	r2, [pc, #492]	@ (8001bbc <main+0x63c>)
 80019d0:	6053      	str	r3, [r2, #4]
	}
		if (time_base<move_end_time)
 80019d2:	4b81      	ldr	r3, [pc, #516]	@ (8001bd8 <main+0x658>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	4b81      	ldr	r3, [pc, #516]	@ (8001bdc <main+0x65c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	f080 8246 	bcs.w	8001e6c <main+0x8ec>
		{
			move_time_base=time_base-move_start_time; //timer started at beginning of move
 80019e0:	4b7d      	ldr	r3, [pc, #500]	@ (8001bd8 <main+0x658>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b7e      	ldr	r3, [pc, #504]	@ (8001be0 <main+0x660>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	4a7e      	ldr	r2, [pc, #504]	@ (8001be4 <main+0x664>)
 80019ec:	6013      	str	r3, [r2, #0]
			if (time_base<move_start_time+move_time/2)
 80019ee:	4b7a      	ldr	r3, [pc, #488]	@ (8001bd8 <main+0x658>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	ee07 3a90 	vmov	s15, r3
 80019f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019fa:	4b79      	ldr	r3, [pc, #484]	@ (8001be0 <main+0x660>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	ee07 3a90 	vmov	s15, r3
 8001a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a06:	4b73      	ldr	r3, [pc, #460]	@ (8001bd4 <main+0x654>)
 8001a08:	ed93 6a00 	vldr	s12, [r3]
 8001a0c:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 8001a10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001a14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a20:	f140 80ea 	bpl.w	8001bf8 <main+0x678>
			{

				if(move_distance>0)
 8001a24:	4b67      	ldr	r3, [pc, #412]	@ (8001bc4 <main+0x644>)
 8001a26:	edd3 7a00 	vldr	s15, [r3]
 8001a2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a32:	dd5c      	ble.n	8001aee <main+0x56e>
				{
					target_velocity=accel_limit*move_time_base/1e6;
 8001a34:	4b6b      	ldr	r3, [pc, #428]	@ (8001be4 <main+0x664>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001a3c:	fb02 f303 	mul.w	r3, r2, r3
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fd23 	bl	800048c <__aeabi_ui2d>
 8001a46:	a35a      	add	r3, pc, #360	@ (adr r3, 8001bb0 <main+0x630>)
 8001a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4c:	f7fe fec2 	bl	80007d4 <__aeabi_ddiv>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4610      	mov	r0, r2
 8001a56:	4619      	mov	r1, r3
 8001a58:	f7ff f88a 	bl	8000b70 <__aeabi_d2f>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	4a62      	ldr	r2, [pc, #392]	@ (8001be8 <main+0x668>)
 8001a60:	6013      	str	r3, [r2, #0]
					target_profile=move_start_position+(accel_limit*move_time_base/1e6*move_time_base/1e6)/4;
 8001a62:	4b57      	ldr	r3, [pc, #348]	@ (8001bc0 <main+0x640>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fd32 	bl	80004d0 <__aeabi_f2d>
 8001a6c:	4604      	mov	r4, r0
 8001a6e:	460d      	mov	r5, r1
 8001a70:	4b5c      	ldr	r3, [pc, #368]	@ (8001be4 <main+0x664>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001a78:	fb02 f303 	mul.w	r3, r2, r3
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe fd05 	bl	800048c <__aeabi_ui2d>
 8001a82:	a34b      	add	r3, pc, #300	@ (adr r3, 8001bb0 <main+0x630>)
 8001a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a88:	f7fe fea4 	bl	80007d4 <__aeabi_ddiv>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4690      	mov	r8, r2
 8001a92:	4699      	mov	r9, r3
 8001a94:	4b53      	ldr	r3, [pc, #332]	@ (8001be4 <main+0x664>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fcf7 	bl	800048c <__aeabi_ui2d>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4640      	mov	r0, r8
 8001aa4:	4649      	mov	r1, r9
 8001aa6:	f7fe fd6b 	bl	8000580 <__aeabi_dmul>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4610      	mov	r0, r2
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	a33f      	add	r3, pc, #252	@ (adr r3, 8001bb0 <main+0x630>)
 8001ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab8:	f7fe fe8c 	bl	80007d4 <__aeabi_ddiv>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	4b48      	ldr	r3, [pc, #288]	@ (8001bec <main+0x66c>)
 8001aca:	f7fe fe83 	bl	80007d4 <__aeabi_ddiv>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	4629      	mov	r1, r5
 8001ad6:	f7fe fb9d 	bl	8000214 <__adddf3>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4610      	mov	r0, r2
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f7ff f845 	bl	8000b70 <__aeabi_d2f>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	4a41      	ldr	r2, [pc, #260]	@ (8001bf0 <main+0x670>)
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	e198      	b.n	8001e20 <main+0x8a0>
				}
				else
				{
					target_velocity=-accel_limit*move_time_base/1e6;
 8001aee:	4b3d      	ldr	r3, [pc, #244]	@ (8001be4 <main+0x664>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a40      	ldr	r2, [pc, #256]	@ (8001bf4 <main+0x674>)
 8001af4:	fb02 f303 	mul.w	r3, r2, r3
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fcc7 	bl	800048c <__aeabi_ui2d>
 8001afe:	a32c      	add	r3, pc, #176	@ (adr r3, 8001bb0 <main+0x630>)
 8001b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b04:	f7fe fe66 	bl	80007d4 <__aeabi_ddiv>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f7ff f82e 	bl	8000b70 <__aeabi_d2f>
 8001b14:	4603      	mov	r3, r0
 8001b16:	4a34      	ldr	r2, [pc, #208]	@ (8001be8 <main+0x668>)
 8001b18:	6013      	str	r3, [r2, #0]
					target_profile=move_start_position-(accel_limit*move_time_base/1e6*move_time_base/1e6)/4;
 8001b1a:	4b29      	ldr	r3, [pc, #164]	@ (8001bc0 <main+0x640>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fcd6 	bl	80004d0 <__aeabi_f2d>
 8001b24:	4604      	mov	r4, r0
 8001b26:	460d      	mov	r5, r1
 8001b28:	4b2e      	ldr	r3, [pc, #184]	@ (8001be4 <main+0x664>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001b30:	fb02 f303 	mul.w	r3, r2, r3
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7fe fca9 	bl	800048c <__aeabi_ui2d>
 8001b3a:	a31d      	add	r3, pc, #116	@ (adr r3, 8001bb0 <main+0x630>)
 8001b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b40:	f7fe fe48 	bl	80007d4 <__aeabi_ddiv>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4690      	mov	r8, r2
 8001b4a:	4699      	mov	r9, r3
 8001b4c:	4b25      	ldr	r3, [pc, #148]	@ (8001be4 <main+0x664>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fc9b 	bl	800048c <__aeabi_ui2d>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4640      	mov	r0, r8
 8001b5c:	4649      	mov	r1, r9
 8001b5e:	f7fe fd0f 	bl	8000580 <__aeabi_dmul>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4610      	mov	r0, r2
 8001b68:	4619      	mov	r1, r3
 8001b6a:	a311      	add	r3, pc, #68	@ (adr r3, 8001bb0 <main+0x630>)
 8001b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b70:	f7fe fe30 	bl	80007d4 <__aeabi_ddiv>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	4b1a      	ldr	r3, [pc, #104]	@ (8001bec <main+0x66c>)
 8001b82:	f7fe fe27 	bl	80007d4 <__aeabi_ddiv>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	4629      	mov	r1, r5
 8001b8e:	f7fe fb3f 	bl	8000210 <__aeabi_dsub>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4610      	mov	r0, r2
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f7fe ffe9 	bl	8000b70 <__aeabi_d2f>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4a13      	ldr	r2, [pc, #76]	@ (8001bf0 <main+0x670>)
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	e13c      	b.n	8001e20 <main+0x8a0>
 8001ba6:	bf00      	nop
 8001ba8:	00000000 	.word	0x00000000
 8001bac:	40a77000 	.word	0x40a77000
 8001bb0:	00000000 	.word	0x00000000
 8001bb4:	412e8480 	.word	0x412e8480
 8001bb8:	20000610 	.word	0x20000610
 8001bbc:	2000064c 	.word	0x2000064c
 8001bc0:	20000648 	.word	0x20000648
 8001bc4:	20000654 	.word	0x20000654
 8001bc8:	20000658 	.word	0x20000658
 8001bcc:	20000664 	.word	0x20000664
 8001bd0:	20000668 	.word	0x20000668
 8001bd4:	2000066c 	.word	0x2000066c
 8001bd8:	2000061c 	.word	0x2000061c
 8001bdc:	20000634 	.word	0x20000634
 8001be0:	20000630 	.word	0x20000630
 8001be4:	2000062c 	.word	0x2000062c
 8001be8:	20000660 	.word	0x20000660
 8001bec:	40100000 	.word	0x40100000
 8001bf0:	2000065c 	.word	0x2000065c
 8001bf4:	fffff448 	.word	0xfffff448

				}
			}
			else
			{
				if(move_distance>0)
 8001bf8:	4b91      	ldr	r3, [pc, #580]	@ (8001e40 <main+0x8c0>)
 8001bfa:	edd3 7a00 	vldr	s15, [r3]
 8001bfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c06:	f340 8086 	ble.w	8001d16 <main+0x796>
				{
					target_velocity=accel_limit*(accel_time/1e6-((move_time_base-decel_time)/1e6));
 8001c0a:	4b8e      	ldr	r3, [pc, #568]	@ (8001e44 <main+0x8c4>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe fc5e 	bl	80004d0 <__aeabi_f2d>
 8001c14:	a386      	add	r3, pc, #536	@ (adr r3, 8001e30 <main+0x8b0>)
 8001c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1a:	f7fe fddb 	bl	80007d4 <__aeabi_ddiv>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4614      	mov	r4, r2
 8001c24:	461d      	mov	r5, r3
 8001c26:	4b88      	ldr	r3, [pc, #544]	@ (8001e48 <main+0x8c8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	ee07 3a90 	vmov	s15, r3
 8001c2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c32:	4b86      	ldr	r3, [pc, #536]	@ (8001e4c <main+0x8cc>)
 8001c34:	edd3 7a00 	vldr	s15, [r3]
 8001c38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c3c:	ee17 0a90 	vmov	r0, s15
 8001c40:	f7fe fc46 	bl	80004d0 <__aeabi_f2d>
 8001c44:	a37a      	add	r3, pc, #488	@ (adr r3, 8001e30 <main+0x8b0>)
 8001c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4a:	f7fe fdc3 	bl	80007d4 <__aeabi_ddiv>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	4620      	mov	r0, r4
 8001c54:	4629      	mov	r1, r5
 8001c56:	f7fe fadb 	bl	8000210 <__aeabi_dsub>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4610      	mov	r0, r2
 8001c60:	4619      	mov	r1, r3
 8001c62:	a375      	add	r3, pc, #468	@ (adr r3, 8001e38 <main+0x8b8>)
 8001c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c68:	f7fe fc8a 	bl	8000580 <__aeabi_dmul>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	f7fe ff7c 	bl	8000b70 <__aeabi_d2f>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	4a75      	ldr	r2, [pc, #468]	@ (8001e50 <main+0x8d0>)
 8001c7c:	6013      	str	r3, [r2, #0]
					target_profile=move_position[0]-(accel_limit*(move_end_time-time_base)/1e6*(move_end_time-time_base)/1e6/4);
 8001c7e:	4b75      	ldr	r3, [pc, #468]	@ (8001e54 <main+0x8d4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe fc24 	bl	80004d0 <__aeabi_f2d>
 8001c88:	4604      	mov	r4, r0
 8001c8a:	460d      	mov	r5, r1
 8001c8c:	4b72      	ldr	r3, [pc, #456]	@ (8001e58 <main+0x8d8>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4b72      	ldr	r3, [pc, #456]	@ (8001e5c <main+0x8dc>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001c9a:	fb02 f303 	mul.w	r3, r2, r3
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fbf4 	bl	800048c <__aeabi_ui2d>
 8001ca4:	a362      	add	r3, pc, #392	@ (adr r3, 8001e30 <main+0x8b0>)
 8001ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001caa:	f7fe fd93 	bl	80007d4 <__aeabi_ddiv>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4690      	mov	r8, r2
 8001cb4:	4699      	mov	r9, r3
 8001cb6:	4b68      	ldr	r3, [pc, #416]	@ (8001e58 <main+0x8d8>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	4b68      	ldr	r3, [pc, #416]	@ (8001e5c <main+0x8dc>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe fbe3 	bl	800048c <__aeabi_ui2d>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4640      	mov	r0, r8
 8001ccc:	4649      	mov	r1, r9
 8001cce:	f7fe fc57 	bl	8000580 <__aeabi_dmul>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	4619      	mov	r1, r3
 8001cda:	a355      	add	r3, pc, #340	@ (adr r3, 8001e30 <main+0x8b0>)
 8001cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce0:	f7fe fd78 	bl	80007d4 <__aeabi_ddiv>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4610      	mov	r0, r2
 8001cea:	4619      	mov	r1, r3
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	4b5b      	ldr	r3, [pc, #364]	@ (8001e60 <main+0x8e0>)
 8001cf2:	f7fe fd6f 	bl	80007d4 <__aeabi_ddiv>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	4629      	mov	r1, r5
 8001cfe:	f7fe fa87 	bl	8000210 <__aeabi_dsub>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	4610      	mov	r0, r2
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f7fe ff31 	bl	8000b70 <__aeabi_d2f>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	4a54      	ldr	r2, [pc, #336]	@ (8001e64 <main+0x8e4>)
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	e084      	b.n	8001e20 <main+0x8a0>
				}
				else
				{
					target_velocity=accel_limit*(accel_time/1e6-((move_time_base-decel_time)/1e6));
 8001d16:	4b4b      	ldr	r3, [pc, #300]	@ (8001e44 <main+0x8c4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fbd8 	bl	80004d0 <__aeabi_f2d>
 8001d20:	a343      	add	r3, pc, #268	@ (adr r3, 8001e30 <main+0x8b0>)
 8001d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d26:	f7fe fd55 	bl	80007d4 <__aeabi_ddiv>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4614      	mov	r4, r2
 8001d30:	461d      	mov	r5, r3
 8001d32:	4b45      	ldr	r3, [pc, #276]	@ (8001e48 <main+0x8c8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	ee07 3a90 	vmov	s15, r3
 8001d3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d3e:	4b43      	ldr	r3, [pc, #268]	@ (8001e4c <main+0x8cc>)
 8001d40:	edd3 7a00 	vldr	s15, [r3]
 8001d44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d48:	ee17 0a90 	vmov	r0, s15
 8001d4c:	f7fe fbc0 	bl	80004d0 <__aeabi_f2d>
 8001d50:	a337      	add	r3, pc, #220	@ (adr r3, 8001e30 <main+0x8b0>)
 8001d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d56:	f7fe fd3d 	bl	80007d4 <__aeabi_ddiv>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4620      	mov	r0, r4
 8001d60:	4629      	mov	r1, r5
 8001d62:	f7fe fa55 	bl	8000210 <__aeabi_dsub>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	a332      	add	r3, pc, #200	@ (adr r3, 8001e38 <main+0x8b8>)
 8001d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d74:	f7fe fc04 	bl	8000580 <__aeabi_dmul>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f7fe fef6 	bl	8000b70 <__aeabi_d2f>
 8001d84:	4603      	mov	r3, r0
 8001d86:	4a32      	ldr	r2, [pc, #200]	@ (8001e50 <main+0x8d0>)
 8001d88:	6013      	str	r3, [r2, #0]
					target_profile=move_position[0]+(accel_limit*(move_end_time-time_base)/1e6*(move_end_time-time_base)/1e6/4);
 8001d8a:	4b32      	ldr	r3, [pc, #200]	@ (8001e54 <main+0x8d4>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fb9e 	bl	80004d0 <__aeabi_f2d>
 8001d94:	4604      	mov	r4, r0
 8001d96:	460d      	mov	r5, r1
 8001d98:	4b2f      	ldr	r3, [pc, #188]	@ (8001e58 <main+0x8d8>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4b2f      	ldr	r3, [pc, #188]	@ (8001e5c <main+0x8dc>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001da6:	fb02 f303 	mul.w	r3, r2, r3
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fb6e 	bl	800048c <__aeabi_ui2d>
 8001db0:	a31f      	add	r3, pc, #124	@ (adr r3, 8001e30 <main+0x8b0>)
 8001db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db6:	f7fe fd0d 	bl	80007d4 <__aeabi_ddiv>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4690      	mov	r8, r2
 8001dc0:	4699      	mov	r9, r3
 8001dc2:	4b25      	ldr	r3, [pc, #148]	@ (8001e58 <main+0x8d8>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	4b25      	ldr	r3, [pc, #148]	@ (8001e5c <main+0x8dc>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fb5d 	bl	800048c <__aeabi_ui2d>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4640      	mov	r0, r8
 8001dd8:	4649      	mov	r1, r9
 8001dda:	f7fe fbd1 	bl	8000580 <__aeabi_dmul>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4610      	mov	r0, r2
 8001de4:	4619      	mov	r1, r3
 8001de6:	a312      	add	r3, pc, #72	@ (adr r3, 8001e30 <main+0x8b0>)
 8001de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dec:	f7fe fcf2 	bl	80007d4 <__aeabi_ddiv>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4610      	mov	r0, r2
 8001df6:	4619      	mov	r1, r3
 8001df8:	f04f 0200 	mov.w	r2, #0
 8001dfc:	4b18      	ldr	r3, [pc, #96]	@ (8001e60 <main+0x8e0>)
 8001dfe:	f7fe fce9 	bl	80007d4 <__aeabi_ddiv>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4620      	mov	r0, r4
 8001e08:	4629      	mov	r1, r5
 8001e0a:	f7fe fa03 	bl	8000214 <__adddf3>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4610      	mov	r0, r2
 8001e14:	4619      	mov	r1, r3
 8001e16:	f7fe feab 	bl	8000b70 <__aeabi_d2f>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	4a11      	ldr	r2, [pc, #68]	@ (8001e64 <main+0x8e4>)
 8001e1e:	6013      	str	r3, [r2, #0]

				}
			}

			target_angle=target_profile;
 8001e20:	4b10      	ldr	r3, [pc, #64]	@ (8001e64 <main+0x8e4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a10      	ldr	r2, [pc, #64]	@ (8001e68 <main+0x8e8>)
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	e024      	b.n	8001e74 <main+0x8f4>
 8001e2a:	bf00      	nop
 8001e2c:	f3af 8000 	nop.w
 8001e30:	00000000 	.word	0x00000000
 8001e34:	412e8480 	.word	0x412e8480
 8001e38:	00000000 	.word	0x00000000
 8001e3c:	40a77000 	.word	0x40a77000
 8001e40:	20000654 	.word	0x20000654
 8001e44:	20000664 	.word	0x20000664
 8001e48:	2000062c 	.word	0x2000062c
 8001e4c:	20000668 	.word	0x20000668
 8001e50:	20000660 	.word	0x20000660
 8001e54:	2000064c 	.word	0x2000064c
 8001e58:	20000634 	.word	0x20000634
 8001e5c:	2000061c 	.word	0x2000061c
 8001e60:	40100000 	.word	0x40100000
 8001e64:	2000065c 	.word	0x2000065c
 8001e68:	2000063c 	.word	0x2000063c
		}
		else
		{
			target_angle=move_position[0];
 8001e6c:	4bc0      	ldr	r3, [pc, #768]	@ (8002170 <main+0xbf0>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4ac0      	ldr	r2, [pc, #768]	@ (8002174 <main+0xbf4>)
 8001e72:	6013      	str	r3, [r2, #0]

		}


		//Motor 2
		if (move_position2[0]!=move_position2[1])
 8001e74:	4bc0      	ldr	r3, [pc, #768]	@ (8002178 <main+0xbf8>)
 8001e76:	ed93 7a00 	vldr	s14, [r3]
 8001e7a:	4bbf      	ldr	r3, [pc, #764]	@ (8002178 <main+0xbf8>)
 8001e7c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e80:	eeb4 7a67 	vcmp.f32	s14, s15
 8001e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e88:	d07e      	beq.n	8001f88 <main+0xa08>
		{
			move_start_time2=time_base;
 8001e8a:	4bbc      	ldr	r3, [pc, #752]	@ (800217c <main+0xbfc>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4abc      	ldr	r2, [pc, #752]	@ (8002180 <main+0xc00>)
 8001e90:	6013      	str	r3, [r2, #0]
			move_position2[1]=current_position2;
 8001e92:	4bbc      	ldr	r3, [pc, #752]	@ (8002184 <main+0xc04>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4ab8      	ldr	r2, [pc, #736]	@ (8002178 <main+0xbf8>)
 8001e98:	6053      	str	r3, [r2, #4]
			move_start_position2=current_position2;
 8001e9a:	4bba      	ldr	r3, [pc, #744]	@ (8002184 <main+0xc04>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4aba      	ldr	r2, [pc, #744]	@ (8002188 <main+0xc08>)
 8001ea0:	6013      	str	r3, [r2, #0]
			move_distance2=move_position2[0]-move_position2[1];
 8001ea2:	4bb5      	ldr	r3, [pc, #724]	@ (8002178 <main+0xbf8>)
 8001ea4:	ed93 7a00 	vldr	s14, [r3]
 8001ea8:	4bb3      	ldr	r3, [pc, #716]	@ (8002178 <main+0xbf8>)
 8001eaa:	edd3 7a01 	vldr	s15, [r3, #4]
 8001eae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eb2:	4bb6      	ldr	r3, [pc, #728]	@ (800218c <main+0xc0c>)
 8001eb4:	edc3 7a00 	vstr	s15, [r3]
			move_mid_point2=move_position2[1]+move_distance2/2;
 8001eb8:	4baf      	ldr	r3, [pc, #700]	@ (8002178 <main+0xbf8>)
 8001eba:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ebe:	4bb3      	ldr	r3, [pc, #716]	@ (800218c <main+0xc0c>)
 8001ec0:	edd3 6a00 	vldr	s13, [r3]
 8001ec4:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8001ec8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ed0:	4baf      	ldr	r3, [pc, #700]	@ (8002190 <main+0xc10>)
 8001ed2:	edc3 7a00 	vstr	s15, [r3]
			//accel time in us
			accel_time2=(float) sqrt(2*(fabs(move_distance2))/accel_limit2)*1e6;
 8001ed6:	4bad      	ldr	r3, [pc, #692]	@ (800218c <main+0xc0c>)
 8001ed8:	edd3 7a00 	vldr	s15, [r3]
 8001edc:	eef0 7ae7 	vabs.f32	s15, s15
 8001ee0:	ee17 0a90 	vmov	r0, s15
 8001ee4:	f7fe faf4 	bl	80004d0 <__aeabi_f2d>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	f7fe f992 	bl	8000214 <__adddf3>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	a399      	add	r3, pc, #612	@ (adr r3, 8002160 <main+0xbe0>)
 8001efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efe:	f7fe fc69 	bl	80007d4 <__aeabi_ddiv>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	ec43 2b17 	vmov	d7, r2, r3
 8001f0a:	eeb0 0a47 	vmov.f32	s0, s14
 8001f0e:	eef0 0a67 	vmov.f32	s1, s15
 8001f12:	f00d fb6f 	bl	800f5f4 <sqrt>
 8001f16:	ec53 2b10 	vmov	r2, r3, d0
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f7fe fe27 	bl	8000b70 <__aeabi_d2f>
 8001f22:	4603      	mov	r3, r0
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe fad3 	bl	80004d0 <__aeabi_f2d>
 8001f2a:	a38f      	add	r3, pc, #572	@ (adr r3, 8002168 <main+0xbe8>)
 8001f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f30:	f7fe fb26 	bl	8000580 <__aeabi_dmul>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4610      	mov	r0, r2
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f7fe fe18 	bl	8000b70 <__aeabi_d2f>
 8001f40:	4603      	mov	r3, r0
 8001f42:	4a94      	ldr	r2, [pc, #592]	@ (8002194 <main+0xc14>)
 8001f44:	6013      	str	r3, [r2, #0]
			decel_time2=accel_time2;
 8001f46:	4b93      	ldr	r3, [pc, #588]	@ (8002194 <main+0xc14>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a93      	ldr	r2, [pc, #588]	@ (8002198 <main+0xc18>)
 8001f4c:	6013      	str	r3, [r2, #0]
			//duration of move (triangular profile)
			move_time2=accel_time2+accel_time2;
 8001f4e:	4b91      	ldr	r3, [pc, #580]	@ (8002194 <main+0xc14>)
 8001f50:	edd3 7a00 	vldr	s15, [r3]
 8001f54:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f58:	4b90      	ldr	r3, [pc, #576]	@ (800219c <main+0xc1c>)
 8001f5a:	edc3 7a00 	vstr	s15, [r3]
			move_end_time2=time_base+move_time2;
 8001f5e:	4b87      	ldr	r3, [pc, #540]	@ (800217c <main+0xbfc>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	ee07 3a90 	vmov	s15, r3
 8001f66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f6a:	4b8c      	ldr	r3, [pc, #560]	@ (800219c <main+0xc1c>)
 8001f6c:	edd3 7a00 	vldr	s15, [r3]
 8001f70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f78:	ee17 2a90 	vmov	r2, s15
 8001f7c:	4b88      	ldr	r3, [pc, #544]	@ (80021a0 <main+0xc20>)
 8001f7e:	601a      	str	r2, [r3, #0]
			move_position2[1]=move_position2[0];
 8001f80:	4b7d      	ldr	r3, [pc, #500]	@ (8002178 <main+0xbf8>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a7c      	ldr	r2, [pc, #496]	@ (8002178 <main+0xbf8>)
 8001f86:	6053      	str	r3, [r2, #4]
		}
			if (time_base<move_end_time2)
 8001f88:	4b7c      	ldr	r3, [pc, #496]	@ (800217c <main+0xbfc>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b84      	ldr	r3, [pc, #528]	@ (80021a0 <main+0xc20>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	f080 824b 	bcs.w	800242c <main+0xeac>
			{
				move_time_base2=time_base-move_start_time2; //timer started at beginning of move
 8001f96:	4b79      	ldr	r3, [pc, #484]	@ (800217c <main+0xbfc>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	4b79      	ldr	r3, [pc, #484]	@ (8002180 <main+0xc00>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	4a80      	ldr	r2, [pc, #512]	@ (80021a4 <main+0xc24>)
 8001fa2:	6013      	str	r3, [r2, #0]
				if (time_base<move_start_time2+move_time2/2)
 8001fa4:	4b75      	ldr	r3, [pc, #468]	@ (800217c <main+0xbfc>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	ee07 3a90 	vmov	s15, r3
 8001fac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fb0:	4b73      	ldr	r3, [pc, #460]	@ (8002180 <main+0xc00>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	ee07 3a90 	vmov	s15, r3
 8001fb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fbc:	4b77      	ldr	r3, [pc, #476]	@ (800219c <main+0xc1c>)
 8001fbe:	ed93 6a00 	vldr	s12, [r3]
 8001fc2:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 8001fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd6:	f140 80ef 	bpl.w	80021b8 <main+0xc38>
				{

					if(move_distance2>0)
 8001fda:	4b6c      	ldr	r3, [pc, #432]	@ (800218c <main+0xc0c>)
 8001fdc:	edd3 7a00 	vldr	s15, [r3]
 8001fe0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe8:	dd5c      	ble.n	80020a4 <main+0xb24>
					{
						target_velocity2=accel_limit*move_time_base2/1e6;
 8001fea:	4b6e      	ldr	r3, [pc, #440]	@ (80021a4 <main+0xc24>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001ff2:	fb02 f303 	mul.w	r3, r2, r3
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fa48 	bl	800048c <__aeabi_ui2d>
 8001ffc:	a35a      	add	r3, pc, #360	@ (adr r3, 8002168 <main+0xbe8>)
 8001ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002002:	f7fe fbe7 	bl	80007d4 <__aeabi_ddiv>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4610      	mov	r0, r2
 800200c:	4619      	mov	r1, r3
 800200e:	f7fe fdaf 	bl	8000b70 <__aeabi_d2f>
 8002012:	4603      	mov	r3, r0
 8002014:	4a64      	ldr	r2, [pc, #400]	@ (80021a8 <main+0xc28>)
 8002016:	6013      	str	r3, [r2, #0]
						target_profile2=move_start_position2+(accel_limit*move_time_base2/1e6*move_time_base2/1e6)/4;
 8002018:	4b5b      	ldr	r3, [pc, #364]	@ (8002188 <main+0xc08>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe fa57 	bl	80004d0 <__aeabi_f2d>
 8002022:	4604      	mov	r4, r0
 8002024:	460d      	mov	r5, r1
 8002026:	4b5f      	ldr	r3, [pc, #380]	@ (80021a4 <main+0xc24>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800202e:	fb02 f303 	mul.w	r3, r2, r3
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe fa2a 	bl	800048c <__aeabi_ui2d>
 8002038:	a34b      	add	r3, pc, #300	@ (adr r3, 8002168 <main+0xbe8>)
 800203a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203e:	f7fe fbc9 	bl	80007d4 <__aeabi_ddiv>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4690      	mov	r8, r2
 8002048:	4699      	mov	r9, r3
 800204a:	4b56      	ldr	r3, [pc, #344]	@ (80021a4 <main+0xc24>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe fa1c 	bl	800048c <__aeabi_ui2d>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4640      	mov	r0, r8
 800205a:	4649      	mov	r1, r9
 800205c:	f7fe fa90 	bl	8000580 <__aeabi_dmul>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4610      	mov	r0, r2
 8002066:	4619      	mov	r1, r3
 8002068:	a33f      	add	r3, pc, #252	@ (adr r3, 8002168 <main+0xbe8>)
 800206a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206e:	f7fe fbb1 	bl	80007d4 <__aeabi_ddiv>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4610      	mov	r0, r2
 8002078:	4619      	mov	r1, r3
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	4b4b      	ldr	r3, [pc, #300]	@ (80021ac <main+0xc2c>)
 8002080:	f7fe fba8 	bl	80007d4 <__aeabi_ddiv>
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	4620      	mov	r0, r4
 800208a:	4629      	mov	r1, r5
 800208c:	f7fe f8c2 	bl	8000214 <__adddf3>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4610      	mov	r0, r2
 8002096:	4619      	mov	r1, r3
 8002098:	f7fe fd6a 	bl	8000b70 <__aeabi_d2f>
 800209c:	4603      	mov	r3, r0
 800209e:	4a44      	ldr	r2, [pc, #272]	@ (80021b0 <main+0xc30>)
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	e19d      	b.n	80023e0 <main+0xe60>
					}
					else
					{
						target_velocity2=-accel_limit2*move_time_base2/1e6;
 80020a4:	4b3f      	ldr	r3, [pc, #252]	@ (80021a4 <main+0xc24>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a42      	ldr	r2, [pc, #264]	@ (80021b4 <main+0xc34>)
 80020aa:	fb02 f303 	mul.w	r3, r2, r3
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe f9ec 	bl	800048c <__aeabi_ui2d>
 80020b4:	a32c      	add	r3, pc, #176	@ (adr r3, 8002168 <main+0xbe8>)
 80020b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ba:	f7fe fb8b 	bl	80007d4 <__aeabi_ddiv>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	4610      	mov	r0, r2
 80020c4:	4619      	mov	r1, r3
 80020c6:	f7fe fd53 	bl	8000b70 <__aeabi_d2f>
 80020ca:	4603      	mov	r3, r0
 80020cc:	4a36      	ldr	r2, [pc, #216]	@ (80021a8 <main+0xc28>)
 80020ce:	6013      	str	r3, [r2, #0]
						target_profile2=move_start_position2-(accel_limit*move_time_base2/1e6*move_time_base2/1e6)/4;
 80020d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002188 <main+0xc08>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe f9fb 	bl	80004d0 <__aeabi_f2d>
 80020da:	4604      	mov	r4, r0
 80020dc:	460d      	mov	r5, r1
 80020de:	4b31      	ldr	r3, [pc, #196]	@ (80021a4 <main+0xc24>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80020e6:	fb02 f303 	mul.w	r3, r2, r3
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe f9ce 	bl	800048c <__aeabi_ui2d>
 80020f0:	a31d      	add	r3, pc, #116	@ (adr r3, 8002168 <main+0xbe8>)
 80020f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f6:	f7fe fb6d 	bl	80007d4 <__aeabi_ddiv>
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	4690      	mov	r8, r2
 8002100:	4699      	mov	r9, r3
 8002102:	4b28      	ldr	r3, [pc, #160]	@ (80021a4 <main+0xc24>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe f9c0 	bl	800048c <__aeabi_ui2d>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4640      	mov	r0, r8
 8002112:	4649      	mov	r1, r9
 8002114:	f7fe fa34 	bl	8000580 <__aeabi_dmul>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4610      	mov	r0, r2
 800211e:	4619      	mov	r1, r3
 8002120:	a311      	add	r3, pc, #68	@ (adr r3, 8002168 <main+0xbe8>)
 8002122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002126:	f7fe fb55 	bl	80007d4 <__aeabi_ddiv>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	4610      	mov	r0, r2
 8002130:	4619      	mov	r1, r3
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	4b1d      	ldr	r3, [pc, #116]	@ (80021ac <main+0xc2c>)
 8002138:	f7fe fb4c 	bl	80007d4 <__aeabi_ddiv>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4620      	mov	r0, r4
 8002142:	4629      	mov	r1, r5
 8002144:	f7fe f864 	bl	8000210 <__aeabi_dsub>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	4610      	mov	r0, r2
 800214e:	4619      	mov	r1, r3
 8002150:	f7fe fd0e 	bl	8000b70 <__aeabi_d2f>
 8002154:	4603      	mov	r3, r0
 8002156:	4a16      	ldr	r2, [pc, #88]	@ (80021b0 <main+0xc30>)
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	e141      	b.n	80023e0 <main+0xe60>
 800215c:	f3af 8000 	nop.w
 8002160:	00000000 	.word	0x00000000
 8002164:	40a38800 	.word	0x40a38800
 8002168:	00000000 	.word	0x00000000
 800216c:	412e8480 	.word	0x412e8480
 8002170:	2000064c 	.word	0x2000064c
 8002174:	2000063c 	.word	0x2000063c
 8002178:	20000698 	.word	0x20000698
 800217c:	2000061c 	.word	0x2000061c
 8002180:	20000680 	.word	0x20000680
 8002184:	20000678 	.word	0x20000678
 8002188:	20000694 	.word	0x20000694
 800218c:	200006a0 	.word	0x200006a0
 8002190:	200006a4 	.word	0x200006a4
 8002194:	200006b0 	.word	0x200006b0
 8002198:	200006b4 	.word	0x200006b4
 800219c:	200006b8 	.word	0x200006b8
 80021a0:	20000684 	.word	0x20000684
 80021a4:	2000067c 	.word	0x2000067c
 80021a8:	200006ac 	.word	0x200006ac
 80021ac:	40100000 	.word	0x40100000
 80021b0:	200006a8 	.word	0x200006a8
 80021b4:	fffff63c 	.word	0xfffff63c

					}
				}
				else
				{
					if(move_distance2>0)
 80021b8:	4b91      	ldr	r3, [pc, #580]	@ (8002400 <main+0xe80>)
 80021ba:	edd3 7a00 	vldr	s15, [r3]
 80021be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c6:	f340 8086 	ble.w	80022d6 <main+0xd56>
					{
						target_velocity2=accel_limit*(accel_time2/1e6-((move_time_base2-decel_time2)/1e6));
 80021ca:	4b8e      	ldr	r3, [pc, #568]	@ (8002404 <main+0xe84>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe f97e 	bl	80004d0 <__aeabi_f2d>
 80021d4:	a386      	add	r3, pc, #536	@ (adr r3, 80023f0 <main+0xe70>)
 80021d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021da:	f7fe fafb 	bl	80007d4 <__aeabi_ddiv>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	4614      	mov	r4, r2
 80021e4:	461d      	mov	r5, r3
 80021e6:	4b88      	ldr	r3, [pc, #544]	@ (8002408 <main+0xe88>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	ee07 3a90 	vmov	s15, r3
 80021ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021f2:	4b86      	ldr	r3, [pc, #536]	@ (800240c <main+0xe8c>)
 80021f4:	edd3 7a00 	vldr	s15, [r3]
 80021f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021fc:	ee17 0a90 	vmov	r0, s15
 8002200:	f7fe f966 	bl	80004d0 <__aeabi_f2d>
 8002204:	a37a      	add	r3, pc, #488	@ (adr r3, 80023f0 <main+0xe70>)
 8002206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220a:	f7fe fae3 	bl	80007d4 <__aeabi_ddiv>
 800220e:	4602      	mov	r2, r0
 8002210:	460b      	mov	r3, r1
 8002212:	4620      	mov	r0, r4
 8002214:	4629      	mov	r1, r5
 8002216:	f7fd fffb 	bl	8000210 <__aeabi_dsub>
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	4610      	mov	r0, r2
 8002220:	4619      	mov	r1, r3
 8002222:	a375      	add	r3, pc, #468	@ (adr r3, 80023f8 <main+0xe78>)
 8002224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002228:	f7fe f9aa 	bl	8000580 <__aeabi_dmul>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	4610      	mov	r0, r2
 8002232:	4619      	mov	r1, r3
 8002234:	f7fe fc9c 	bl	8000b70 <__aeabi_d2f>
 8002238:	4603      	mov	r3, r0
 800223a:	4a75      	ldr	r2, [pc, #468]	@ (8002410 <main+0xe90>)
 800223c:	6013      	str	r3, [r2, #0]
						target_profile2=move_position2[0]-(accel_limit2*(move_end_time2-time_base)/1e6*(move_end_time2-time_base)/1e6/4);
 800223e:	4b75      	ldr	r3, [pc, #468]	@ (8002414 <main+0xe94>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe f944 	bl	80004d0 <__aeabi_f2d>
 8002248:	4604      	mov	r4, r0
 800224a:	460d      	mov	r5, r1
 800224c:	4b72      	ldr	r3, [pc, #456]	@ (8002418 <main+0xe98>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b72      	ldr	r3, [pc, #456]	@ (800241c <main+0xe9c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe f914 	bl	800048c <__aeabi_ui2d>
 8002264:	a362      	add	r3, pc, #392	@ (adr r3, 80023f0 <main+0xe70>)
 8002266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226a:	f7fe fab3 	bl	80007d4 <__aeabi_ddiv>
 800226e:	4602      	mov	r2, r0
 8002270:	460b      	mov	r3, r1
 8002272:	4690      	mov	r8, r2
 8002274:	4699      	mov	r9, r3
 8002276:	4b68      	ldr	r3, [pc, #416]	@ (8002418 <main+0xe98>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	4b68      	ldr	r3, [pc, #416]	@ (800241c <main+0xe9c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe f903 	bl	800048c <__aeabi_ui2d>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4640      	mov	r0, r8
 800228c:	4649      	mov	r1, r9
 800228e:	f7fe f977 	bl	8000580 <__aeabi_dmul>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	4610      	mov	r0, r2
 8002298:	4619      	mov	r1, r3
 800229a:	a355      	add	r3, pc, #340	@ (adr r3, 80023f0 <main+0xe70>)
 800229c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a0:	f7fe fa98 	bl	80007d4 <__aeabi_ddiv>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4610      	mov	r0, r2
 80022aa:	4619      	mov	r1, r3
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	4b5b      	ldr	r3, [pc, #364]	@ (8002420 <main+0xea0>)
 80022b2:	f7fe fa8f 	bl	80007d4 <__aeabi_ddiv>
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	4620      	mov	r0, r4
 80022bc:	4629      	mov	r1, r5
 80022be:	f7fd ffa7 	bl	8000210 <__aeabi_dsub>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4610      	mov	r0, r2
 80022c8:	4619      	mov	r1, r3
 80022ca:	f7fe fc51 	bl	8000b70 <__aeabi_d2f>
 80022ce:	4603      	mov	r3, r0
 80022d0:	4a54      	ldr	r2, [pc, #336]	@ (8002424 <main+0xea4>)
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	e084      	b.n	80023e0 <main+0xe60>
					}
					else
					{
						target_velocity2=accel_limit*(accel_time2/1e6-((move_time_base2-decel_time2)/1e6));
 80022d6:	4b4b      	ldr	r3, [pc, #300]	@ (8002404 <main+0xe84>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe f8f8 	bl	80004d0 <__aeabi_f2d>
 80022e0:	a343      	add	r3, pc, #268	@ (adr r3, 80023f0 <main+0xe70>)
 80022e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e6:	f7fe fa75 	bl	80007d4 <__aeabi_ddiv>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	4614      	mov	r4, r2
 80022f0:	461d      	mov	r5, r3
 80022f2:	4b45      	ldr	r3, [pc, #276]	@ (8002408 <main+0xe88>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	ee07 3a90 	vmov	s15, r3
 80022fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022fe:	4b43      	ldr	r3, [pc, #268]	@ (800240c <main+0xe8c>)
 8002300:	edd3 7a00 	vldr	s15, [r3]
 8002304:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002308:	ee17 0a90 	vmov	r0, s15
 800230c:	f7fe f8e0 	bl	80004d0 <__aeabi_f2d>
 8002310:	a337      	add	r3, pc, #220	@ (adr r3, 80023f0 <main+0xe70>)
 8002312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002316:	f7fe fa5d 	bl	80007d4 <__aeabi_ddiv>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	4620      	mov	r0, r4
 8002320:	4629      	mov	r1, r5
 8002322:	f7fd ff75 	bl	8000210 <__aeabi_dsub>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	4610      	mov	r0, r2
 800232c:	4619      	mov	r1, r3
 800232e:	a332      	add	r3, pc, #200	@ (adr r3, 80023f8 <main+0xe78>)
 8002330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002334:	f7fe f924 	bl	8000580 <__aeabi_dmul>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4610      	mov	r0, r2
 800233e:	4619      	mov	r1, r3
 8002340:	f7fe fc16 	bl	8000b70 <__aeabi_d2f>
 8002344:	4603      	mov	r3, r0
 8002346:	4a32      	ldr	r2, [pc, #200]	@ (8002410 <main+0xe90>)
 8002348:	6013      	str	r3, [r2, #0]
						target_profile2=move_position2[0]+(accel_limit2*(move_end_time2-time_base)/1e6*(move_end_time2-time_base)/1e6/4);
 800234a:	4b32      	ldr	r3, [pc, #200]	@ (8002414 <main+0xe94>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe f8be 	bl	80004d0 <__aeabi_f2d>
 8002354:	4604      	mov	r4, r0
 8002356:	460d      	mov	r5, r1
 8002358:	4b2f      	ldr	r3, [pc, #188]	@ (8002418 <main+0xe98>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4b2f      	ldr	r3, [pc, #188]	@ (800241c <main+0xe9c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8002366:	fb02 f303 	mul.w	r3, r2, r3
 800236a:	4618      	mov	r0, r3
 800236c:	f7fe f88e 	bl	800048c <__aeabi_ui2d>
 8002370:	a31f      	add	r3, pc, #124	@ (adr r3, 80023f0 <main+0xe70>)
 8002372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002376:	f7fe fa2d 	bl	80007d4 <__aeabi_ddiv>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	4690      	mov	r8, r2
 8002380:	4699      	mov	r9, r3
 8002382:	4b25      	ldr	r3, [pc, #148]	@ (8002418 <main+0xe98>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	4b25      	ldr	r3, [pc, #148]	@ (800241c <main+0xe9c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	4618      	mov	r0, r3
 800238e:	f7fe f87d 	bl	800048c <__aeabi_ui2d>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4640      	mov	r0, r8
 8002398:	4649      	mov	r1, r9
 800239a:	f7fe f8f1 	bl	8000580 <__aeabi_dmul>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4610      	mov	r0, r2
 80023a4:	4619      	mov	r1, r3
 80023a6:	a312      	add	r3, pc, #72	@ (adr r3, 80023f0 <main+0xe70>)
 80023a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ac:	f7fe fa12 	bl	80007d4 <__aeabi_ddiv>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4610      	mov	r0, r2
 80023b6:	4619      	mov	r1, r3
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	4b18      	ldr	r3, [pc, #96]	@ (8002420 <main+0xea0>)
 80023be:	f7fe fa09 	bl	80007d4 <__aeabi_ddiv>
 80023c2:	4602      	mov	r2, r0
 80023c4:	460b      	mov	r3, r1
 80023c6:	4620      	mov	r0, r4
 80023c8:	4629      	mov	r1, r5
 80023ca:	f7fd ff23 	bl	8000214 <__adddf3>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	4610      	mov	r0, r2
 80023d4:	4619      	mov	r1, r3
 80023d6:	f7fe fbcb 	bl	8000b70 <__aeabi_d2f>
 80023da:	4603      	mov	r3, r0
 80023dc:	4a11      	ldr	r2, [pc, #68]	@ (8002424 <main+0xea4>)
 80023de:	6013      	str	r3, [r2, #0]

					}
				}

				target_angle2=target_profile2;
 80023e0:	4b10      	ldr	r3, [pc, #64]	@ (8002424 <main+0xea4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a10      	ldr	r2, [pc, #64]	@ (8002428 <main+0xea8>)
 80023e6:	6013      	str	r3, [r2, #0]
 80023e8:	e024      	b.n	8002434 <main+0xeb4>
 80023ea:	bf00      	nop
 80023ec:	f3af 8000 	nop.w
 80023f0:	00000000 	.word	0x00000000
 80023f4:	412e8480 	.word	0x412e8480
 80023f8:	00000000 	.word	0x00000000
 80023fc:	40a77000 	.word	0x40a77000
 8002400:	200006a0 	.word	0x200006a0
 8002404:	200006b0 	.word	0x200006b0
 8002408:	2000067c 	.word	0x2000067c
 800240c:	200006b4 	.word	0x200006b4
 8002410:	200006ac 	.word	0x200006ac
 8002414:	20000698 	.word	0x20000698
 8002418:	20000684 	.word	0x20000684
 800241c:	2000061c 	.word	0x2000061c
 8002420:	40100000 	.word	0x40100000
 8002424:	200006a8 	.word	0x200006a8
 8002428:	2000068c 	.word	0x2000068c
			}
			else
			{
				target_angle2=move_position2[0];
 800242c:	4b8e      	ldr	r3, [pc, #568]	@ (8002668 <main+0x10e8>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a8e      	ldr	r2, [pc, #568]	@ (800266c <main+0x10ec>)
 8002432:	6013      	str	r3, [r2, #0]
			}



		//calculate angular position in radians
		 shaft_angle=shaftAngle(encoder1);
 8002434:	4b8e      	ldr	r3, [pc, #568]	@ (8002670 <main+0x10f0>)
 8002436:	f9b3 3000 	ldrsh.w	r3, [r3]
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe fdb4 	bl	8000fa8 <shaftAngle>
 8002440:	eef0 7a40 	vmov.f32	s15, s0
 8002444:	4b8b      	ldr	r3, [pc, #556]	@ (8002674 <main+0x10f4>)
 8002446:	edc3 7a00 	vstr	s15, [r3]
		 shaft_angle2=shaftAngle(encoder2);
 800244a:	4b8b      	ldr	r3, [pc, #556]	@ (8002678 <main+0x10f8>)
 800244c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe fda9 	bl	8000fa8 <shaftAngle>
 8002456:	eef0 7a40 	vmov.f32	s15, s0
 800245a:	4b88      	ldr	r3, [pc, #544]	@ (800267c <main+0x10fc>)
 800245c:	edc3 7a00 	vstr	s15, [r3]
		 current_position=shaft_angle;//+home_offset;
 8002460:	4b84      	ldr	r3, [pc, #528]	@ (8002674 <main+0x10f4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a86      	ldr	r2, [pc, #536]	@ (8002680 <main+0x1100>)
 8002466:	6013      	str	r3, [r2, #0]
		 current_position2=shaft_angle2;//+home2_offset;
 8002468:	4b84      	ldr	r3, [pc, #528]	@ (800267c <main+0x10fc>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a85      	ldr	r2, [pc, #532]	@ (8002684 <main+0x1104>)
 800246e:	6013      	str	r3, [r2, #0]
		// electrical_angle=electricalAngle(shaft_angle-home_offset,motor_pole_pairs);
	//	 electrical_angle2=electricalAngle(shaft_angle2+home2_offset,motor_pole_pairs);
		 angle_error=(target_angle-current_position);
 8002470:	4b85      	ldr	r3, [pc, #532]	@ (8002688 <main+0x1108>)
 8002472:	ed93 7a00 	vldr	s14, [r3]
 8002476:	4b82      	ldr	r3, [pc, #520]	@ (8002680 <main+0x1100>)
 8002478:	edd3 7a00 	vldr	s15, [r3]
 800247c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002480:	4b82      	ldr	r3, [pc, #520]	@ (800268c <main+0x110c>)
 8002482:	edc3 7a00 	vstr	s15, [r3]
		 angle_error2=target_angle2-current_position2;
 8002486:	4b79      	ldr	r3, [pc, #484]	@ (800266c <main+0x10ec>)
 8002488:	ed93 7a00 	vldr	s14, [r3]
 800248c:	4b7d      	ldr	r3, [pc, #500]	@ (8002684 <main+0x1104>)
 800248e:	edd3 7a00 	vldr	s15, [r3]
 8002492:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002496:	4b7e      	ldr	r3, [pc, #504]	@ (8002690 <main+0x1110>)
 8002498:	edc3 7a00 	vstr	s15, [r3]
		 pid_out=arm_pid_f32(&pid, angle_error);
 800249c:	4b7b      	ldr	r3, [pc, #492]	@ (800268c <main+0x110c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80024a4:	667a      	str	r2, [r7, #100]	@ 0x64
 80024a6:	663b      	str	r3, [r7, #96]	@ 0x60
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80024a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024aa:	ed93 7a00 	vldr	s14, [r3]
 80024ae:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80024b2:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80024b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024b8:	edd3 6a01 	vldr	s13, [r3, #4]
 80024bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024be:	edd3 7a03 	vldr	s15, [r3, #12]
 80024c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80024c6:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80024ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024cc:	edd3 6a02 	vldr	s13, [r3, #8]
 80024d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024d2:	edd3 7a04 	vldr	s15, [r3, #16]
 80024d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024e0:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80024e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024e8:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

    /* Update state */
    S->state[1] = S->state[0];
 80024ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024f2:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80024f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024f6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80024f8:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80024fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024fc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80024fe:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8002500:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002502:	4a64      	ldr	r2, [pc, #400]	@ (8002694 <main+0x1114>)
 8002504:	6013      	str	r3, [r2, #0]
		 pid2_out=arm_pid_f32(&pid2, angle_error2);
 8002506:	4b62      	ldr	r3, [pc, #392]	@ (8002690 <main+0x1110>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	463a      	mov	r2, r7
 800250c:	673a      	str	r2, [r7, #112]	@ 0x70
 800250e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    out = (S->A0 * in) +
 8002510:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002512:	ed93 7a00 	vldr	s14, [r3]
 8002516:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800251a:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800251e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002520:	edd3 6a01 	vldr	s13, [r3, #4]
 8002524:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002526:	edd3 7a03 	vldr	s15, [r3, #12]
 800252a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800252e:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002532:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002534:	edd3 6a02 	vldr	s13, [r3, #8]
 8002538:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800253a:	edd3 7a04 	vldr	s15, [r3, #16]
 800253e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002542:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002546:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002548:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800254c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002550:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
    S->state[1] = S->state[0];
 8002554:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800255a:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800255c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800255e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002560:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8002562:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002564:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002566:	615a      	str	r2, [r3, #20]
    return (out);
 8002568:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800256a:	4a4b      	ldr	r2, [pc, #300]	@ (8002698 <main+0x1118>)
 800256c:	6013      	str	r3, [r2, #0]

		 if (pid_out<0)
 800256e:	4b49      	ldr	r3, [pc, #292]	@ (8002694 <main+0x1114>)
 8002570:	edd3 7a00 	vldr	s15, [r3]
 8002574:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800257c:	d511      	bpl.n	80025a2 <main+0x1022>
		 	    {
		 	    	Torq_const=pid_out;
 800257e:	4b45      	ldr	r3, [pc, #276]	@ (8002694 <main+0x1114>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a46      	ldr	r2, [pc, #280]	@ (800269c <main+0x111c>)
 8002584:	6013      	str	r3, [r2, #0]
		 	    	if(Torq_const<=(-6))
 8002586:	4b45      	ldr	r3, [pc, #276]	@ (800269c <main+0x111c>)
 8002588:	edd3 7a00 	vldr	s15, [r3]
 800258c:	eeb9 7a08 	vmov.f32	s14, #152	@ 0xc0c00000 -6.0
 8002590:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002598:	d814      	bhi.n	80025c4 <main+0x1044>
		 	    	{
		 	    		Torq_const=-6;
 800259a:	4b40      	ldr	r3, [pc, #256]	@ (800269c <main+0x111c>)
 800259c:	4a40      	ldr	r2, [pc, #256]	@ (80026a0 <main+0x1120>)
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	e010      	b.n	80025c4 <main+0x1044>
		 	    	}
		 	    	//SVPWM(Torq_const,electricalAngle((shaft_angle+home_offset-1.57),1),1);
		 	    }
		 	    else
		 	    {
		 	    	Torq_const=pid_out;
 80025a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002694 <main+0x1114>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a3d      	ldr	r2, [pc, #244]	@ (800269c <main+0x111c>)
 80025a8:	6013      	str	r3, [r2, #0]
		 	    	if(Torq_const>=6)
 80025aa:	4b3c      	ldr	r3, [pc, #240]	@ (800269c <main+0x111c>)
 80025ac:	edd3 7a00 	vldr	s15, [r3]
 80025b0:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 80025b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025bc:	db02      	blt.n	80025c4 <main+0x1044>
		 	    	{
		 	    		Torq_const=6;
 80025be:	4b37      	ldr	r3, [pc, #220]	@ (800269c <main+0x111c>)
 80025c0:	4a38      	ldr	r2, [pc, #224]	@ (80026a4 <main+0x1124>)
 80025c2:	601a      	str	r2, [r3, #0]
		 	    	}
		 	    //	SVPWM(Torq_const,electricalAngle((shaft_angle+home_offset-1.57),1),1);
		 	    }

		// SVPWM(0,electricalAngle(rotor_offset1,1),1);
		 if (pid2_out<0)
 80025c4:	4b34      	ldr	r3, [pc, #208]	@ (8002698 <main+0x1118>)
 80025c6:	edd3 7a00 	vldr	s15, [r3]
 80025ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d2:	d511      	bpl.n	80025f8 <main+0x1078>
		 	    {
		 	    	Torq_const2=pid2_out;
 80025d4:	4b30      	ldr	r3, [pc, #192]	@ (8002698 <main+0x1118>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a33      	ldr	r2, [pc, #204]	@ (80026a8 <main+0x1128>)
 80025da:	6013      	str	r3, [r2, #0]
		 	    	if(Torq_const2<(-6))
 80025dc:	4b32      	ldr	r3, [pc, #200]	@ (80026a8 <main+0x1128>)
 80025de:	edd3 7a00 	vldr	s15, [r3]
 80025e2:	eeb9 7a08 	vmov.f32	s14, #152	@ 0xc0c00000 -6.0
 80025e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ee:	d514      	bpl.n	800261a <main+0x109a>
		 	    	{
		 	    		Torq_const2=-6;
 80025f0:	4b2d      	ldr	r3, [pc, #180]	@ (80026a8 <main+0x1128>)
 80025f2:	4a2b      	ldr	r2, [pc, #172]	@ (80026a0 <main+0x1120>)
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	e010      	b.n	800261a <main+0x109a>
		 	    	}
		 	    //	SVPWM(Torq_const,electricalAngle(shaft_angle2-1.57,1),2);
		 	    }
		 	    else
		 	    {
		 	    	Torq_const2=pid2_out;
 80025f8:	4b27      	ldr	r3, [pc, #156]	@ (8002698 <main+0x1118>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a2a      	ldr	r2, [pc, #168]	@ (80026a8 <main+0x1128>)
 80025fe:	6013      	str	r3, [r2, #0]
		 	    	if(Torq_const2>6)
 8002600:	4b29      	ldr	r3, [pc, #164]	@ (80026a8 <main+0x1128>)
 8002602:	edd3 7a00 	vldr	s15, [r3]
 8002606:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 800260a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800260e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002612:	dd02      	ble.n	800261a <main+0x109a>
		 	    	{
		 	    		Torq_const2=6;
 8002614:	4b24      	ldr	r3, [pc, #144]	@ (80026a8 <main+0x1128>)
 8002616:	4a23      	ldr	r2, [pc, #140]	@ (80026a4 <main+0x1124>)
 8002618:	601a      	str	r2, [r3, #0]
		 	    	}
		 	    //	SVPWM(Torq_const,electricalAngle(shaft_angle2-1.57,1),2);
		 	    }

		 //SVPWM(0,electricalAngle(rotor_offset2,1),2);
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, target_position1);
 800261a:	4b24      	ldr	r3, [pc, #144]	@ (80026ac <main+0x112c>)
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	2200      	movs	r2, #0
 8002620:	2100      	movs	r1, #0
 8002622:	4823      	ldr	r0, [pc, #140]	@ (80026b0 <main+0x1130>)
 8002624:	f002 fd31 	bl	800508a <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, target_position2);
 8002628:	4b22      	ldr	r3, [pc, #136]	@ (80026b4 <main+0x1134>)
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	2200      	movs	r2, #0
 800262e:	2110      	movs	r1, #16
 8002630:	481f      	ldr	r0, [pc, #124]	@ (80026b0 <main+0x1130>)
 8002632:	f002 fd2a 	bl	800508a <HAL_DAC_SetValue>

	//over_current=sqrt(pow(AD_RES[0],2)+pow(AD_RES[1],2)+pow(AD_RES[0],2));
	over_current=AD_RES[0]+AD_RES[1]+AD_RES[2];
 8002636:	4b20      	ldr	r3, [pc, #128]	@ (80026b8 <main+0x1138>)
 8002638:	881a      	ldrh	r2, [r3, #0]
 800263a:	4b1f      	ldr	r3, [pc, #124]	@ (80026b8 <main+0x1138>)
 800263c:	885b      	ldrh	r3, [r3, #2]
 800263e:	4413      	add	r3, r2
 8002640:	b29a      	uxth	r2, r3
 8002642:	4b1d      	ldr	r3, [pc, #116]	@ (80026b8 <main+0x1138>)
 8002644:	889b      	ldrh	r3, [r3, #4]
 8002646:	4413      	add	r3, r2
 8002648:	b29a      	uxth	r2, r3
 800264a:	4b1c      	ldr	r3, [pc, #112]	@ (80026bc <main+0x113c>)
 800264c:	801a      	strh	r2, [r3, #0]
	//if(over_current>7000)
	if(over_current>6000)
 800264e:	4b1b      	ldr	r3, [pc, #108]	@ (80026bc <main+0x113c>)
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	f241 7270 	movw	r2, #6000	@ 0x1770
 8002656:	4293      	cmp	r3, r2
 8002658:	d934      	bls.n	80026c4 <main+0x1144>
	{
		over_current_count++;
 800265a:	4b19      	ldr	r3, [pc, #100]	@ (80026c0 <main+0x1140>)
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	3301      	adds	r3, #1
 8002660:	b29a      	uxth	r2, r3
 8002662:	4b17      	ldr	r3, [pc, #92]	@ (80026c0 <main+0x1140>)
 8002664:	801a      	strh	r2, [r3, #0]
 8002666:	e037      	b.n	80026d8 <main+0x1158>
 8002668:	20000698 	.word	0x20000698
 800266c:	2000068c 	.word	0x2000068c
 8002670:	2000060c 	.word	0x2000060c
 8002674:	20000638 	.word	0x20000638
 8002678:	2000060e 	.word	0x2000060e
 800267c:	20000688 	.word	0x20000688
 8002680:	20000610 	.word	0x20000610
 8002684:	20000678 	.word	0x20000678
 8002688:	2000063c 	.word	0x2000063c
 800268c:	20000640 	.word	0x20000640
 8002690:	20000690 	.word	0x20000690
 8002694:	200006c0 	.word	0x200006c0
 8002698:	200006c8 	.word	0x200006c8
 800269c:	20000614 	.word	0x20000614
 80026a0:	c0c00000 	.word	0xc0c00000
 80026a4:	40c00000 	.word	0x40c00000
 80026a8:	20000618 	.word	0x20000618
 80026ac:	2000001e 	.word	0x2000001e
 80026b0:	200002bc 	.word	0x200002bc
 80026b4:	20000020 	.word	0x20000020
 80026b8:	200006f0 	.word	0x200006f0
 80026bc:	20000670 	.word	0x20000670
 80026c0:	20000674 	.word	0x20000674
	}
	else
	{
		if(over_current_count>0) over_current_count--;
 80026c4:	4b19      	ldr	r3, [pc, #100]	@ (800272c <main+0x11ac>)
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d005      	beq.n	80026d8 <main+0x1158>
 80026cc:	4b17      	ldr	r3, [pc, #92]	@ (800272c <main+0x11ac>)
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	3b01      	subs	r3, #1
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	4b15      	ldr	r3, [pc, #84]	@ (800272c <main+0x11ac>)
 80026d6:	801a      	strh	r2, [r3, #0]
	}
	if(over_current_count>3000)
 80026d8:	4b14      	ldr	r3, [pc, #80]	@ (800272c <main+0x11ac>)
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d909      	bls.n	80026f8 <main+0x1178>
	//if(over_current_count>4000)
	{
		//TIM1->CCR1=0;
		//TIM1->CCR2=0;
		//TIM1->CCR3=0;
		Torq_const=0;
 80026e4:	4b12      	ldr	r3, [pc, #72]	@ (8002730 <main+0x11b0>)
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
		over_current_count+=3;
 80026ec:	4b0f      	ldr	r3, [pc, #60]	@ (800272c <main+0x11ac>)
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	3303      	adds	r3, #3
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	4b0d      	ldr	r3, [pc, #52]	@ (800272c <main+0x11ac>)
 80026f6:	801a      	strh	r2, [r3, #0]
	}
	over_current2=AD_RES[3]+AD_RES[4]+AD_RES[5];
 80026f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002734 <main+0x11b4>)
 80026fa:	88da      	ldrh	r2, [r3, #6]
 80026fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002734 <main+0x11b4>)
 80026fe:	891b      	ldrh	r3, [r3, #8]
 8002700:	4413      	add	r3, r2
 8002702:	b29a      	uxth	r2, r3
 8002704:	4b0b      	ldr	r3, [pc, #44]	@ (8002734 <main+0x11b4>)
 8002706:	895b      	ldrh	r3, [r3, #10]
 8002708:	4413      	add	r3, r2
 800270a:	b29a      	uxth	r2, r3
 800270c:	4b0a      	ldr	r3, [pc, #40]	@ (8002738 <main+0x11b8>)
 800270e:	801a      	strh	r2, [r3, #0]
	//if(over_current2>7000)
	if(over_current2>6000)
 8002710:	4b09      	ldr	r3, [pc, #36]	@ (8002738 <main+0x11b8>)
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	f241 7270 	movw	r2, #6000	@ 0x1770
 8002718:	4293      	cmp	r3, r2
 800271a:	d911      	bls.n	8002740 <main+0x11c0>
	{
		over_current_count2++;
 800271c:	4b07      	ldr	r3, [pc, #28]	@ (800273c <main+0x11bc>)
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	3301      	adds	r3, #1
 8002722:	b29a      	uxth	r2, r3
 8002724:	4b05      	ldr	r3, [pc, #20]	@ (800273c <main+0x11bc>)
 8002726:	801a      	strh	r2, [r3, #0]
 8002728:	e014      	b.n	8002754 <main+0x11d4>
 800272a:	bf00      	nop
 800272c:	20000674 	.word	0x20000674
 8002730:	20000614 	.word	0x20000614
 8002734:	200006f0 	.word	0x200006f0
 8002738:	20000672 	.word	0x20000672
 800273c:	20000676 	.word	0x20000676
	}
	else
	{
		if(over_current_count2>0) over_current_count2--;
 8002740:	4bbb      	ldr	r3, [pc, #748]	@ (8002a30 <main+0x14b0>)
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d005      	beq.n	8002754 <main+0x11d4>
 8002748:	4bb9      	ldr	r3, [pc, #740]	@ (8002a30 <main+0x14b0>)
 800274a:	881b      	ldrh	r3, [r3, #0]
 800274c:	3b01      	subs	r3, #1
 800274e:	b29a      	uxth	r2, r3
 8002750:	4bb7      	ldr	r3, [pc, #732]	@ (8002a30 <main+0x14b0>)
 8002752:	801a      	strh	r2, [r3, #0]
	}

	if(over_current_count2>3000)
 8002754:	4bb6      	ldr	r3, [pc, #728]	@ (8002a30 <main+0x14b0>)
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800275c:	4293      	cmp	r3, r2
 800275e:	d909      	bls.n	8002774 <main+0x11f4>
	//if(over_current_count>4000)
	{
		//TIM1->CCR1=0;
		//TIM1->CCR2=0;
		//TIM1->CCR3=0;
		Torq_const2=0;
 8002760:	4bb4      	ldr	r3, [pc, #720]	@ (8002a34 <main+0x14b4>)
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
		over_current_count2+=3;
 8002768:	4bb1      	ldr	r3, [pc, #708]	@ (8002a30 <main+0x14b0>)
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	3303      	adds	r3, #3
 800276e:	b29a      	uxth	r2, r3
 8002770:	4baf      	ldr	r3, [pc, #700]	@ (8002a30 <main+0x14b0>)
 8002772:	801a      	strh	r2, [r3, #0]
	}
	//SVPWM(Torq_const,electricalAngle((_PI-(shaft_angle+home_offset-(3*_PI/2))),1),1);
	SVPWM(Torq_const, electricalAngle(-(shaft_angle + home_offset), 1), 1);
 8002774:	4bb0      	ldr	r3, [pc, #704]	@ (8002a38 <main+0x14b8>)
 8002776:	ed93 8a00 	vldr	s16, [r3]
 800277a:	4bb0      	ldr	r3, [pc, #704]	@ (8002a3c <main+0x14bc>)
 800277c:	ed93 7a00 	vldr	s14, [r3]
 8002780:	4baf      	ldr	r3, [pc, #700]	@ (8002a40 <main+0x14c0>)
 8002782:	edd3 7a00 	vldr	s15, [r3]
 8002786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800278a:	eef1 7a67 	vneg.f32	s15, s15
 800278e:	2001      	movs	r0, #1
 8002790:	eeb0 0a67 	vmov.f32	s0, s15
 8002794:	f7fe fc38 	bl	8001008 <electricalAngle>
 8002798:	eef0 7a40 	vmov.f32	s15, s0
 800279c:	2001      	movs	r0, #1
 800279e:	eef0 0a67 	vmov.f32	s1, s15
 80027a2:	eeb0 0a48 	vmov.f32	s0, s16
 80027a6:	f7fe fc77 	bl	8001098 <SVPWM>
	SVPWM(Torq_const2, electricalAngle(-(shaft_angle2 + home2_offset) + 1.5716, 1), 2);
 80027aa:	4ba2      	ldr	r3, [pc, #648]	@ (8002a34 <main+0x14b4>)
 80027ac:	ed93 8a00 	vldr	s16, [r3]
 80027b0:	4ba4      	ldr	r3, [pc, #656]	@ (8002a44 <main+0x14c4>)
 80027b2:	ed93 7a00 	vldr	s14, [r3]
 80027b6:	4ba4      	ldr	r3, [pc, #656]	@ (8002a48 <main+0x14c8>)
 80027b8:	edd3 7a00 	vldr	s15, [r3]
 80027bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027c0:	eef1 7a67 	vneg.f32	s15, s15
 80027c4:	ee17 3a90 	vmov	r3, s15
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fd fe81 	bl	80004d0 <__aeabi_f2d>
 80027ce:	a38e      	add	r3, pc, #568	@ (adr r3, 8002a08 <main+0x1488>)
 80027d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d4:	f7fd fd1e 	bl	8000214 <__adddf3>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4610      	mov	r0, r2
 80027de:	4619      	mov	r1, r3
 80027e0:	f7fe f9c6 	bl	8000b70 <__aeabi_d2f>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2001      	movs	r0, #1
 80027e8:	ee00 3a10 	vmov	s0, r3
 80027ec:	f7fe fc0c 	bl	8001008 <electricalAngle>
 80027f0:	eef0 7a40 	vmov.f32	s15, s0
 80027f4:	2002      	movs	r0, #2
 80027f6:	eef0 0a67 	vmov.f32	s1, s15
 80027fa:	eeb0 0a48 	vmov.f32	s0, s16
 80027fe:	f7fe fc4b 	bl	8001098 <SVPWM>

	rms_error=sqrt(pow(move_position[0]-current_position,2)+pow(move_position2[0]-current_position2,2));
 8002802:	4b92      	ldr	r3, [pc, #584]	@ (8002a4c <main+0x14cc>)
 8002804:	ed93 7a00 	vldr	s14, [r3]
 8002808:	4b91      	ldr	r3, [pc, #580]	@ (8002a50 <main+0x14d0>)
 800280a:	edd3 7a00 	vldr	s15, [r3]
 800280e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002812:	ee17 0a90 	vmov	r0, s15
 8002816:	f7fd fe5b 	bl	80004d0 <__aeabi_f2d>
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	ed9f 1b7c 	vldr	d1, [pc, #496]	@ 8002a10 <main+0x1490>
 8002822:	ec43 2b10 	vmov	d0, r2, r3
 8002826:	f00c fe75 	bl	800f514 <pow>
 800282a:	ec55 4b10 	vmov	r4, r5, d0
 800282e:	4b89      	ldr	r3, [pc, #548]	@ (8002a54 <main+0x14d4>)
 8002830:	ed93 7a00 	vldr	s14, [r3]
 8002834:	4b88      	ldr	r3, [pc, #544]	@ (8002a58 <main+0x14d8>)
 8002836:	edd3 7a00 	vldr	s15, [r3]
 800283a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800283e:	ee17 0a90 	vmov	r0, s15
 8002842:	f7fd fe45 	bl	80004d0 <__aeabi_f2d>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	ed9f 1b71 	vldr	d1, [pc, #452]	@ 8002a10 <main+0x1490>
 800284e:	ec43 2b10 	vmov	d0, r2, r3
 8002852:	f00c fe5f 	bl	800f514 <pow>
 8002856:	ec53 2b10 	vmov	r2, r3, d0
 800285a:	4620      	mov	r0, r4
 800285c:	4629      	mov	r1, r5
 800285e:	f7fd fcd9 	bl	8000214 <__adddf3>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	ec43 2b17 	vmov	d7, r2, r3
 800286a:	eeb0 0a47 	vmov.f32	s0, s14
 800286e:	eef0 0a67 	vmov.f32	s1, s15
 8002872:	f00c febf 	bl	800f5f4 <sqrt>
 8002876:	ec53 2b10 	vmov	r2, r3, d0
 800287a:	4610      	mov	r0, r2
 800287c:	4619      	mov	r1, r3
 800287e:	f7fe f977 	bl	8000b70 <__aeabi_d2f>
 8002882:	4603      	mov	r3, r0
 8002884:	4a75      	ldr	r2, [pc, #468]	@ (8002a5c <main+0x14dc>)
 8002886:	6013      	str	r3, [r2, #0]

if((rms_error<0.0002)&&laser_on==1)
 8002888:	4b74      	ldr	r3, [pc, #464]	@ (8002a5c <main+0x14dc>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f7fd fe1f 	bl	80004d0 <__aeabi_f2d>
 8002892:	a361      	add	r3, pc, #388	@ (adr r3, 8002a18 <main+0x1498>)
 8002894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002898:	f7fe f8e4 	bl	8000a64 <__aeabi_dcmplt>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d015      	beq.n	80028ce <main+0x134e>
 80028a2:	4b6f      	ldr	r3, [pc, #444]	@ (8002a60 <main+0x14e0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d111      	bne.n	80028ce <main+0x134e>
	//TIM5->ARR = 5000;
	//laser_duration=0;
	//TIM5->CCR1 = 100;//(uint32_t)(laser_duration*1000);
	//TIM5->ARR =10000;//(uint32_t)(laser_duration*1000)+1000;

	TIM5->CNT=0;
 80028aa:	4b6e      	ldr	r3, [pc, #440]	@ (8002a64 <main+0x14e4>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM5->EGR |= TIM_EGR_UG;
 80028b0:	4b6c      	ldr	r3, [pc, #432]	@ (8002a64 <main+0x14e4>)
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	4a6b      	ldr	r2, [pc, #428]	@ (8002a64 <main+0x14e4>)
 80028b6:	f043 0301 	orr.w	r3, r3, #1
 80028ba:	6153      	str	r3, [r2, #20]
	TIM5->CR1 |= TIM_CR1_CEN;
 80028bc:	4b69      	ldr	r3, [pc, #420]	@ (8002a64 <main+0x14e4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a68      	ldr	r2, [pc, #416]	@ (8002a64 <main+0x14e4>)
 80028c2:	f043 0301 	orr.w	r3, r3, #1
 80028c6:	6013      	str	r3, [r2, #0]

	laser_on=0;
 80028c8:	4b65      	ldr	r3, [pc, #404]	@ (8002a60 <main+0x14e0>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
//HAL_Delay(2000);




if (usb_rx_flag==1)
 80028ce:	4b66      	ldr	r3, [pc, #408]	@ (8002a68 <main+0x14e8>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	f040 808c 	bne.w	80029f0 <main+0x1470>
{
	   usb_rx_flag=0;
 80028d8:	4b63      	ldr	r3, [pc, #396]	@ (8002a68 <main+0x14e8>)
 80028da:	2200      	movs	r2, #0
 80028dc:	701a      	strb	r2, [r3, #0]
	   memcpy(Galvo1_target, usb_rx_buffer, (8*5));
 80028de:	2228      	movs	r2, #40	@ 0x28
 80028e0:	4962      	ldr	r1, [pc, #392]	@ (8002a6c <main+0x14ec>)
 80028e2:	4863      	ldr	r0, [pc, #396]	@ (8002a70 <main+0x14f0>)
 80028e4:	f00c fd90 	bl	800f408 <memcpy>
	   Galvo1_target[5]=0;
 80028e8:	4b61      	ldr	r3, [pc, #388]	@ (8002a70 <main+0x14f0>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	715a      	strb	r2, [r3, #5]
	   memcpy(Galvo2_target, &usb_rx_buffer[5], (8*5));
 80028ee:	2228      	movs	r2, #40	@ 0x28
 80028f0:	4960      	ldr	r1, [pc, #384]	@ (8002a74 <main+0x14f4>)
 80028f2:	4861      	ldr	r0, [pc, #388]	@ (8002a78 <main+0x14f8>)
 80028f4:	f00c fd88 	bl	800f408 <memcpy>
	   Galvo2_target[5]=0;
 80028f8:	4b5f      	ldr	r3, [pc, #380]	@ (8002a78 <main+0x14f8>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	715a      	strb	r2, [r3, #5]
	   memcpy(Laser_t, &usb_rx_buffer[10], (3));
 80028fe:	2203      	movs	r2, #3
 8002900:	495e      	ldr	r1, [pc, #376]	@ (8002a7c <main+0x14fc>)
 8002902:	485f      	ldr	r0, [pc, #380]	@ (8002a80 <main+0x1500>)
 8002904:	f00c fd80 	bl	800f408 <memcpy>
	   temp1=atoi(Galvo1_target);
 8002908:	4859      	ldr	r0, [pc, #356]	@ (8002a70 <main+0x14f0>)
 800290a:	f00c fbf3 	bl	800f0f4 <atoi>
 800290e:	4603      	mov	r3, r0
 8002910:	b29a      	uxth	r2, r3
 8002912:	4b5c      	ldr	r3, [pc, #368]	@ (8002a84 <main+0x1504>)
 8002914:	801a      	strh	r2, [r3, #0]
	   temp2=atoi(Galvo2_target);
 8002916:	4858      	ldr	r0, [pc, #352]	@ (8002a78 <main+0x14f8>)
 8002918:	f00c fbec 	bl	800f0f4 <atoi>
 800291c:	4603      	mov	r3, r0
 800291e:	b29a      	uxth	r2, r3
 8002920:	4b59      	ldr	r3, [pc, #356]	@ (8002a88 <main+0x1508>)
 8002922:	801a      	strh	r2, [r3, #0]
	   laser_duration=atoi(Laser_t);
 8002924:	4856      	ldr	r0, [pc, #344]	@ (8002a80 <main+0x1500>)
 8002926:	f00c fbe5 	bl	800f0f4 <atoi>
 800292a:	4603      	mov	r3, r0
 800292c:	b29a      	uxth	r2, r3
 800292e:	4b57      	ldr	r3, [pc, #348]	@ (8002a8c <main+0x150c>)
 8002930:	801a      	strh	r2, [r3, #0]
	   target_position1=temp1;
 8002932:	4b54      	ldr	r3, [pc, #336]	@ (8002a84 <main+0x1504>)
 8002934:	881a      	ldrh	r2, [r3, #0]
 8002936:	4b56      	ldr	r3, [pc, #344]	@ (8002a90 <main+0x1510>)
 8002938:	801a      	strh	r2, [r3, #0]
	   target_position2=temp2;
 800293a:	4b53      	ldr	r3, [pc, #332]	@ (8002a88 <main+0x1508>)
 800293c:	881a      	ldrh	r2, [r3, #0]
 800293e:	4b55      	ldr	r3, [pc, #340]	@ (8002a94 <main+0x1514>)
 8002940:	801a      	strh	r2, [r3, #0]
//TIM5->CNT=0;
		//TIM5->CCR1 = (uint32_t)(laser_duration*1000);
		//TIM5->ARR =(uint32_t)(laser_duration*1000)+1000;
	  //
	   if(laser_duration>0)
 8002942:	4b52      	ldr	r3, [pc, #328]	@ (8002a8c <main+0x150c>)
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00e      	beq.n	8002968 <main+0x13e8>
	   {
		//TIM5->CNT=0;
	   TIM5->CCR1 = 100;
 800294a:	4b46      	ldr	r3, [pc, #280]	@ (8002a64 <main+0x14e4>)
 800294c:	2264      	movs	r2, #100	@ 0x64
 800294e:	635a      	str	r2, [r3, #52]	@ 0x34
	   TIM5->ARR = (uint32_t)(laser_duration*1000);
 8002950:	4b4e      	ldr	r3, [pc, #312]	@ (8002a8c <main+0x150c>)
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	461a      	mov	r2, r3
 8002956:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800295a:	fb03 f202 	mul.w	r2, r3, r2
 800295e:	4b41      	ldr	r3, [pc, #260]	@ (8002a64 <main+0x14e4>)
 8002960:	62da      	str	r2, [r3, #44]	@ 0x2c
	   laser_on=1;
 8002962:	4b3f      	ldr	r3, [pc, #252]	@ (8002a60 <main+0x14e0>)
 8002964:	2201      	movs	r2, #1
 8002966:	601a      	str	r2, [r3, #0]
		//TIM5->CCR1 = (uint32_t)1;
		//TIM5->ARR =(uint32_t)10000;



	   if ((temp1>0)&&(shaftAngle(temp1)<angle_range))
 8002968:	4b46      	ldr	r3, [pc, #280]	@ (8002a84 <main+0x1504>)
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d01d      	beq.n	80029ac <main+0x142c>
 8002970:	4b44      	ldr	r3, [pc, #272]	@ (8002a84 <main+0x1504>)
 8002972:	881b      	ldrh	r3, [r3, #0]
 8002974:	b21b      	sxth	r3, r3
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe fb16 	bl	8000fa8 <shaftAngle>
 800297c:	ee10 3a10 	vmov	r3, s0
 8002980:	4618      	mov	r0, r3
 8002982:	f7fd fda5 	bl	80004d0 <__aeabi_f2d>
 8002986:	a326      	add	r3, pc, #152	@ (adr r3, 8002a20 <main+0x14a0>)
 8002988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298c:	f7fe f86a 	bl	8000a64 <__aeabi_dcmplt>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00a      	beq.n	80029ac <main+0x142c>

	 //  if ((temp1>0)&&(temp1<4096))
	  		{
		   move_position[0]=shaftAngle(temp1);
 8002996:	4b3b      	ldr	r3, [pc, #236]	@ (8002a84 <main+0x1504>)
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	b21b      	sxth	r3, r3
 800299c:	4618      	mov	r0, r3
 800299e:	f7fe fb03 	bl	8000fa8 <shaftAngle>
 80029a2:	eef0 7a40 	vmov.f32	s15, s0
 80029a6:	4b29      	ldr	r3, [pc, #164]	@ (8002a4c <main+0x14cc>)
 80029a8:	edc3 7a00 	vstr	s15, [r3]
		//   move_position[0]=(angle_range/4095*(float)temp1);//-(angle_range/2);
	  		}
	   if ((temp2>0)&&(shaftAngle(temp2)<angle_range2))
 80029ac:	4b36      	ldr	r3, [pc, #216]	@ (8002a88 <main+0x1508>)
 80029ae:	881b      	ldrh	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d01d      	beq.n	80029f0 <main+0x1470>
 80029b4:	4b34      	ldr	r3, [pc, #208]	@ (8002a88 <main+0x1508>)
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	b21b      	sxth	r3, r3
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe faf4 	bl	8000fa8 <shaftAngle>
 80029c0:	ee10 3a10 	vmov	r3, s0
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fd fd83 	bl	80004d0 <__aeabi_f2d>
 80029ca:	a317      	add	r3, pc, #92	@ (adr r3, 8002a28 <main+0x14a8>)
 80029cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d0:	f7fe f848 	bl	8000a64 <__aeabi_dcmplt>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00a      	beq.n	80029f0 <main+0x1470>
	  		{
		   move_position2[0]=shaftAngle(temp2);
 80029da:	4b2b      	ldr	r3, [pc, #172]	@ (8002a88 <main+0x1508>)
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	b21b      	sxth	r3, r3
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fe fae1 	bl	8000fa8 <shaftAngle>
 80029e6:	eef0 7a40 	vmov.f32	s15, s0
 80029ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002a54 <main+0x14d4>)
 80029ec:	edc3 7a00 	vstr	s15, [r3]


}


galvo_tx.encoder1=encoder1;
 80029f0:	4b29      	ldr	r3, [pc, #164]	@ (8002a98 <main+0x1518>)
 80029f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029f6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
galvo_tx.encoder2=encoder2;
 80029fa:	4b28      	ldr	r3, [pc, #160]	@ (8002a9c <main+0x151c>)
 80029fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a00:	e04e      	b.n	8002aa0 <main+0x1520>
 8002a02:	bf00      	nop
 8002a04:	f3af 8000 	nop.w
 8002a08:	0aa64c30 	.word	0x0aa64c30
 8002a0c:	3ff92546 	.word	0x3ff92546
 8002a10:	00000000 	.word	0x00000000
 8002a14:	40000000 	.word	0x40000000
 8002a18:	eb1c432d 	.word	0xeb1c432d
 8002a1c:	3f2a36e2 	.word	0x3f2a36e2
 8002a20:	9999999a 	.word	0x9999999a
 8002a24:	3fc99999 	.word	0x3fc99999
 8002a28:	d70a3d71 	.word	0xd70a3d71
 8002a2c:	3fd570a3 	.word	0x3fd570a3
 8002a30:	20000676 	.word	0x20000676
 8002a34:	20000618 	.word	0x20000618
 8002a38:	20000614 	.word	0x20000614
 8002a3c:	20000638 	.word	0x20000638
 8002a40:	200006cc 	.word	0x200006cc
 8002a44:	20000688 	.word	0x20000688
 8002a48:	200006d0 	.word	0x200006d0
 8002a4c:	2000064c 	.word	0x2000064c
 8002a50:	20000610 	.word	0x20000610
 8002a54:	20000698 	.word	0x20000698
 8002a58:	20000678 	.word	0x20000678
 8002a5c:	20000644 	.word	0x20000644
 8002a60:	200006d8 	.word	0x200006d8
 8002a64:	40000c00 	.word	0x40000c00
 8002a68:	200006eb 	.word	0x200006eb
 8002a6c:	200006dc 	.word	0x200006dc
 8002a70:	20000010 	.word	0x20000010
 8002a74:	200006e1 	.word	0x200006e1
 8002a78:	20000018 	.word	0x20000018
 8002a7c:	200006e6 	.word	0x200006e6
 8002a80:	20000024 	.word	0x20000024
 8002a84:	20000028 	.word	0x20000028
 8002a88:	2000002a 	.word	0x2000002a
 8002a8c:	200006ec 	.word	0x200006ec
 8002a90:	2000001e 	.word	0x2000001e
 8002a94:	20000020 	.word	0x20000020
 8002a98:	2000060c 	.word	0x2000060c
 8002a9c:	2000060e 	.word	0x2000060e
 8002aa0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
galvo_tx.time=time_base;
 8002aa4:	4b10      	ldr	r3, [pc, #64]	@ (8002ae8 <main+0x1568>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
galvo_tx.laser_time=(uint32_t)(TIM5->CNT/1000);
 8002aaa:	4b10      	ldr	r3, [pc, #64]	@ (8002aec <main+0x156c>)
 8002aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aae:	4a10      	ldr	r2, [pc, #64]	@ (8002af0 <main+0x1570>)
 8002ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab4:	099b      	lsrs	r3, r3, #6
 8002ab6:	653b      	str	r3, [r7, #80]	@ 0x50
galvo_tx.rmse= (uint32_t)(rms_error * 10000);
 8002ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8002af4 <main+0x1574>)
 8002aba:	edd3 7a00 	vldr	s15, [r3]
 8002abe:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002af8 <main+0x1578>
 8002ac2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aca:	ee17 3a90 	vmov	r3, s15
 8002ace:	657b      	str	r3, [r7, #84]	@ 0x54
galvo_tx.laser_on=(uint32_t)(laser_on);
 8002ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8002afc <main+0x157c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	65bb      	str	r3, [r7, #88]	@ 0x58
CDC_Transmit_FS((uint8_t *) &galvo_tx,sizeof(galvo_tx));
 8002ad6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002ada:	2114      	movs	r1, #20
 8002adc:	4618      	mov	r0, r3
 8002ade:	f00b fe31 	bl	800e744 <CDC_Transmit_FS>
  {
 8002ae2:	f7fe be85 	b.w	80017f0 <main+0x270>
 8002ae6:	bf00      	nop
 8002ae8:	2000061c 	.word	0x2000061c
 8002aec:	40000c00 	.word	0x40000c00
 8002af0:	10624dd3 	.word	0x10624dd3
 8002af4:	20000644 	.word	0x20000644
 8002af8:	461c4000 	.word	0x461c4000
 8002afc:	200006d8 	.word	0x200006d8

08002b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b094      	sub	sp, #80	@ 0x50
 8002b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b06:	f107 0320 	add.w	r3, r7, #32
 8002b0a:	2230      	movs	r2, #48	@ 0x30
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f00c fc36 	bl	800f380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b14:	f107 030c 	add.w	r3, r7, #12
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	605a      	str	r2, [r3, #4]
 8002b1e:	609a      	str	r2, [r3, #8]
 8002b20:	60da      	str	r2, [r3, #12]
 8002b22:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002b24:	f004 fb1c 	bl	8007160 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b28:	4b2a      	ldr	r3, [pc, #168]	@ (8002bd4 <SystemClock_Config+0xd4>)
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2c:	4a29      	ldr	r2, [pc, #164]	@ (8002bd4 <SystemClock_Config+0xd4>)
 8002b2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b32:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b34:	4b27      	ldr	r3, [pc, #156]	@ (8002bd4 <SystemClock_Config+0xd4>)
 8002b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b40:	4b25      	ldr	r3, [pc, #148]	@ (8002bd8 <SystemClock_Config+0xd8>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a24      	ldr	r2, [pc, #144]	@ (8002bd8 <SystemClock_Config+0xd8>)
 8002b46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b4a:	6013      	str	r3, [r2, #0]
 8002b4c:	4b22      	ldr	r3, [pc, #136]	@ (8002bd8 <SystemClock_Config+0xd8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002b54:	607b      	str	r3, [r7, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002b5c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002b60:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b62:	2302      	movs	r3, #2
 8002b64:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b66:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002b6c:	2304      	movs	r3, #4
 8002b6e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002b70:	23d8      	movs	r3, #216	@ 0xd8
 8002b72:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b74:	2302      	movs	r3, #2
 8002b76:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002b78:	2309      	movs	r3, #9
 8002b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b7c:	f107 0320 	add.w	r3, r7, #32
 8002b80:	4618      	mov	r0, r3
 8002b82:	f004 fb4d 	bl	8007220 <HAL_RCC_OscConfig>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002b8c:	f000 fe8a 	bl	80038a4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002b90:	f004 faf6 	bl	8007180 <HAL_PWREx_EnableOverDrive>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002b9a:	f000 fe83 	bl	80038a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b9e:	230f      	movs	r3, #15
 8002ba0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002baa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002bae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002bb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bb4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002bb6:	f107 030c 	add.w	r3, r7, #12
 8002bba:	2107      	movs	r1, #7
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f004 fdd3 	bl	8007768 <HAL_RCC_ClockConfig>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002bc8:	f000 fe6c 	bl	80038a4 <Error_Handler>
  }
}
 8002bcc:	bf00      	nop
 8002bce:	3750      	adds	r7, #80	@ 0x50
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	40007000 	.word	0x40007000

08002bdc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002be2:	463b      	mov	r3, r7
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002bee:	4b30      	ldr	r3, [pc, #192]	@ (8002cb0 <MX_ADC1_Init+0xd4>)
 8002bf0:	4a30      	ldr	r2, [pc, #192]	@ (8002cb4 <MX_ADC1_Init+0xd8>)
 8002bf2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002bf4:	4b2e      	ldr	r3, [pc, #184]	@ (8002cb0 <MX_ADC1_Init+0xd4>)
 8002bf6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002bfa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002bfc:	4b2c      	ldr	r3, [pc, #176]	@ (8002cb0 <MX_ADC1_Init+0xd4>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002c02:	4b2b      	ldr	r3, [pc, #172]	@ (8002cb0 <MX_ADC1_Init+0xd4>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002c08:	4b29      	ldr	r3, [pc, #164]	@ (8002cb0 <MX_ADC1_Init+0xd4>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c0e:	4b28      	ldr	r3, [pc, #160]	@ (8002cb0 <MX_ADC1_Init+0xd4>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c16:	4b26      	ldr	r3, [pc, #152]	@ (8002cb0 <MX_ADC1_Init+0xd4>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c1c:	4b24      	ldr	r3, [pc, #144]	@ (8002cb0 <MX_ADC1_Init+0xd4>)
 8002c1e:	4a26      	ldr	r2, [pc, #152]	@ (8002cb8 <MX_ADC1_Init+0xdc>)
 8002c20:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c22:	4b23      	ldr	r3, [pc, #140]	@ (8002cb0 <MX_ADC1_Init+0xd4>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8002c28:	4b21      	ldr	r3, [pc, #132]	@ (8002cb0 <MX_ADC1_Init+0xd4>)
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002c2e:	4b20      	ldr	r3, [pc, #128]	@ (8002cb0 <MX_ADC1_Init+0xd4>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c36:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb0 <MX_ADC1_Init+0xd4>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c3c:	481c      	ldr	r0, [pc, #112]	@ (8002cb0 <MX_ADC1_Init+0xd4>)
 8002c3e:	f001 fbc7 	bl	80043d0 <HAL_ADC_Init>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002c48:	f000 fe2c 	bl	80038a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002c4c:	230a      	movs	r3, #10
 8002c4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002c50:	2301      	movs	r3, #1
 8002c52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8002c54:	2305      	movs	r3, #5
 8002c56:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c58:	463b      	mov	r3, r7
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4814      	ldr	r0, [pc, #80]	@ (8002cb0 <MX_ADC1_Init+0xd4>)
 8002c5e:	f001 fd13 	bl	8004688 <HAL_ADC_ConfigChannel>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002c68:	f000 fe1c 	bl	80038a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002c70:	2303      	movs	r3, #3
 8002c72:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c74:	463b      	mov	r3, r7
 8002c76:	4619      	mov	r1, r3
 8002c78:	480d      	ldr	r0, [pc, #52]	@ (8002cb0 <MX_ADC1_Init+0xd4>)
 8002c7a:	f001 fd05 	bl	8004688 <HAL_ADC_ConfigChannel>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002c84:	f000 fe0e 	bl	80038a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002c88:	230d      	movs	r3, #13
 8002c8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8002c90:	2305      	movs	r3, #5
 8002c92:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c94:	463b      	mov	r3, r7
 8002c96:	4619      	mov	r1, r3
 8002c98:	4805      	ldr	r0, [pc, #20]	@ (8002cb0 <MX_ADC1_Init+0xd4>)
 8002c9a:	f001 fcf5 	bl	8004688 <HAL_ADC_ConfigChannel>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8002ca4:	f000 fdfe 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002ca8:	bf00      	nop
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	200001a4 	.word	0x200001a4
 8002cb4:	40012000 	.word	0x40012000
 8002cb8:	0f000001 	.word	0x0f000001

08002cbc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002cc2:	463b      	mov	r3, r7
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8002cce:	4b44      	ldr	r3, [pc, #272]	@ (8002de0 <MX_ADC3_Init+0x124>)
 8002cd0:	4a44      	ldr	r2, [pc, #272]	@ (8002de4 <MX_ADC3_Init+0x128>)
 8002cd2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002cd4:	4b42      	ldr	r3, [pc, #264]	@ (8002de0 <MX_ADC3_Init+0x124>)
 8002cd6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002cda:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002cdc:	4b40      	ldr	r3, [pc, #256]	@ (8002de0 <MX_ADC3_Init+0x124>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002ce2:	4b3f      	ldr	r3, [pc, #252]	@ (8002de0 <MX_ADC3_Init+0x124>)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8002ce8:	4b3d      	ldr	r3, [pc, #244]	@ (8002de0 <MX_ADC3_Init+0x124>)
 8002cea:	2201      	movs	r2, #1
 8002cec:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002cee:	4b3c      	ldr	r3, [pc, #240]	@ (8002de0 <MX_ADC3_Init+0x124>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002cf6:	4b3a      	ldr	r3, [pc, #232]	@ (8002de0 <MX_ADC3_Init+0x124>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002cfc:	4b38      	ldr	r3, [pc, #224]	@ (8002de0 <MX_ADC3_Init+0x124>)
 8002cfe:	4a3a      	ldr	r2, [pc, #232]	@ (8002de8 <MX_ADC3_Init+0x12c>)
 8002d00:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d02:	4b37      	ldr	r3, [pc, #220]	@ (8002de0 <MX_ADC3_Init+0x124>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 8002d08:	4b35      	ldr	r3, [pc, #212]	@ (8002de0 <MX_ADC3_Init+0x124>)
 8002d0a:	2206      	movs	r2, #6
 8002d0c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8002d0e:	4b34      	ldr	r3, [pc, #208]	@ (8002de0 <MX_ADC3_Init+0x124>)
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d16:	4b32      	ldr	r3, [pc, #200]	@ (8002de0 <MX_ADC3_Init+0x124>)
 8002d18:	2201      	movs	r2, #1
 8002d1a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002d1c:	4830      	ldr	r0, [pc, #192]	@ (8002de0 <MX_ADC3_Init+0x124>)
 8002d1e:	f001 fb57 	bl	80043d0 <HAL_ADC_Init>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8002d28:	f000 fdbc 	bl	80038a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002d2c:	2305      	movs	r3, #5
 8002d2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d30:	2301      	movs	r3, #1
 8002d32:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002d34:	2307      	movs	r3, #7
 8002d36:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002d38:	463b      	mov	r3, r7
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4828      	ldr	r0, [pc, #160]	@ (8002de0 <MX_ADC3_Init+0x124>)
 8002d3e:	f001 fca3 	bl	8004688 <HAL_ADC_ConfigChannel>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8002d48:	f000 fdac 	bl	80038a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002d4c:	2306      	movs	r3, #6
 8002d4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002d50:	2302      	movs	r3, #2
 8002d52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002d54:	463b      	mov	r3, r7
 8002d56:	4619      	mov	r1, r3
 8002d58:	4821      	ldr	r0, [pc, #132]	@ (8002de0 <MX_ADC3_Init+0x124>)
 8002d5a:	f001 fc95 	bl	8004688 <HAL_ADC_ConfigChannel>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8002d64:	f000 fd9e 	bl	80038a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002d68:	2307      	movs	r3, #7
 8002d6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002d70:	463b      	mov	r3, r7
 8002d72:	4619      	mov	r1, r3
 8002d74:	481a      	ldr	r0, [pc, #104]	@ (8002de0 <MX_ADC3_Init+0x124>)
 8002d76:	f001 fc87 	bl	8004688 <HAL_ADC_ConfigChannel>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8002d80:	f000 fd90 	bl	80038a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002d84:	2308      	movs	r3, #8
 8002d86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002d88:	2304      	movs	r3, #4
 8002d8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002d8c:	463b      	mov	r3, r7
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4813      	ldr	r0, [pc, #76]	@ (8002de0 <MX_ADC3_Init+0x124>)
 8002d92:	f001 fc79 	bl	8004688 <HAL_ADC_ConfigChannel>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 8002d9c:	f000 fd82 	bl	80038a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002da0:	230e      	movs	r3, #14
 8002da2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002da4:	2305      	movs	r3, #5
 8002da6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002da8:	463b      	mov	r3, r7
 8002daa:	4619      	mov	r1, r3
 8002dac:	480c      	ldr	r0, [pc, #48]	@ (8002de0 <MX_ADC3_Init+0x124>)
 8002dae:	f001 fc6b 	bl	8004688 <HAL_ADC_ConfigChannel>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 8002db8:	f000 fd74 	bl	80038a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002dbc:	230f      	movs	r3, #15
 8002dbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002dc0:	2306      	movs	r3, #6
 8002dc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002dc4:	463b      	mov	r3, r7
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4805      	ldr	r0, [pc, #20]	@ (8002de0 <MX_ADC3_Init+0x124>)
 8002dca:	f001 fc5d 	bl	8004688 <HAL_ADC_ConfigChannel>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 8002dd4:	f000 fd66 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002dd8:	bf00      	nop
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	200001ec 	.word	0x200001ec
 8002de4:	40012200 	.word	0x40012200
 8002de8:	0f000001 	.word	0x0f000001

08002dec <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002df0:	4b17      	ldr	r3, [pc, #92]	@ (8002e50 <MX_CAN1_Init+0x64>)
 8002df2:	4a18      	ldr	r2, [pc, #96]	@ (8002e54 <MX_CAN1_Init+0x68>)
 8002df4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 11;
 8002df6:	4b16      	ldr	r3, [pc, #88]	@ (8002e50 <MX_CAN1_Init+0x64>)
 8002df8:	220b      	movs	r2, #11
 8002dfa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002dfc:	4b14      	ldr	r3, [pc, #80]	@ (8002e50 <MX_CAN1_Init+0x64>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002e02:	4b13      	ldr	r3, [pc, #76]	@ (8002e50 <MX_CAN1_Init+0x64>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 8002e08:	4b11      	ldr	r3, [pc, #68]	@ (8002e50 <MX_CAN1_Init+0x64>)
 8002e0a:	f44f 2250 	mov.w	r2, #851968	@ 0xd0000
 8002e0e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 8002e10:	4b0f      	ldr	r3, [pc, #60]	@ (8002e50 <MX_CAN1_Init+0x64>)
 8002e12:	f44f 02e0 	mov.w	r2, #7340032	@ 0x700000
 8002e16:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002e18:	4b0d      	ldr	r3, [pc, #52]	@ (8002e50 <MX_CAN1_Init+0x64>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002e50 <MX_CAN1_Init+0x64>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002e24:	4b0a      	ldr	r3, [pc, #40]	@ (8002e50 <MX_CAN1_Init+0x64>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002e2a:	4b09      	ldr	r3, [pc, #36]	@ (8002e50 <MX_CAN1_Init+0x64>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002e30:	4b07      	ldr	r3, [pc, #28]	@ (8002e50 <MX_CAN1_Init+0x64>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002e36:	4b06      	ldr	r3, [pc, #24]	@ (8002e50 <MX_CAN1_Init+0x64>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002e3c:	4804      	ldr	r0, [pc, #16]	@ (8002e50 <MX_CAN1_Init+0x64>)
 8002e3e:	f001 fef5 	bl	8004c2c <HAL_CAN_Init>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002e48:	f000 fd2c 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002e4c:	bf00      	nop
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	20000294 	.word	0x20000294
 8002e54:	40006400 	.word	0x40006400

08002e58 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002e5e:	463b      	mov	r3, r7
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002e66:	4b14      	ldr	r3, [pc, #80]	@ (8002eb8 <MX_DAC_Init+0x60>)
 8002e68:	4a14      	ldr	r2, [pc, #80]	@ (8002ebc <MX_DAC_Init+0x64>)
 8002e6a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002e6c:	4812      	ldr	r0, [pc, #72]	@ (8002eb8 <MX_DAC_Init+0x60>)
 8002e6e:	f002 f8ea 	bl	8005046 <HAL_DAC_Init>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002e78:	f000 fd14 	bl	80038a4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002e80:	2300      	movs	r3, #0
 8002e82:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002e84:	463b      	mov	r3, r7
 8002e86:	2200      	movs	r2, #0
 8002e88:	4619      	mov	r1, r3
 8002e8a:	480b      	ldr	r0, [pc, #44]	@ (8002eb8 <MX_DAC_Init+0x60>)
 8002e8c:	f002 f922 	bl	80050d4 <HAL_DAC_ConfigChannel>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002e96:	f000 fd05 	bl	80038a4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002e9a:	463b      	mov	r3, r7
 8002e9c:	2210      	movs	r2, #16
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4805      	ldr	r0, [pc, #20]	@ (8002eb8 <MX_DAC_Init+0x60>)
 8002ea2:	f002 f917 	bl	80050d4 <HAL_DAC_ConfigChannel>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8002eac:	f000 fcfa 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002eb0:	bf00      	nop
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	200002bc 	.word	0x200002bc
 8002ebc:	40007400 	.word	0x40007400

08002ec0 <MX_I2C2_SMBUS_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_SMBUS_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hsmbus2.Instance = I2C2;
 8002ec4:	4b1c      	ldr	r3, [pc, #112]	@ (8002f38 <MX_I2C2_SMBUS_Init+0x78>)
 8002ec6:	4a1d      	ldr	r2, [pc, #116]	@ (8002f3c <MX_I2C2_SMBUS_Init+0x7c>)
 8002ec8:	601a      	str	r2, [r3, #0]
  hsmbus2.Init.Timing = 0x20404768;
 8002eca:	4b1b      	ldr	r3, [pc, #108]	@ (8002f38 <MX_I2C2_SMBUS_Init+0x78>)
 8002ecc:	4a1c      	ldr	r2, [pc, #112]	@ (8002f40 <MX_I2C2_SMBUS_Init+0x80>)
 8002ece:	605a      	str	r2, [r3, #4]
  hsmbus2.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8002ed0:	4b19      	ldr	r3, [pc, #100]	@ (8002f38 <MX_I2C2_SMBUS_Init+0x78>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	609a      	str	r2, [r3, #8]
  hsmbus2.Init.OwnAddress1 = 2;
 8002ed6:	4b18      	ldr	r3, [pc, #96]	@ (8002f38 <MX_I2C2_SMBUS_Init+0x78>)
 8002ed8:	2202      	movs	r2, #2
 8002eda:	60da      	str	r2, [r3, #12]
  hsmbus2.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8002edc:	4b16      	ldr	r3, [pc, #88]	@ (8002f38 <MX_I2C2_SMBUS_Init+0x78>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	611a      	str	r2, [r3, #16]
  hsmbus2.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8002ee2:	4b15      	ldr	r3, [pc, #84]	@ (8002f38 <MX_I2C2_SMBUS_Init+0x78>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	615a      	str	r2, [r3, #20]
  hsmbus2.Init.OwnAddress2 = 0;
 8002ee8:	4b13      	ldr	r3, [pc, #76]	@ (8002f38 <MX_I2C2_SMBUS_Init+0x78>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	619a      	str	r2, [r3, #24]
  hsmbus2.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8002eee:	4b12      	ldr	r3, [pc, #72]	@ (8002f38 <MX_I2C2_SMBUS_Init+0x78>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	61da      	str	r2, [r3, #28]
  hsmbus2.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8002ef4:	4b10      	ldr	r3, [pc, #64]	@ (8002f38 <MX_I2C2_SMBUS_Init+0x78>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	621a      	str	r2, [r3, #32]
  hsmbus2.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8002efa:	4b0f      	ldr	r3, [pc, #60]	@ (8002f38 <MX_I2C2_SMBUS_Init+0x78>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	625a      	str	r2, [r3, #36]	@ 0x24
  hsmbus2.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8002f00:	4b0d      	ldr	r3, [pc, #52]	@ (8002f38 <MX_I2C2_SMBUS_Init+0x78>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	629a      	str	r2, [r3, #40]	@ 0x28
  hsmbus2.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8002f06:	4b0c      	ldr	r3, [pc, #48]	@ (8002f38 <MX_I2C2_SMBUS_Init+0x78>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsmbus2.Init.SMBusTimeout = 0x00008293;
 8002f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f38 <MX_I2C2_SMBUS_Init+0x78>)
 8002f0e:	f248 2293 	movw	r2, #33427	@ 0x8293
 8002f12:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SMBUS_Init(&hsmbus2) != HAL_OK)
 8002f14:	4808      	ldr	r0, [pc, #32]	@ (8002f38 <MX_I2C2_SMBUS_Init+0x78>)
 8002f16:	f005 fa3d 	bl	8008394 <HAL_SMBUS_Init>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <MX_I2C2_SMBUS_Init+0x64>
  {
    Error_Handler();
 8002f20:	f000 fcc0 	bl	80038a4 <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus2) != HAL_OK)
 8002f24:	4804      	ldr	r0, [pc, #16]	@ (8002f38 <MX_I2C2_SMBUS_Init+0x78>)
 8002f26:	f005 faed 	bl	8008504 <HAL_SMBUS_EnableAlert_IT>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <MX_I2C2_SMBUS_Init+0x74>
  {
    Error_Handler();
 8002f30:	f000 fcb8 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002f34:	bf00      	nop
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	200002d0 	.word	0x200002d0
 8002f3c:	40005800 	.word	0x40005800
 8002f40:	20404768 	.word	0x20404768

08002f44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b09a      	sub	sp, #104	@ 0x68
 8002f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f4a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002f4e:	2200      	movs	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	605a      	str	r2, [r3, #4]
 8002f54:	609a      	str	r2, [r3, #8]
 8002f56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f58:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	605a      	str	r2, [r3, #4]
 8002f62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f64:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	605a      	str	r2, [r3, #4]
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	60da      	str	r2, [r3, #12]
 8002f72:	611a      	str	r2, [r3, #16]
 8002f74:	615a      	str	r2, [r3, #20]
 8002f76:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f78:	1d3b      	adds	r3, r7, #4
 8002f7a:	222c      	movs	r2, #44	@ 0x2c
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f00c f9fe 	bl	800f380 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  //After MX code gen update sConfigOC.OCMode = TIM_OCMODE_PWM1;
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f84:	4b50      	ldr	r3, [pc, #320]	@ (80030c8 <MX_TIM1_Init+0x184>)
 8002f86:	4a51      	ldr	r2, [pc, #324]	@ (80030cc <MX_TIM1_Init+0x188>)
 8002f88:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002f8a:	4b4f      	ldr	r3, [pc, #316]	@ (80030c8 <MX_TIM1_Init+0x184>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002f90:	4b4d      	ldr	r3, [pc, #308]	@ (80030c8 <MX_TIM1_Init+0x184>)
 8002f92:	2220      	movs	r2, #32
 8002f94:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = SVPWM_period;
 8002f96:	4b4c      	ldr	r3, [pc, #304]	@ (80030c8 <MX_TIM1_Init+0x184>)
 8002f98:	f640 72d2 	movw	r2, #4050	@ 0xfd2
 8002f9c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f9e:	4b4a      	ldr	r3, [pc, #296]	@ (80030c8 <MX_TIM1_Init+0x184>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002fa4:	4b48      	ldr	r3, [pc, #288]	@ (80030c8 <MX_TIM1_Init+0x184>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002faa:	4b47      	ldr	r3, [pc, #284]	@ (80030c8 <MX_TIM1_Init+0x184>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002fb0:	4845      	ldr	r0, [pc, #276]	@ (80030c8 <MX_TIM1_Init+0x184>)
 8002fb2:	f005 fafa 	bl	80085aa <HAL_TIM_Base_Init>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002fbc:	f000 fc72 	bl	80038a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fc4:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002fc6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002fca:	4619      	mov	r1, r3
 8002fcc:	483e      	ldr	r0, [pc, #248]	@ (80030c8 <MX_TIM1_Init+0x184>)
 8002fce:	f006 f8e3 	bl	8009198 <HAL_TIM_ConfigClockSource>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002fd8:	f000 fc64 	bl	80038a4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8002fdc:	483a      	ldr	r0, [pc, #232]	@ (80030c8 <MX_TIM1_Init+0x184>)
 8002fde:	f005 fbab 	bl	8008738 <HAL_TIM_OC_Init>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002fe8:	f000 fc5c 	bl	80038a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fec:	2300      	movs	r3, #0
 8002fee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ff8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4832      	ldr	r0, [pc, #200]	@ (80030c8 <MX_TIM1_Init+0x184>)
 8003000:	f006 feea 	bl	8009dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800300a:	f000 fc4b 	bl	80038a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800300e:	2360      	movs	r3, #96	@ 0x60
 8003010:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 1000;
 8003012:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003016:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003018:	2300      	movs	r3, #0
 800301a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800301c:	2300      	movs	r3, #0
 800301e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003020:	2300      	movs	r3, #0
 8003022:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003024:	2300      	movs	r3, #0
 8003026:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003028:	2300      	movs	r3, #0
 800302a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800302c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003030:	2200      	movs	r2, #0
 8003032:	4619      	mov	r1, r3
 8003034:	4824      	ldr	r0, [pc, #144]	@ (80030c8 <MX_TIM1_Init+0x184>)
 8003036:	f005 ff21 	bl	8008e7c <HAL_TIM_OC_ConfigChannel>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8003040:	f000 fc30 	bl	80038a4 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003044:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003048:	2204      	movs	r2, #4
 800304a:	4619      	mov	r1, r3
 800304c:	481e      	ldr	r0, [pc, #120]	@ (80030c8 <MX_TIM1_Init+0x184>)
 800304e:	f005 ff15 	bl	8008e7c <HAL_TIM_OC_ConfigChannel>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8003058:	f000 fc24 	bl	80038a4 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800305c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003060:	2208      	movs	r2, #8
 8003062:	4619      	mov	r1, r3
 8003064:	4818      	ldr	r0, [pc, #96]	@ (80030c8 <MX_TIM1_Init+0x184>)
 8003066:	f005 ff09 	bl	8008e7c <HAL_TIM_OC_ConfigChannel>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8003070:	f000 fc18 	bl	80038a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003074:	2300      	movs	r3, #0
 8003076:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003078:	2300      	movs	r3, #0
 800307a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800307c:	2300      	movs	r3, #0
 800307e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 8003080:	2364      	movs	r3, #100	@ 0x64
 8003082:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003088:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800308c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800308e:	2300      	movs	r3, #0
 8003090:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003092:	2300      	movs	r3, #0
 8003094:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003096:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800309a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800309c:	2300      	movs	r3, #0
 800309e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80030a0:	2300      	movs	r3, #0
 80030a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80030a4:	1d3b      	adds	r3, r7, #4
 80030a6:	4619      	mov	r1, r3
 80030a8:	4807      	ldr	r0, [pc, #28]	@ (80030c8 <MX_TIM1_Init+0x184>)
 80030aa:	f006 ff23 	bl	8009ef4 <HAL_TIMEx_ConfigBreakDeadTime>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 80030b4:	f000 fbf6 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80030b8:	4803      	ldr	r0, [pc, #12]	@ (80030c8 <MX_TIM1_Init+0x184>)
 80030ba:	f000 fed5 	bl	8003e68 <HAL_TIM_MspPostInit>

}
 80030be:	bf00      	nop
 80030c0:	3768      	adds	r7, #104	@ 0x68
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000320 	.word	0x20000320
 80030cc:	40010000 	.word	0x40010000

080030d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b088      	sub	sp, #32
 80030d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030d6:	f107 0310 	add.w	r3, r7, #16
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	605a      	str	r2, [r3, #4]
 80030e0:	609a      	str	r2, [r3, #8]
 80030e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030e4:	1d3b      	adds	r3, r7, #4
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	605a      	str	r2, [r3, #4]
 80030ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80030ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003168 <MX_TIM2_Init+0x98>)
 80030f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80030f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 80030f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003168 <MX_TIM2_Init+0x98>)
 80030f8:	226b      	movs	r2, #107	@ 0x6b
 80030fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003168 <MX_TIM2_Init+0x98>)
 80030fe:	2200      	movs	r2, #0
 8003100:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003102:	4b19      	ldr	r3, [pc, #100]	@ (8003168 <MX_TIM2_Init+0x98>)
 8003104:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003108:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800310a:	4b17      	ldr	r3, [pc, #92]	@ (8003168 <MX_TIM2_Init+0x98>)
 800310c:	2200      	movs	r2, #0
 800310e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003110:	4b15      	ldr	r3, [pc, #84]	@ (8003168 <MX_TIM2_Init+0x98>)
 8003112:	2200      	movs	r2, #0
 8003114:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003116:	4814      	ldr	r0, [pc, #80]	@ (8003168 <MX_TIM2_Init+0x98>)
 8003118:	f005 fa47 	bl	80085aa <HAL_TIM_Base_Init>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003122:	f000 fbbf 	bl	80038a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003126:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800312a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800312c:	f107 0310 	add.w	r3, r7, #16
 8003130:	4619      	mov	r1, r3
 8003132:	480d      	ldr	r0, [pc, #52]	@ (8003168 <MX_TIM2_Init+0x98>)
 8003134:	f006 f830 	bl	8009198 <HAL_TIM_ConfigClockSource>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800313e:	f000 fbb1 	bl	80038a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003142:	2300      	movs	r3, #0
 8003144:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003146:	2300      	movs	r3, #0
 8003148:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800314a:	1d3b      	adds	r3, r7, #4
 800314c:	4619      	mov	r1, r3
 800314e:	4806      	ldr	r0, [pc, #24]	@ (8003168 <MX_TIM2_Init+0x98>)
 8003150:	f006 fe42 	bl	8009dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800315a:	f000 fba3 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800315e:	bf00      	nop
 8003160:	3720      	adds	r7, #32
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	2000036c 	.word	0x2000036c

0800316c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08c      	sub	sp, #48	@ 0x30
 8003170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003172:	f107 030c 	add.w	r3, r7, #12
 8003176:	2224      	movs	r2, #36	@ 0x24
 8003178:	2100      	movs	r1, #0
 800317a:	4618      	mov	r0, r3
 800317c:	f00c f900 	bl	800f380 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003180:	463b      	mov	r3, r7
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	605a      	str	r2, [r3, #4]
 8003188:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800318a:	4b21      	ldr	r3, [pc, #132]	@ (8003210 <MX_TIM3_Init+0xa4>)
 800318c:	4a21      	ldr	r2, [pc, #132]	@ (8003214 <MX_TIM3_Init+0xa8>)
 800318e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003190:	4b1f      	ldr	r3, [pc, #124]	@ (8003210 <MX_TIM3_Init+0xa4>)
 8003192:	2200      	movs	r2, #0
 8003194:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8003196:	4b1e      	ldr	r3, [pc, #120]	@ (8003210 <MX_TIM3_Init+0xa4>)
 8003198:	2210      	movs	r2, #16
 800319a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800319c:	4b1c      	ldr	r3, [pc, #112]	@ (8003210 <MX_TIM3_Init+0xa4>)
 800319e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80031a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003210 <MX_TIM3_Init+0xa4>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031aa:	4b19      	ldr	r3, [pc, #100]	@ (8003210 <MX_TIM3_Init+0xa4>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80031b0:	2303      	movs	r3, #3
 80031b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80031b4:	2300      	movs	r3, #0
 80031b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80031b8:	2301      	movs	r3, #1
 80031ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80031bc:	2300      	movs	r3, #0
 80031be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 100;
 80031c0:	2364      	movs	r3, #100	@ 0x64
 80031c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80031c4:	2302      	movs	r3, #2
 80031c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80031c8:	2301      	movs	r3, #1
 80031ca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80031cc:	2300      	movs	r3, #0
 80031ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 100;
 80031d0:	2364      	movs	r3, #100	@ 0x64
 80031d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80031d4:	f107 030c 	add.w	r3, r7, #12
 80031d8:	4619      	mov	r1, r3
 80031da:	480d      	ldr	r0, [pc, #52]	@ (8003210 <MX_TIM3_Init+0xa4>)
 80031dc:	f005 fd1a 	bl	8008c14 <HAL_TIM_Encoder_Init>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80031e6:	f000 fb5d 	bl	80038a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031ea:	2300      	movs	r3, #0
 80031ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031ee:	2300      	movs	r3, #0
 80031f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80031f2:	463b      	mov	r3, r7
 80031f4:	4619      	mov	r1, r3
 80031f6:	4806      	ldr	r0, [pc, #24]	@ (8003210 <MX_TIM3_Init+0xa4>)
 80031f8:	f006 fdee 	bl	8009dd8 <HAL_TIMEx_MasterConfigSynchronization>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003202:	f000 fb4f 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003206:	bf00      	nop
 8003208:	3730      	adds	r7, #48	@ 0x30
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	200003b8 	.word	0x200003b8
 8003214:	40000400 	.word	0x40000400

08003218 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08c      	sub	sp, #48	@ 0x30
 800321c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800321e:	f107 030c 	add.w	r3, r7, #12
 8003222:	2224      	movs	r2, #36	@ 0x24
 8003224:	2100      	movs	r1, #0
 8003226:	4618      	mov	r0, r3
 8003228:	f00c f8aa 	bl	800f380 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800322c:	463b      	mov	r3, r7
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	605a      	str	r2, [r3, #4]
 8003234:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003236:	4b21      	ldr	r3, [pc, #132]	@ (80032bc <MX_TIM4_Init+0xa4>)
 8003238:	4a21      	ldr	r2, [pc, #132]	@ (80032c0 <MX_TIM4_Init+0xa8>)
 800323a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800323c:	4b1f      	ldr	r3, [pc, #124]	@ (80032bc <MX_TIM4_Init+0xa4>)
 800323e:	2200      	movs	r2, #0
 8003240:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003242:	4b1e      	ldr	r3, [pc, #120]	@ (80032bc <MX_TIM4_Init+0xa4>)
 8003244:	2200      	movs	r2, #0
 8003246:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003248:	4b1c      	ldr	r3, [pc, #112]	@ (80032bc <MX_TIM4_Init+0xa4>)
 800324a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800324e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003250:	4b1a      	ldr	r3, [pc, #104]	@ (80032bc <MX_TIM4_Init+0xa4>)
 8003252:	2200      	movs	r2, #0
 8003254:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003256:	4b19      	ldr	r3, [pc, #100]	@ (80032bc <MX_TIM4_Init+0xa4>)
 8003258:	2200      	movs	r2, #0
 800325a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800325c:	2303      	movs	r3, #3
 800325e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003260:	2300      	movs	r3, #0
 8003262:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003264:	2301      	movs	r3, #1
 8003266:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003268:	2300      	movs	r3, #0
 800326a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 100;
 800326c:	2364      	movs	r3, #100	@ 0x64
 800326e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003270:	2302      	movs	r3, #2
 8003272:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003274:	2301      	movs	r3, #1
 8003276:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003278:	2300      	movs	r3, #0
 800327a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 100;
 800327c:	2364      	movs	r3, #100	@ 0x64
 800327e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003280:	f107 030c 	add.w	r3, r7, #12
 8003284:	4619      	mov	r1, r3
 8003286:	480d      	ldr	r0, [pc, #52]	@ (80032bc <MX_TIM4_Init+0xa4>)
 8003288:	f005 fcc4 	bl	8008c14 <HAL_TIM_Encoder_Init>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003292:	f000 fb07 	bl	80038a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003296:	2300      	movs	r3, #0
 8003298:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800329a:	2300      	movs	r3, #0
 800329c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800329e:	463b      	mov	r3, r7
 80032a0:	4619      	mov	r1, r3
 80032a2:	4806      	ldr	r0, [pc, #24]	@ (80032bc <MX_TIM4_Init+0xa4>)
 80032a4:	f006 fd98 	bl	8009dd8 <HAL_TIMEx_MasterConfigSynchronization>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80032ae:	f000 faf9 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80032b2:	bf00      	nop
 80032b4:	3730      	adds	r7, #48	@ 0x30
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	20000404 	.word	0x20000404
 80032c0:	40000800 	.word	0x40000800

080032c4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08e      	sub	sp, #56	@ 0x38
 80032c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	605a      	str	r2, [r3, #4]
 80032d4:	609a      	str	r2, [r3, #8]
 80032d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032d8:	f107 031c 	add.w	r3, r7, #28
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	605a      	str	r2, [r3, #4]
 80032e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032e4:	463b      	mov	r3, r7
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	605a      	str	r2, [r3, #4]
 80032ec:	609a      	str	r2, [r3, #8]
 80032ee:	60da      	str	r2, [r3, #12]
 80032f0:	611a      	str	r2, [r3, #16]
 80032f2:	615a      	str	r2, [r3, #20]
 80032f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80032f6:	4b31      	ldr	r3, [pc, #196]	@ (80033bc <MX_TIM5_Init+0xf8>)
 80032f8:	4a31      	ldr	r2, [pc, #196]	@ (80033c0 <MX_TIM5_Init+0xfc>)
 80032fa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 108-1;
 80032fc:	4b2f      	ldr	r3, [pc, #188]	@ (80033bc <MX_TIM5_Init+0xf8>)
 80032fe:	226b      	movs	r2, #107	@ 0x6b
 8003300:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003302:	4b2e      	ldr	r3, [pc, #184]	@ (80033bc <MX_TIM5_Init+0xf8>)
 8003304:	2200      	movs	r2, #0
 8003306:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8003308:	4b2c      	ldr	r3, [pc, #176]	@ (80033bc <MX_TIM5_Init+0xf8>)
 800330a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800330e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003310:	4b2a      	ldr	r3, [pc, #168]	@ (80033bc <MX_TIM5_Init+0xf8>)
 8003312:	2200      	movs	r2, #0
 8003314:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003316:	4b29      	ldr	r3, [pc, #164]	@ (80033bc <MX_TIM5_Init+0xf8>)
 8003318:	2280      	movs	r2, #128	@ 0x80
 800331a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800331c:	4827      	ldr	r0, [pc, #156]	@ (80033bc <MX_TIM5_Init+0xf8>)
 800331e:	f005 f944 	bl	80085aa <HAL_TIM_Base_Init>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8003328:	f000 fabc 	bl	80038a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800332c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003330:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003332:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003336:	4619      	mov	r1, r3
 8003338:	4820      	ldr	r0, [pc, #128]	@ (80033bc <MX_TIM5_Init+0xf8>)
 800333a:	f005 ff2d 	bl	8009198 <HAL_TIM_ConfigClockSource>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8003344:	f000 faae 	bl	80038a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003348:	481c      	ldr	r0, [pc, #112]	@ (80033bc <MX_TIM5_Init+0xf8>)
 800334a:	f005 fa4c 	bl	80087e6 <HAL_TIM_PWM_Init>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8003354:	f000 faa6 	bl	80038a4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim5, TIM_OPMODE_SINGLE) != HAL_OK)
 8003358:	2108      	movs	r1, #8
 800335a:	4818      	ldr	r0, [pc, #96]	@ (80033bc <MX_TIM5_Init+0xf8>)
 800335c:	f005 fb9e 	bl	8008a9c <HAL_TIM_OnePulse_Init>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <MX_TIM5_Init+0xa6>
  {
    Error_Handler();
 8003366:	f000 fa9d 	bl	80038a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800336a:	2300      	movs	r3, #0
 800336c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800336e:	2300      	movs	r3, #0
 8003370:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003372:	f107 031c 	add.w	r3, r7, #28
 8003376:	4619      	mov	r1, r3
 8003378:	4810      	ldr	r0, [pc, #64]	@ (80033bc <MX_TIM5_Init+0xf8>)
 800337a:	f006 fd2d 	bl	8009dd8 <HAL_TIMEx_MasterConfigSynchronization>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <MX_TIM5_Init+0xc4>
  {
    Error_Handler();
 8003384:	f000 fa8e 	bl	80038a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003388:	2370      	movs	r3, #112	@ 0x70
 800338a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 100; //1000;
 800338c:	2364      	movs	r3, #100	@ 0x64
 800338e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003390:	2300      	movs	r3, #0
 8003392:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003394:	2304      	movs	r3, #4
 8003396:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003398:	463b      	mov	r3, r7
 800339a:	2200      	movs	r2, #0
 800339c:	4619      	mov	r1, r3
 800339e:	4807      	ldr	r0, [pc, #28]	@ (80033bc <MX_TIM5_Init+0xf8>)
 80033a0:	f005 fde6 	bl	8008f70 <HAL_TIM_PWM_ConfigChannel>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <MX_TIM5_Init+0xea>
  {
    Error_Handler();
 80033aa:	f000 fa7b 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80033ae:	4803      	ldr	r0, [pc, #12]	@ (80033bc <MX_TIM5_Init+0xf8>)
 80033b0:	f000 fd5a 	bl	8003e68 <HAL_TIM_MspPostInit>

}
 80033b4:	bf00      	nop
 80033b6:	3738      	adds	r7, #56	@ 0x38
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	20000450 	.word	0x20000450
 80033c0:	40000c00 	.word	0x40000c00

080033c4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b096      	sub	sp, #88	@ 0x58
 80033c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033ca:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	605a      	str	r2, [r3, #4]
 80033d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	605a      	str	r2, [r3, #4]
 80033e0:	609a      	str	r2, [r3, #8]
 80033e2:	60da      	str	r2, [r3, #12]
 80033e4:	611a      	str	r2, [r3, #16]
 80033e6:	615a      	str	r2, [r3, #20]
 80033e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80033ea:	1d3b      	adds	r3, r7, #4
 80033ec:	222c      	movs	r2, #44	@ 0x2c
 80033ee:	2100      	movs	r1, #0
 80033f0:	4618      	mov	r0, r3
 80033f2:	f00b ffc5 	bl	800f380 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80033f6:	4b45      	ldr	r3, [pc, #276]	@ (800350c <MX_TIM8_Init+0x148>)
 80033f8:	4a45      	ldr	r2, [pc, #276]	@ (8003510 <MX_TIM8_Init+0x14c>)
 80033fa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80033fc:	4b43      	ldr	r3, [pc, #268]	@ (800350c <MX_TIM8_Init+0x148>)
 80033fe:	2200      	movs	r2, #0
 8003400:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8003402:	4b42      	ldr	r3, [pc, #264]	@ (800350c <MX_TIM8_Init+0x148>)
 8003404:	2220      	movs	r2, #32
 8003406:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = SVPWM_period;
 8003408:	4b40      	ldr	r3, [pc, #256]	@ (800350c <MX_TIM8_Init+0x148>)
 800340a:	f640 72d2 	movw	r2, #4050	@ 0xfd2
 800340e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003410:	4b3e      	ldr	r3, [pc, #248]	@ (800350c <MX_TIM8_Init+0x148>)
 8003412:	2200      	movs	r2, #0
 8003414:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003416:	4b3d      	ldr	r3, [pc, #244]	@ (800350c <MX_TIM8_Init+0x148>)
 8003418:	2200      	movs	r2, #0
 800341a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800341c:	4b3b      	ldr	r3, [pc, #236]	@ (800350c <MX_TIM8_Init+0x148>)
 800341e:	2200      	movs	r2, #0
 8003420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8003422:	483a      	ldr	r0, [pc, #232]	@ (800350c <MX_TIM8_Init+0x148>)
 8003424:	f005 f988 	bl	8008738 <HAL_TIM_OC_Init>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800342e:	f000 fa39 	bl	80038a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003432:	2300      	movs	r3, #0
 8003434:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003436:	2300      	movs	r3, #0
 8003438:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800343a:	2300      	movs	r3, #0
 800343c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800343e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003442:	4619      	mov	r1, r3
 8003444:	4831      	ldr	r0, [pc, #196]	@ (800350c <MX_TIM8_Init+0x148>)
 8003446:	f006 fcc7 	bl	8009dd8 <HAL_TIMEx_MasterConfigSynchronization>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8003450:	f000 fa28 	bl	80038a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003454:	2360      	movs	r3, #96	@ 0x60
 8003456:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 1000;
 8003458:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800345c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800345e:	2300      	movs	r3, #0
 8003460:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003462:	2300      	movs	r3, #0
 8003464:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003466:	2300      	movs	r3, #0
 8003468:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800346a:	2300      	movs	r3, #0
 800346c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800346e:	2300      	movs	r3, #0
 8003470:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003472:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003476:	2200      	movs	r2, #0
 8003478:	4619      	mov	r1, r3
 800347a:	4824      	ldr	r0, [pc, #144]	@ (800350c <MX_TIM8_Init+0x148>)
 800347c:	f005 fcfe 	bl	8008e7c <HAL_TIM_OC_ConfigChannel>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8003486:	f000 fa0d 	bl	80038a4 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800348a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800348e:	2204      	movs	r2, #4
 8003490:	4619      	mov	r1, r3
 8003492:	481e      	ldr	r0, [pc, #120]	@ (800350c <MX_TIM8_Init+0x148>)
 8003494:	f005 fcf2 	bl	8008e7c <HAL_TIM_OC_ConfigChannel>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <MX_TIM8_Init+0xde>
  {
    Error_Handler();
 800349e:	f000 fa01 	bl	80038a4 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80034a2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80034a6:	2208      	movs	r2, #8
 80034a8:	4619      	mov	r1, r3
 80034aa:	4818      	ldr	r0, [pc, #96]	@ (800350c <MX_TIM8_Init+0x148>)
 80034ac:	f005 fce6 	bl	8008e7c <HAL_TIM_OC_ConfigChannel>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 80034b6:	f000 f9f5 	bl	80038a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80034ba:	2300      	movs	r3, #0
 80034bc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80034be:	2300      	movs	r3, #0
 80034c0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80034c2:	2300      	movs	r3, #0
 80034c4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 80034c6:	2364      	movs	r3, #100	@ 0x64
 80034c8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80034ca:	2300      	movs	r3, #0
 80034cc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80034ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80034d2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80034d4:	2300      	movs	r3, #0
 80034d6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80034d8:	2300      	movs	r3, #0
 80034da:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80034dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034e0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80034e2:	2300      	movs	r3, #0
 80034e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80034e6:	2300      	movs	r3, #0
 80034e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80034ea:	1d3b      	adds	r3, r7, #4
 80034ec:	4619      	mov	r1, r3
 80034ee:	4807      	ldr	r0, [pc, #28]	@ (800350c <MX_TIM8_Init+0x148>)
 80034f0:	f006 fd00 	bl	8009ef4 <HAL_TIMEx_ConfigBreakDeadTime>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <MX_TIM8_Init+0x13a>
  {
    Error_Handler();
 80034fa:	f000 f9d3 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80034fe:	4803      	ldr	r0, [pc, #12]	@ (800350c <MX_TIM8_Init+0x148>)
 8003500:	f000 fcb2 	bl	8003e68 <HAL_TIM_MspPostInit>

}
 8003504:	bf00      	nop
 8003506:	3758      	adds	r7, #88	@ 0x58
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	2000049c 	.word	0x2000049c
 8003510:	40010400 	.word	0x40010400

08003514 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800351a:	1d3b      	adds	r3, r7, #4
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	605a      	str	r2, [r3, #4]
 8003522:	609a      	str	r2, [r3, #8]
 8003524:	60da      	str	r2, [r3, #12]
 8003526:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8003528:	4b16      	ldr	r3, [pc, #88]	@ (8003584 <MX_TIM12_Init+0x70>)
 800352a:	4a17      	ldr	r2, [pc, #92]	@ (8003588 <MX_TIM12_Init+0x74>)
 800352c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800352e:	4b15      	ldr	r3, [pc, #84]	@ (8003584 <MX_TIM12_Init+0x70>)
 8003530:	2200      	movs	r2, #0
 8003532:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003534:	4b13      	ldr	r3, [pc, #76]	@ (8003584 <MX_TIM12_Init+0x70>)
 8003536:	2200      	movs	r2, #0
 8003538:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800353a:	4b12      	ldr	r3, [pc, #72]	@ (8003584 <MX_TIM12_Init+0x70>)
 800353c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003540:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003542:	4b10      	ldr	r3, [pc, #64]	@ (8003584 <MX_TIM12_Init+0x70>)
 8003544:	2200      	movs	r2, #0
 8003546:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003548:	4b0e      	ldr	r3, [pc, #56]	@ (8003584 <MX_TIM12_Init+0x70>)
 800354a:	2200      	movs	r2, #0
 800354c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800354e:	480d      	ldr	r0, [pc, #52]	@ (8003584 <MX_TIM12_Init+0x70>)
 8003550:	f005 f82b 	bl	80085aa <HAL_TIM_Base_Init>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 800355a:	f000 f9a3 	bl	80038a4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800355e:	2306      	movs	r3, #6
 8003560:	607b      	str	r3, [r7, #4]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8003562:	2300      	movs	r3, #0
 8003564:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 8003566:	1d3b      	adds	r3, r7, #4
 8003568:	4619      	mov	r1, r3
 800356a:	4806      	ldr	r0, [pc, #24]	@ (8003584 <MX_TIM12_Init+0x70>)
 800356c:	f005 fede 	bl	800932c <HAL_TIM_SlaveConfigSynchro>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <MX_TIM12_Init+0x66>
  {
    Error_Handler();
 8003576:	f000 f995 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 800357a:	bf00      	nop
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	200004e8 	.word	0x200004e8
 8003588:	40001800 	.word	0x40001800

0800358c <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8003590:	4b12      	ldr	r3, [pc, #72]	@ (80035dc <MX_USART2_Init+0x50>)
 8003592:	4a13      	ldr	r2, [pc, #76]	@ (80035e0 <MX_USART2_Init+0x54>)
 8003594:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8003596:	4b11      	ldr	r3, [pc, #68]	@ (80035dc <MX_USART2_Init+0x50>)
 8003598:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800359c:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 800359e:	4b0f      	ldr	r3, [pc, #60]	@ (80035dc <MX_USART2_Init+0x50>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 80035a4:	4b0d      	ldr	r3, [pc, #52]	@ (80035dc <MX_USART2_Init+0x50>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 80035aa:	4b0c      	ldr	r3, [pc, #48]	@ (80035dc <MX_USART2_Init+0x50>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 80035b0:	4b0a      	ldr	r3, [pc, #40]	@ (80035dc <MX_USART2_Init+0x50>)
 80035b2:	220c      	movs	r2, #12
 80035b4:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 80035b6:	4b09      	ldr	r3, [pc, #36]	@ (80035dc <MX_USART2_Init+0x50>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 80035bc:	4b07      	ldr	r3, [pc, #28]	@ (80035dc <MX_USART2_Init+0x50>)
 80035be:	2200      	movs	r2, #0
 80035c0:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80035c2:	4b06      	ldr	r3, [pc, #24]	@ (80035dc <MX_USART2_Init+0x50>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 80035c8:	4804      	ldr	r0, [pc, #16]	@ (80035dc <MX_USART2_Init+0x50>)
 80035ca:	f007 f988 	bl	800a8de <HAL_USART_Init>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 80035d4:	f000 f966 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80035d8:	bf00      	nop
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	20000534 	.word	0x20000534
 80035e0:	40004400 	.word	0x40004400

080035e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80035e8:	4b14      	ldr	r3, [pc, #80]	@ (800363c <MX_USART3_UART_Init+0x58>)
 80035ea:	4a15      	ldr	r2, [pc, #84]	@ (8003640 <MX_USART3_UART_Init+0x5c>)
 80035ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80035ee:	4b13      	ldr	r3, [pc, #76]	@ (800363c <MX_USART3_UART_Init+0x58>)
 80035f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80035f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80035f6:	4b11      	ldr	r3, [pc, #68]	@ (800363c <MX_USART3_UART_Init+0x58>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80035fc:	4b0f      	ldr	r3, [pc, #60]	@ (800363c <MX_USART3_UART_Init+0x58>)
 80035fe:	2200      	movs	r2, #0
 8003600:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003602:	4b0e      	ldr	r3, [pc, #56]	@ (800363c <MX_USART3_UART_Init+0x58>)
 8003604:	2200      	movs	r2, #0
 8003606:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003608:	4b0c      	ldr	r3, [pc, #48]	@ (800363c <MX_USART3_UART_Init+0x58>)
 800360a:	220c      	movs	r2, #12
 800360c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800360e:	4b0b      	ldr	r3, [pc, #44]	@ (800363c <MX_USART3_UART_Init+0x58>)
 8003610:	2200      	movs	r2, #0
 8003612:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003614:	4b09      	ldr	r3, [pc, #36]	@ (800363c <MX_USART3_UART_Init+0x58>)
 8003616:	2200      	movs	r2, #0
 8003618:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800361a:	4b08      	ldr	r3, [pc, #32]	@ (800363c <MX_USART3_UART_Init+0x58>)
 800361c:	2200      	movs	r2, #0
 800361e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003620:	4b06      	ldr	r3, [pc, #24]	@ (800363c <MX_USART3_UART_Init+0x58>)
 8003622:	2200      	movs	r2, #0
 8003624:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003626:	4805      	ldr	r0, [pc, #20]	@ (800363c <MX_USART3_UART_Init+0x58>)
 8003628:	f006 fd07 	bl	800a03a <HAL_UART_Init>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003632:	f000 f937 	bl	80038a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003636:	bf00      	nop
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	20000584 	.word	0x20000584
 8003640:	40004800 	.word	0x40004800

08003644 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800364a:	4b0c      	ldr	r3, [pc, #48]	@ (800367c <MX_DMA_Init+0x38>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364e:	4a0b      	ldr	r2, [pc, #44]	@ (800367c <MX_DMA_Init+0x38>)
 8003650:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003654:	6313      	str	r3, [r2, #48]	@ 0x30
 8003656:	4b09      	ldr	r3, [pc, #36]	@ (800367c <MX_DMA_Init+0x38>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800365e:	607b      	str	r3, [r7, #4]
 8003660:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003662:	2200      	movs	r2, #0
 8003664:	2100      	movs	r1, #0
 8003666:	2038      	movs	r0, #56	@ 0x38
 8003668:	f001 fcb7 	bl	8004fda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800366c:	2038      	movs	r0, #56	@ 0x38
 800366e:	f001 fcd0 	bl	8005012 <HAL_NVIC_EnableIRQ>

}
 8003672:	bf00      	nop
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	40023800 	.word	0x40023800

08003680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08e      	sub	sp, #56	@ 0x38
 8003684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003686:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	605a      	str	r2, [r3, #4]
 8003690:	609a      	str	r2, [r3, #8]
 8003692:	60da      	str	r2, [r3, #12]
 8003694:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003696:	4b7e      	ldr	r3, [pc, #504]	@ (8003890 <MX_GPIO_Init+0x210>)
 8003698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369a:	4a7d      	ldr	r2, [pc, #500]	@ (8003890 <MX_GPIO_Init+0x210>)
 800369c:	f043 0304 	orr.w	r3, r3, #4
 80036a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80036a2:	4b7b      	ldr	r3, [pc, #492]	@ (8003890 <MX_GPIO_Init+0x210>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	623b      	str	r3, [r7, #32]
 80036ac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80036ae:	4b78      	ldr	r3, [pc, #480]	@ (8003890 <MX_GPIO_Init+0x210>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b2:	4a77      	ldr	r2, [pc, #476]	@ (8003890 <MX_GPIO_Init+0x210>)
 80036b4:	f043 0320 	orr.w	r3, r3, #32
 80036b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80036ba:	4b75      	ldr	r3, [pc, #468]	@ (8003890 <MX_GPIO_Init+0x210>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036be:	f003 0320 	and.w	r3, r3, #32
 80036c2:	61fb      	str	r3, [r7, #28]
 80036c4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80036c6:	4b72      	ldr	r3, [pc, #456]	@ (8003890 <MX_GPIO_Init+0x210>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ca:	4a71      	ldr	r2, [pc, #452]	@ (8003890 <MX_GPIO_Init+0x210>)
 80036cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80036d2:	4b6f      	ldr	r3, [pc, #444]	@ (8003890 <MX_GPIO_Init+0x210>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036da:	61bb      	str	r3, [r7, #24]
 80036dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80036de:	4b6c      	ldr	r3, [pc, #432]	@ (8003890 <MX_GPIO_Init+0x210>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e2:	4a6b      	ldr	r2, [pc, #428]	@ (8003890 <MX_GPIO_Init+0x210>)
 80036e4:	f043 0301 	orr.w	r3, r3, #1
 80036e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80036ea:	4b69      	ldr	r3, [pc, #420]	@ (8003890 <MX_GPIO_Init+0x210>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036f6:	4b66      	ldr	r3, [pc, #408]	@ (8003890 <MX_GPIO_Init+0x210>)
 80036f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fa:	4a65      	ldr	r2, [pc, #404]	@ (8003890 <MX_GPIO_Init+0x210>)
 80036fc:	f043 0302 	orr.w	r3, r3, #2
 8003700:	6313      	str	r3, [r2, #48]	@ 0x30
 8003702:	4b63      	ldr	r3, [pc, #396]	@ (8003890 <MX_GPIO_Init+0x210>)
 8003704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	613b      	str	r3, [r7, #16]
 800370c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800370e:	4b60      	ldr	r3, [pc, #384]	@ (8003890 <MX_GPIO_Init+0x210>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003712:	4a5f      	ldr	r2, [pc, #380]	@ (8003890 <MX_GPIO_Init+0x210>)
 8003714:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003718:	6313      	str	r3, [r2, #48]	@ 0x30
 800371a:	4b5d      	ldr	r3, [pc, #372]	@ (8003890 <MX_GPIO_Init+0x210>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003726:	4b5a      	ldr	r3, [pc, #360]	@ (8003890 <MX_GPIO_Init+0x210>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372a:	4a59      	ldr	r2, [pc, #356]	@ (8003890 <MX_GPIO_Init+0x210>)
 800372c:	f043 0310 	orr.w	r3, r3, #16
 8003730:	6313      	str	r3, [r2, #48]	@ 0x30
 8003732:	4b57      	ldr	r3, [pc, #348]	@ (8003890 <MX_GPIO_Init+0x210>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003736:	f003 0310 	and.w	r3, r3, #16
 800373a:	60bb      	str	r3, [r7, #8]
 800373c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800373e:	4b54      	ldr	r3, [pc, #336]	@ (8003890 <MX_GPIO_Init+0x210>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003742:	4a53      	ldr	r2, [pc, #332]	@ (8003890 <MX_GPIO_Init+0x210>)
 8003744:	f043 0308 	orr.w	r3, r3, #8
 8003748:	6313      	str	r3, [r2, #48]	@ 0x30
 800374a:	4b51      	ldr	r3, [pc, #324]	@ (8003890 <MX_GPIO_Init+0x210>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	607b      	str	r3, [r7, #4]
 8003754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8003756:	2200      	movs	r2, #0
 8003758:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800375c:	484d      	ldr	r0, [pc, #308]	@ (8003894 <MX_GPIO_Init+0x214>)
 800375e:	f002 fa2d 	bl	8005bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003762:	2200      	movs	r2, #0
 8003764:	2143      	movs	r1, #67	@ 0x43
 8003766:	484c      	ldr	r0, [pc, #304]	@ (8003898 <MX_GPIO_Init+0x218>)
 8003768:	f002 fa28 	bl	8005bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800376c:	2200      	movs	r2, #0
 800376e:	2180      	movs	r1, #128	@ 0x80
 8003770:	484a      	ldr	r0, [pc, #296]	@ (800389c <MX_GPIO_Init+0x21c>)
 8003772:	f002 fa23 	bl	8005bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003776:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800377a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800377c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003780:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003782:	2300      	movs	r3, #0
 8003784:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003786:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800378a:	4619      	mov	r1, r3
 800378c:	4844      	ldr	r0, [pc, #272]	@ (80038a0 <MX_GPIO_Init+0x220>)
 800378e:	f002 f869 	bl	8005864 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_MDC_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin;
 8003792:	2302      	movs	r3, #2
 8003794:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003796:	2302      	movs	r3, #2
 8003798:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379a:	2300      	movs	r3, #0
 800379c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800379e:	2303      	movs	r3, #3
 80037a0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80037a2:	230b      	movs	r3, #11
 80037a4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 80037a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037aa:	4619      	mov	r1, r3
 80037ac:	483c      	ldr	r0, [pc, #240]	@ (80038a0 <MX_GPIO_Init+0x220>)
 80037ae:	f002 f859 	bl	8005864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80037b2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80037b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037b8:	2301      	movs	r3, #1
 80037ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037bc:	2300      	movs	r3, #0
 80037be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c0:	2300      	movs	r3, #0
 80037c2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80037c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037c8:	4619      	mov	r1, r3
 80037ca:	4832      	ldr	r0, [pc, #200]	@ (8003894 <MX_GPIO_Init+0x214>)
 80037cc:	f002 f84a 	bl	8005864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|USB_PowerSwitchOn_Pin;
 80037d0:	2343      	movs	r3, #67	@ 0x43
 80037d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037d4:	2301      	movs	r3, #1
 80037d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d8:	2300      	movs	r3, #0
 80037da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037dc:	2300      	movs	r3, #0
 80037de:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80037e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037e4:	4619      	mov	r1, r3
 80037e6:	482c      	ldr	r0, [pc, #176]	@ (8003898 <MX_GPIO_Init+0x218>)
 80037e8:	f002 f83c 	bl	8005864 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80037ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80037f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f2:	2302      	movs	r3, #2
 80037f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f6:	2300      	movs	r3, #0
 80037f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037fa:	2303      	movs	r3, #3
 80037fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80037fe:	230b      	movs	r3, #11
 8003800:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003802:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003806:	4619      	mov	r1, r3
 8003808:	4824      	ldr	r0, [pc, #144]	@ (800389c <MX_GPIO_Init+0x21c>)
 800380a:	f002 f82b 	bl	8005864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG3 USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|USB_OverCurrent_Pin;
 800380e:	238c      	movs	r3, #140	@ 0x8c
 8003810:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003812:	2300      	movs	r3, #0
 8003814:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003816:	2300      	movs	r3, #0
 8003818:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800381a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800381e:	4619      	mov	r1, r3
 8003820:	481d      	ldr	r0, [pc, #116]	@ (8003898 <MX_GPIO_Init+0x218>)
 8003822:	f002 f81f 	bl	8005864 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003826:	2380      	movs	r3, #128	@ 0x80
 8003828:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800382a:	2301      	movs	r3, #1
 800382c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382e:	2300      	movs	r3, #0
 8003830:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003832:	2300      	movs	r3, #0
 8003834:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003836:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800383a:	4619      	mov	r1, r3
 800383c:	4817      	ldr	r0, [pc, #92]	@ (800389c <MX_GPIO_Init+0x21c>)
 800383e:	f002 f811 	bl	8005864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003842:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003846:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003848:	2302      	movs	r3, #2
 800384a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384c:	2300      	movs	r3, #0
 800384e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003850:	2300      	movs	r3, #0
 8003852:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8003854:	2303      	movs	r3, #3
 8003856:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800385c:	4619      	mov	r1, r3
 800385e:	480f      	ldr	r0, [pc, #60]	@ (800389c <MX_GPIO_Init+0x21c>)
 8003860:	f002 f800 	bl	8005864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003864:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003868:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800386a:	2302      	movs	r3, #2
 800386c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386e:	2300      	movs	r3, #0
 8003870:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003872:	2300      	movs	r3, #0
 8003874:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003876:	2303      	movs	r3, #3
 8003878:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800387a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800387e:	4619      	mov	r1, r3
 8003880:	4806      	ldr	r0, [pc, #24]	@ (800389c <MX_GPIO_Init+0x21c>)
 8003882:	f001 ffef 	bl	8005864 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003886:	bf00      	nop
 8003888:	3738      	adds	r7, #56	@ 0x38
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40023800 	.word	0x40023800
 8003894:	40021400 	.word	0x40021400
 8003898:	40021800 	.word	0x40021800
 800389c:	40020400 	.word	0x40020400
 80038a0:	40020800 	.word	0x40020800

080038a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038a8:	b672      	cpsid	i
}
 80038aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038ac:	bf00      	nop
 80038ae:	e7fd      	b.n	80038ac <Error_Handler+0x8>

080038b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80038b6:	4b0f      	ldr	r3, [pc, #60]	@ (80038f4 <HAL_MspInit+0x44>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ba:	4a0e      	ldr	r2, [pc, #56]	@ (80038f4 <HAL_MspInit+0x44>)
 80038bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80038c2:	4b0c      	ldr	r3, [pc, #48]	@ (80038f4 <HAL_MspInit+0x44>)
 80038c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ca:	607b      	str	r3, [r7, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ce:	4b09      	ldr	r3, [pc, #36]	@ (80038f4 <HAL_MspInit+0x44>)
 80038d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d2:	4a08      	ldr	r2, [pc, #32]	@ (80038f4 <HAL_MspInit+0x44>)
 80038d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80038da:	4b06      	ldr	r3, [pc, #24]	@ (80038f4 <HAL_MspInit+0x44>)
 80038dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038e2:	603b      	str	r3, [r7, #0]
 80038e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	40023800 	.word	0x40023800

080038f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08c      	sub	sp, #48	@ 0x30
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003900:	f107 031c 	add.w	r3, r7, #28
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	609a      	str	r2, [r3, #8]
 800390c:	60da      	str	r2, [r3, #12]
 800390e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a43      	ldr	r2, [pc, #268]	@ (8003a24 <HAL_ADC_MspInit+0x12c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d124      	bne.n	8003964 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800391a:	4b43      	ldr	r3, [pc, #268]	@ (8003a28 <HAL_ADC_MspInit+0x130>)
 800391c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391e:	4a42      	ldr	r2, [pc, #264]	@ (8003a28 <HAL_ADC_MspInit+0x130>)
 8003920:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003924:	6453      	str	r3, [r2, #68]	@ 0x44
 8003926:	4b40      	ldr	r3, [pc, #256]	@ (8003a28 <HAL_ADC_MspInit+0x130>)
 8003928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800392a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800392e:	61bb      	str	r3, [r7, #24]
 8003930:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003932:	4b3d      	ldr	r3, [pc, #244]	@ (8003a28 <HAL_ADC_MspInit+0x130>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003936:	4a3c      	ldr	r2, [pc, #240]	@ (8003a28 <HAL_ADC_MspInit+0x130>)
 8003938:	f043 0304 	orr.w	r3, r3, #4
 800393c:	6313      	str	r3, [r2, #48]	@ 0x30
 800393e:	4b3a      	ldr	r3, [pc, #232]	@ (8003a28 <HAL_ADC_MspInit+0x130>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003942:	f003 0304 	and.w	r3, r3, #4
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800394a:	230d      	movs	r3, #13
 800394c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800394e:	2303      	movs	r3, #3
 8003950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003952:	2300      	movs	r3, #0
 8003954:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003956:	f107 031c 	add.w	r3, r7, #28
 800395a:	4619      	mov	r1, r3
 800395c:	4833      	ldr	r0, [pc, #204]	@ (8003a2c <HAL_ADC_MspInit+0x134>)
 800395e:	f001 ff81 	bl	8005864 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003962:	e05a      	b.n	8003a1a <HAL_ADC_MspInit+0x122>
  else if(hadc->Instance==ADC3)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a31      	ldr	r2, [pc, #196]	@ (8003a30 <HAL_ADC_MspInit+0x138>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d155      	bne.n	8003a1a <HAL_ADC_MspInit+0x122>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800396e:	4b2e      	ldr	r3, [pc, #184]	@ (8003a28 <HAL_ADC_MspInit+0x130>)
 8003970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003972:	4a2d      	ldr	r2, [pc, #180]	@ (8003a28 <HAL_ADC_MspInit+0x130>)
 8003974:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003978:	6453      	str	r3, [r2, #68]	@ 0x44
 800397a:	4b2b      	ldr	r3, [pc, #172]	@ (8003a28 <HAL_ADC_MspInit+0x130>)
 800397c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800397e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003982:	613b      	str	r3, [r7, #16]
 8003984:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003986:	4b28      	ldr	r3, [pc, #160]	@ (8003a28 <HAL_ADC_MspInit+0x130>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398a:	4a27      	ldr	r2, [pc, #156]	@ (8003a28 <HAL_ADC_MspInit+0x130>)
 800398c:	f043 0320 	orr.w	r3, r3, #32
 8003990:	6313      	str	r3, [r2, #48]	@ 0x30
 8003992:	4b25      	ldr	r3, [pc, #148]	@ (8003a28 <HAL_ADC_MspInit+0x130>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003996:	f003 0320 	and.w	r3, r3, #32
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8
 800399e:	f44f 63f6 	mov.w	r3, #1968	@ 0x7b0
 80039a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039a4:	2303      	movs	r3, #3
 80039a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a8:	2300      	movs	r3, #0
 80039aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80039ac:	f107 031c 	add.w	r3, r7, #28
 80039b0:	4619      	mov	r1, r3
 80039b2:	4820      	ldr	r0, [pc, #128]	@ (8003a34 <HAL_ADC_MspInit+0x13c>)
 80039b4:	f001 ff56 	bl	8005864 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 80039b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003a38 <HAL_ADC_MspInit+0x140>)
 80039ba:	4a20      	ldr	r2, [pc, #128]	@ (8003a3c <HAL_ADC_MspInit+0x144>)
 80039bc:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80039be:	4b1e      	ldr	r3, [pc, #120]	@ (8003a38 <HAL_ADC_MspInit+0x140>)
 80039c0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80039c4:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039c6:	4b1c      	ldr	r3, [pc, #112]	@ (8003a38 <HAL_ADC_MspInit+0x140>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80039cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003a38 <HAL_ADC_MspInit+0x140>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80039d2:	4b19      	ldr	r3, [pc, #100]	@ (8003a38 <HAL_ADC_MspInit+0x140>)
 80039d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039d8:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80039da:	4b17      	ldr	r3, [pc, #92]	@ (8003a38 <HAL_ADC_MspInit+0x140>)
 80039dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80039e0:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80039e2:	4b15      	ldr	r3, [pc, #84]	@ (8003a38 <HAL_ADC_MspInit+0x140>)
 80039e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039e8:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80039ea:	4b13      	ldr	r3, [pc, #76]	@ (8003a38 <HAL_ADC_MspInit+0x140>)
 80039ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039f0:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80039f2:	4b11      	ldr	r3, [pc, #68]	@ (8003a38 <HAL_ADC_MspInit+0x140>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003a38 <HAL_ADC_MspInit+0x140>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80039fe:	480e      	ldr	r0, [pc, #56]	@ (8003a38 <HAL_ADC_MspInit+0x140>)
 8003a00:	f001 fbb8 	bl	8005174 <HAL_DMA_Init>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <HAL_ADC_MspInit+0x116>
      Error_Handler();
 8003a0a:	f7ff ff4b 	bl	80038a4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a09      	ldr	r2, [pc, #36]	@ (8003a38 <HAL_ADC_MspInit+0x140>)
 8003a12:	639a      	str	r2, [r3, #56]	@ 0x38
 8003a14:	4a08      	ldr	r2, [pc, #32]	@ (8003a38 <HAL_ADC_MspInit+0x140>)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003a1a:	bf00      	nop
 8003a1c:	3730      	adds	r7, #48	@ 0x30
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40012000 	.word	0x40012000
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	40020800 	.word	0x40020800
 8003a30:	40012200 	.word	0x40012200
 8003a34:	40021400 	.word	0x40021400
 8003a38:	20000234 	.word	0x20000234
 8003a3c:	40026410 	.word	0x40026410

08003a40 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08a      	sub	sp, #40	@ 0x28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a48:	f107 0314 	add.w	r3, r7, #20
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	605a      	str	r2, [r3, #4]
 8003a52:	609a      	str	r2, [r3, #8]
 8003a54:	60da      	str	r2, [r3, #12]
 8003a56:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a17      	ldr	r2, [pc, #92]	@ (8003abc <HAL_CAN_MspInit+0x7c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d127      	bne.n	8003ab2 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003a62:	4b17      	ldr	r3, [pc, #92]	@ (8003ac0 <HAL_CAN_MspInit+0x80>)
 8003a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a66:	4a16      	ldr	r2, [pc, #88]	@ (8003ac0 <HAL_CAN_MspInit+0x80>)
 8003a68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a6e:	4b14      	ldr	r3, [pc, #80]	@ (8003ac0 <HAL_CAN_MspInit+0x80>)
 8003a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a76:	613b      	str	r3, [r7, #16]
 8003a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a7a:	4b11      	ldr	r3, [pc, #68]	@ (8003ac0 <HAL_CAN_MspInit+0x80>)
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a7e:	4a10      	ldr	r2, [pc, #64]	@ (8003ac0 <HAL_CAN_MspInit+0x80>)
 8003a80:	f043 0308 	orr.w	r3, r3, #8
 8003a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a86:	4b0e      	ldr	r3, [pc, #56]	@ (8003ac0 <HAL_CAN_MspInit+0x80>)
 8003a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003a92:	2303      	movs	r3, #3
 8003a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a96:	2302      	movs	r3, #2
 8003a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003aa2:	2309      	movs	r3, #9
 8003aa4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003aa6:	f107 0314 	add.w	r3, r7, #20
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4805      	ldr	r0, [pc, #20]	@ (8003ac4 <HAL_CAN_MspInit+0x84>)
 8003aae:	f001 fed9 	bl	8005864 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003ab2:	bf00      	nop
 8003ab4:	3728      	adds	r7, #40	@ 0x28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40006400 	.word	0x40006400
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	40020c00 	.word	0x40020c00

08003ac8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b08a      	sub	sp, #40	@ 0x28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ad0:	f107 0314 	add.w	r3, r7, #20
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]
 8003ad8:	605a      	str	r2, [r3, #4]
 8003ada:	609a      	str	r2, [r3, #8]
 8003adc:	60da      	str	r2, [r3, #12]
 8003ade:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a15      	ldr	r2, [pc, #84]	@ (8003b3c <HAL_DAC_MspInit+0x74>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d123      	bne.n	8003b32 <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003aea:	4b15      	ldr	r3, [pc, #84]	@ (8003b40 <HAL_DAC_MspInit+0x78>)
 8003aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aee:	4a14      	ldr	r2, [pc, #80]	@ (8003b40 <HAL_DAC_MspInit+0x78>)
 8003af0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003af6:	4b12      	ldr	r3, [pc, #72]	@ (8003b40 <HAL_DAC_MspInit+0x78>)
 8003af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b02:	4b0f      	ldr	r3, [pc, #60]	@ (8003b40 <HAL_DAC_MspInit+0x78>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b06:	4a0e      	ldr	r2, [pc, #56]	@ (8003b40 <HAL_DAC_MspInit+0x78>)
 8003b08:	f043 0301 	orr.w	r3, r3, #1
 8003b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8003b40 <HAL_DAC_MspInit+0x78>)
 8003b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003b1a:	2330      	movs	r3, #48	@ 0x30
 8003b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b26:	f107 0314 	add.w	r3, r7, #20
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4805      	ldr	r0, [pc, #20]	@ (8003b44 <HAL_DAC_MspInit+0x7c>)
 8003b2e:	f001 fe99 	bl	8005864 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003b32:	bf00      	nop
 8003b34:	3728      	adds	r7, #40	@ 0x28
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40007400 	.word	0x40007400
 8003b40:	40023800 	.word	0x40023800
 8003b44:	40020000 	.word	0x40020000

08003b48 <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b0aa      	sub	sp, #168	@ 0xa8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b50:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	605a      	str	r2, [r3, #4]
 8003b5a:	609a      	str	r2, [r3, #8]
 8003b5c:	60da      	str	r2, [r3, #12]
 8003b5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b60:	f107 0310 	add.w	r3, r7, #16
 8003b64:	2284      	movs	r2, #132	@ 0x84
 8003b66:	2100      	movs	r1, #0
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f00b fc09 	bl	800f380 <memset>
  if(hsmbus->Instance==I2C2)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a21      	ldr	r2, [pc, #132]	@ (8003bf8 <HAL_SMBUS_MspInit+0xb0>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d13b      	bne.n	8003bf0 <HAL_SMBUS_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003b78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b7c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b82:	f107 0310 	add.w	r3, r7, #16
 8003b86:	4618      	mov	r0, r3
 8003b88:	f004 f814 	bl	8007bb4 <HAL_RCCEx_PeriphCLKConfig>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_SMBUS_MspInit+0x4e>
    {
      Error_Handler();
 8003b92:	f7ff fe87 	bl	80038a4 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b96:	4b19      	ldr	r3, [pc, #100]	@ (8003bfc <HAL_SMBUS_MspInit+0xb4>)
 8003b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9a:	4a18      	ldr	r2, [pc, #96]	@ (8003bfc <HAL_SMBUS_MspInit+0xb4>)
 8003b9c:	f043 0320 	orr.w	r3, r3, #32
 8003ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ba2:	4b16      	ldr	r3, [pc, #88]	@ (8003bfc <HAL_SMBUS_MspInit+0xb4>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba6:	f003 0320 	and.w	r3, r3, #32
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    PF2     ------> I2C2_SMBA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003bae:	2307      	movs	r3, #7
 8003bb0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003bb4:	2312      	movs	r3, #18
 8003bb6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003bc6:	2304      	movs	r3, #4
 8003bc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003bcc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	480b      	ldr	r0, [pc, #44]	@ (8003c00 <HAL_SMBUS_MspInit+0xb8>)
 8003bd4:	f001 fe46 	bl	8005864 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003bd8:	4b08      	ldr	r3, [pc, #32]	@ (8003bfc <HAL_SMBUS_MspInit+0xb4>)
 8003bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bdc:	4a07      	ldr	r2, [pc, #28]	@ (8003bfc <HAL_SMBUS_MspInit+0xb4>)
 8003bde:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003be2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003be4:	4b05      	ldr	r3, [pc, #20]	@ (8003bfc <HAL_SMBUS_MspInit+0xb4>)
 8003be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bec:	60bb      	str	r3, [r7, #8]
 8003bee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003bf0:	bf00      	nop
 8003bf2:	37a8      	adds	r7, #168	@ 0xa8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40005800 	.word	0x40005800
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	40021400 	.word	0x40021400

08003c04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08e      	sub	sp, #56	@ 0x38
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	605a      	str	r2, [r3, #4]
 8003c16:	609a      	str	r2, [r3, #8]
 8003c18:	60da      	str	r2, [r3, #12]
 8003c1a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a40      	ldr	r2, [pc, #256]	@ (8003d24 <HAL_TIM_Base_MspInit+0x120>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d10c      	bne.n	8003c40 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c26:	4b40      	ldr	r3, [pc, #256]	@ (8003d28 <HAL_TIM_Base_MspInit+0x124>)
 8003c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2a:	4a3f      	ldr	r2, [pc, #252]	@ (8003d28 <HAL_TIM_Base_MspInit+0x124>)
 8003c2c:	f043 0301 	orr.w	r3, r3, #1
 8003c30:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c32:	4b3d      	ldr	r3, [pc, #244]	@ (8003d28 <HAL_TIM_Base_MspInit+0x124>)
 8003c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	623b      	str	r3, [r7, #32]
 8003c3c:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003c3e:	e06d      	b.n	8003d1c <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM2)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c48:	d10c      	bne.n	8003c64 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c4a:	4b37      	ldr	r3, [pc, #220]	@ (8003d28 <HAL_TIM_Base_MspInit+0x124>)
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4e:	4a36      	ldr	r2, [pc, #216]	@ (8003d28 <HAL_TIM_Base_MspInit+0x124>)
 8003c50:	f043 0301 	orr.w	r3, r3, #1
 8003c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c56:	4b34      	ldr	r3, [pc, #208]	@ (8003d28 <HAL_TIM_Base_MspInit+0x124>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	61fb      	str	r3, [r7, #28]
 8003c60:	69fb      	ldr	r3, [r7, #28]
}
 8003c62:	e05b      	b.n	8003d1c <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM5)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a30      	ldr	r2, [pc, #192]	@ (8003d2c <HAL_TIM_Base_MspInit+0x128>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d128      	bne.n	8003cc0 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003c6e:	4b2e      	ldr	r3, [pc, #184]	@ (8003d28 <HAL_TIM_Base_MspInit+0x124>)
 8003c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c72:	4a2d      	ldr	r2, [pc, #180]	@ (8003d28 <HAL_TIM_Base_MspInit+0x124>)
 8003c74:	f043 0308 	orr.w	r3, r3, #8
 8003c78:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c7a:	4b2b      	ldr	r3, [pc, #172]	@ (8003d28 <HAL_TIM_Base_MspInit+0x124>)
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7e:	f003 0308 	and.w	r3, r3, #8
 8003c82:	61bb      	str	r3, [r7, #24]
 8003c84:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c86:	4b28      	ldr	r3, [pc, #160]	@ (8003d28 <HAL_TIM_Base_MspInit+0x124>)
 8003c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8a:	4a27      	ldr	r2, [pc, #156]	@ (8003d28 <HAL_TIM_Base_MspInit+0x124>)
 8003c8c:	f043 0301 	orr.w	r3, r3, #1
 8003c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c92:	4b25      	ldr	r3, [pc, #148]	@ (8003d28 <HAL_TIM_Base_MspInit+0x124>)
 8003c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003c9e:	2308      	movs	r3, #8
 8003ca0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003caa:	2300      	movs	r3, #0
 8003cac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003cae:	2302      	movs	r3, #2
 8003cb0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	481d      	ldr	r0, [pc, #116]	@ (8003d30 <HAL_TIM_Base_MspInit+0x12c>)
 8003cba:	f001 fdd3 	bl	8005864 <HAL_GPIO_Init>
}
 8003cbe:	e02d      	b.n	8003d1c <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM12)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8003d34 <HAL_TIM_Base_MspInit+0x130>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d128      	bne.n	8003d1c <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003cca:	4b17      	ldr	r3, [pc, #92]	@ (8003d28 <HAL_TIM_Base_MspInit+0x124>)
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cce:	4a16      	ldr	r2, [pc, #88]	@ (8003d28 <HAL_TIM_Base_MspInit+0x124>)
 8003cd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cd6:	4b14      	ldr	r3, [pc, #80]	@ (8003d28 <HAL_TIM_Base_MspInit+0x124>)
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cde:	613b      	str	r3, [r7, #16]
 8003ce0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ce2:	4b11      	ldr	r3, [pc, #68]	@ (8003d28 <HAL_TIM_Base_MspInit+0x124>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce6:	4a10      	ldr	r2, [pc, #64]	@ (8003d28 <HAL_TIM_Base_MspInit+0x124>)
 8003ce8:	f043 0302 	orr.w	r3, r3, #2
 8003cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cee:	4b0e      	ldr	r3, [pc, #56]	@ (8003d28 <HAL_TIM_Base_MspInit+0x124>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003cfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cfe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d00:	2302      	movs	r3, #2
 8003d02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d04:	2300      	movs	r3, #0
 8003d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003d0c:	2309      	movs	r3, #9
 8003d0e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d14:	4619      	mov	r1, r3
 8003d16:	4808      	ldr	r0, [pc, #32]	@ (8003d38 <HAL_TIM_Base_MspInit+0x134>)
 8003d18:	f001 fda4 	bl	8005864 <HAL_GPIO_Init>
}
 8003d1c:	bf00      	nop
 8003d1e:	3738      	adds	r7, #56	@ 0x38
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40010000 	.word	0x40010000
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	40000c00 	.word	0x40000c00
 8003d30:	40020000 	.word	0x40020000
 8003d34:	40001800 	.word	0x40001800
 8003d38:	40020400 	.word	0x40020400

08003d3c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08c      	sub	sp, #48	@ 0x30
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d44:	f107 031c 	add.w	r3, r7, #28
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	605a      	str	r2, [r3, #4]
 8003d4e:	609a      	str	r2, [r3, #8]
 8003d50:	60da      	str	r2, [r3, #12]
 8003d52:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a2e      	ldr	r2, [pc, #184]	@ (8003e14 <HAL_TIM_Encoder_MspInit+0xd8>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d128      	bne.n	8003db0 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d5e:	4b2e      	ldr	r3, [pc, #184]	@ (8003e18 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d62:	4a2d      	ldr	r2, [pc, #180]	@ (8003e18 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003d64:	f043 0302 	orr.w	r3, r3, #2
 8003d68:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d6a:	4b2b      	ldr	r3, [pc, #172]	@ (8003e18 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	61bb      	str	r3, [r7, #24]
 8003d74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d76:	4b28      	ldr	r3, [pc, #160]	@ (8003e18 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7a:	4a27      	ldr	r2, [pc, #156]	@ (8003e18 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003d7c:	f043 0302 	orr.w	r3, r3, #2
 8003d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d82:	4b25      	ldr	r3, [pc, #148]	@ (8003e18 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003d8e:	2330      	movs	r3, #48	@ 0x30
 8003d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d92:	2302      	movs	r3, #2
 8003d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d96:	2300      	movs	r3, #0
 8003d98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003d9e:	2302      	movs	r3, #2
 8003da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003da2:	f107 031c 	add.w	r3, r7, #28
 8003da6:	4619      	mov	r1, r3
 8003da8:	481c      	ldr	r0, [pc, #112]	@ (8003e1c <HAL_TIM_Encoder_MspInit+0xe0>)
 8003daa:	f001 fd5b 	bl	8005864 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003dae:	e02d      	b.n	8003e0c <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a1a      	ldr	r2, [pc, #104]	@ (8003e20 <HAL_TIM_Encoder_MspInit+0xe4>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d128      	bne.n	8003e0c <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003dba:	4b17      	ldr	r3, [pc, #92]	@ (8003e18 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dbe:	4a16      	ldr	r2, [pc, #88]	@ (8003e18 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003dc0:	f043 0304 	orr.w	r3, r3, #4
 8003dc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dc6:	4b14      	ldr	r3, [pc, #80]	@ (8003e18 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	613b      	str	r3, [r7, #16]
 8003dd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003dd2:	4b11      	ldr	r3, [pc, #68]	@ (8003e18 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd6:	4a10      	ldr	r2, [pc, #64]	@ (8003e18 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003dd8:	f043 0308 	orr.w	r3, r3, #8
 8003ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dde:	4b0e      	ldr	r3, [pc, #56]	@ (8003e18 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003dea:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df0:	2302      	movs	r3, #2
 8003df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df4:	2300      	movs	r3, #0
 8003df6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e00:	f107 031c 	add.w	r3, r7, #28
 8003e04:	4619      	mov	r1, r3
 8003e06:	4807      	ldr	r0, [pc, #28]	@ (8003e24 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003e08:	f001 fd2c 	bl	8005864 <HAL_GPIO_Init>
}
 8003e0c:	bf00      	nop
 8003e0e:	3730      	adds	r7, #48	@ 0x30
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40000400 	.word	0x40000400
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	40020400 	.word	0x40020400
 8003e20:	40000800 	.word	0x40000800
 8003e24:	40020c00 	.word	0x40020c00

08003e28 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM8)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a0a      	ldr	r2, [pc, #40]	@ (8003e60 <HAL_TIM_OC_MspInit+0x38>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d10b      	bne.n	8003e52 <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e64 <HAL_TIM_OC_MspInit+0x3c>)
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3e:	4a09      	ldr	r2, [pc, #36]	@ (8003e64 <HAL_TIM_OC_MspInit+0x3c>)
 8003e40:	f043 0302 	orr.w	r3, r3, #2
 8003e44:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e46:	4b07      	ldr	r3, [pc, #28]	@ (8003e64 <HAL_TIM_OC_MspInit+0x3c>)
 8003e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003e52:	bf00      	nop
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	40010400 	.word	0x40010400
 8003e64:	40023800 	.word	0x40023800

08003e68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b08c      	sub	sp, #48	@ 0x30
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e70:	f107 031c 	add.w	r3, r7, #28
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	605a      	str	r2, [r3, #4]
 8003e7a:	609a      	str	r2, [r3, #8]
 8003e7c:	60da      	str	r2, [r3, #12]
 8003e7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a50      	ldr	r2, [pc, #320]	@ (8003fc8 <HAL_TIM_MspPostInit+0x160>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d11d      	bne.n	8003ec6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e8a:	4b50      	ldr	r3, [pc, #320]	@ (8003fcc <HAL_TIM_MspPostInit+0x164>)
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8e:	4a4f      	ldr	r2, [pc, #316]	@ (8003fcc <HAL_TIM_MspPostInit+0x164>)
 8003e90:	f043 0310 	orr.w	r3, r3, #16
 8003e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e96:	4b4d      	ldr	r3, [pc, #308]	@ (8003fcc <HAL_TIM_MspPostInit+0x164>)
 8003e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9a:	f003 0310 	and.w	r3, r3, #16
 8003e9e:	61bb      	str	r3, [r7, #24]
 8003ea0:	69bb      	ldr	r3, [r7, #24]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003ea2:	f44f 537c 	mov.w	r3, #16128	@ 0x3f00
 8003ea6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eac:	2300      	movs	r3, #0
 8003eae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003eb8:	f107 031c 	add.w	r3, r7, #28
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4844      	ldr	r0, [pc, #272]	@ (8003fd0 <HAL_TIM_MspPostInit+0x168>)
 8003ec0:	f001 fcd0 	bl	8005864 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003ec4:	e07b      	b.n	8003fbe <HAL_TIM_MspPostInit+0x156>
  else if(htim->Instance==TIM5)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a42      	ldr	r2, [pc, #264]	@ (8003fd4 <HAL_TIM_MspPostInit+0x16c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d11c      	bne.n	8003f0a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ed0:	4b3e      	ldr	r3, [pc, #248]	@ (8003fcc <HAL_TIM_MspPostInit+0x164>)
 8003ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed4:	4a3d      	ldr	r2, [pc, #244]	@ (8003fcc <HAL_TIM_MspPostInit+0x164>)
 8003ed6:	f043 0301 	orr.w	r3, r3, #1
 8003eda:	6313      	str	r3, [r2, #48]	@ 0x30
 8003edc:	4b3b      	ldr	r3, [pc, #236]	@ (8003fcc <HAL_TIM_MspPostInit+0x164>)
 8003ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	617b      	str	r3, [r7, #20]
 8003ee6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Laser_trigger_Pin;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eec:	2302      	movs	r3, #2
 8003eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003ef8:	2302      	movs	r3, #2
 8003efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Laser_trigger_GPIO_Port, &GPIO_InitStruct);
 8003efc:	f107 031c 	add.w	r3, r7, #28
 8003f00:	4619      	mov	r1, r3
 8003f02:	4835      	ldr	r0, [pc, #212]	@ (8003fd8 <HAL_TIM_MspPostInit+0x170>)
 8003f04:	f001 fcae 	bl	8005864 <HAL_GPIO_Init>
}
 8003f08:	e059      	b.n	8003fbe <HAL_TIM_MspPostInit+0x156>
  else if(htim->Instance==TIM8)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a33      	ldr	r2, [pc, #204]	@ (8003fdc <HAL_TIM_MspPostInit+0x174>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d154      	bne.n	8003fbe <HAL_TIM_MspPostInit+0x156>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f14:	4b2d      	ldr	r3, [pc, #180]	@ (8003fcc <HAL_TIM_MspPostInit+0x164>)
 8003f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f18:	4a2c      	ldr	r2, [pc, #176]	@ (8003fcc <HAL_TIM_MspPostInit+0x164>)
 8003f1a:	f043 0301 	orr.w	r3, r3, #1
 8003f1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f20:	4b2a      	ldr	r3, [pc, #168]	@ (8003fcc <HAL_TIM_MspPostInit+0x164>)
 8003f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	613b      	str	r3, [r7, #16]
 8003f2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f2c:	4b27      	ldr	r3, [pc, #156]	@ (8003fcc <HAL_TIM_MspPostInit+0x164>)
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f30:	4a26      	ldr	r2, [pc, #152]	@ (8003fcc <HAL_TIM_MspPostInit+0x164>)
 8003f32:	f043 0302 	orr.w	r3, r3, #2
 8003f36:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f38:	4b24      	ldr	r3, [pc, #144]	@ (8003fcc <HAL_TIM_MspPostInit+0x164>)
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f44:	4b21      	ldr	r3, [pc, #132]	@ (8003fcc <HAL_TIM_MspPostInit+0x164>)
 8003f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f48:	4a20      	ldr	r2, [pc, #128]	@ (8003fcc <HAL_TIM_MspPostInit+0x164>)
 8003f4a:	f043 0304 	orr.w	r3, r3, #4
 8003f4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f50:	4b1e      	ldr	r3, [pc, #120]	@ (8003fcc <HAL_TIM_MspPostInit+0x164>)
 8003f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	60bb      	str	r3, [r7, #8]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003f5c:	2380      	movs	r3, #128	@ 0x80
 8003f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f60:	2302      	movs	r3, #2
 8003f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f64:	2301      	movs	r3, #1
 8003f66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f70:	f107 031c 	add.w	r3, r7, #28
 8003f74:	4619      	mov	r1, r3
 8003f76:	4818      	ldr	r0, [pc, #96]	@ (8003fd8 <HAL_TIM_MspPostInit+0x170>)
 8003f78:	f001 fc74 	bl	8005864 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f80:	2302      	movs	r3, #2
 8003f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f84:	2300      	movs	r3, #0
 8003f86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f90:	f107 031c 	add.w	r3, r7, #28
 8003f94:	4619      	mov	r1, r3
 8003f96:	4812      	ldr	r0, [pc, #72]	@ (8003fe0 <HAL_TIM_MspPostInit+0x178>)
 8003f98:	f001 fc64 	bl	8005864 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8003f9c:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8003fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003faa:	2300      	movs	r3, #0
 8003fac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fb2:	f107 031c 	add.w	r3, r7, #28
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	480a      	ldr	r0, [pc, #40]	@ (8003fe4 <HAL_TIM_MspPostInit+0x17c>)
 8003fba:	f001 fc53 	bl	8005864 <HAL_GPIO_Init>
}
 8003fbe:	bf00      	nop
 8003fc0:	3730      	adds	r7, #48	@ 0x30
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40010000 	.word	0x40010000
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	40000c00 	.word	0x40000c00
 8003fd8:	40020000 	.word	0x40020000
 8003fdc:	40010400 	.word	0x40010400
 8003fe0:	40020400 	.word	0x40020400
 8003fe4:	40020800 	.word	0x40020800

08003fe8 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b0aa      	sub	sp, #168	@ 0xa8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ff0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	605a      	str	r2, [r3, #4]
 8003ffa:	609a      	str	r2, [r3, #8]
 8003ffc:	60da      	str	r2, [r3, #12]
 8003ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004000:	f107 0310 	add.w	r3, r7, #16
 8004004:	2284      	movs	r2, #132	@ 0x84
 8004006:	2100      	movs	r1, #0
 8004008:	4618      	mov	r0, r3
 800400a:	f00b f9b9 	bl	800f380 <memset>
  if(husart->Instance==USART2)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a21      	ldr	r2, [pc, #132]	@ (8004098 <HAL_USART_MspInit+0xb0>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d13a      	bne.n	800408e <HAL_USART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004018:	2380      	movs	r3, #128	@ 0x80
 800401a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800401c:	2300      	movs	r3, #0
 800401e:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004020:	f107 0310 	add.w	r3, r7, #16
 8004024:	4618      	mov	r0, r3
 8004026:	f003 fdc5 	bl	8007bb4 <HAL_RCCEx_PeriphCLKConfig>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 8004030:	f7ff fc38 	bl	80038a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004034:	4b19      	ldr	r3, [pc, #100]	@ (800409c <HAL_USART_MspInit+0xb4>)
 8004036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004038:	4a18      	ldr	r2, [pc, #96]	@ (800409c <HAL_USART_MspInit+0xb4>)
 800403a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800403e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004040:	4b16      	ldr	r3, [pc, #88]	@ (800409c <HAL_USART_MspInit+0xb4>)
 8004042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800404c:	4b13      	ldr	r3, [pc, #76]	@ (800409c <HAL_USART_MspInit+0xb4>)
 800404e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004050:	4a12      	ldr	r2, [pc, #72]	@ (800409c <HAL_USART_MspInit+0xb4>)
 8004052:	f043 0308 	orr.w	r3, r3, #8
 8004056:	6313      	str	r3, [r2, #48]	@ 0x30
 8004058:	4b10      	ldr	r3, [pc, #64]	@ (800409c <HAL_USART_MspInit+0xb4>)
 800405a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405c:	f003 0308 	and.w	r3, r3, #8
 8004060:	60bb      	str	r3, [r7, #8]
 8004062:	68bb      	ldr	r3, [r7, #8]
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    PD7     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8004064:	23f8      	movs	r3, #248	@ 0xf8
 8004066:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800406a:	2302      	movs	r3, #2
 800406c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004070:	2300      	movs	r3, #0
 8004072:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004076:	2303      	movs	r3, #3
 8004078:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800407c:	2307      	movs	r3, #7
 800407e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004082:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004086:	4619      	mov	r1, r3
 8004088:	4805      	ldr	r0, [pc, #20]	@ (80040a0 <HAL_USART_MspInit+0xb8>)
 800408a:	f001 fbeb 	bl	8005864 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800408e:	bf00      	nop
 8004090:	37a8      	adds	r7, #168	@ 0xa8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	40004400 	.word	0x40004400
 800409c:	40023800 	.word	0x40023800
 80040a0:	40020c00 	.word	0x40020c00

080040a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b0aa      	sub	sp, #168	@ 0xa8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040ac:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	605a      	str	r2, [r3, #4]
 80040b6:	609a      	str	r2, [r3, #8]
 80040b8:	60da      	str	r2, [r3, #12]
 80040ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80040bc:	f107 0310 	add.w	r3, r7, #16
 80040c0:	2284      	movs	r2, #132	@ 0x84
 80040c2:	2100      	movs	r1, #0
 80040c4:	4618      	mov	r0, r3
 80040c6:	f00b f95b 	bl	800f380 <memset>
  if(huart->Instance==USART3)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a22      	ldr	r2, [pc, #136]	@ (8004158 <HAL_UART_MspInit+0xb4>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d13c      	bne.n	800414e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80040d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040d8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80040da:	2300      	movs	r3, #0
 80040dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040de:	f107 0310 	add.w	r3, r7, #16
 80040e2:	4618      	mov	r0, r3
 80040e4:	f003 fd66 	bl	8007bb4 <HAL_RCCEx_PeriphCLKConfig>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80040ee:	f7ff fbd9 	bl	80038a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80040f2:	4b1a      	ldr	r3, [pc, #104]	@ (800415c <HAL_UART_MspInit+0xb8>)
 80040f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f6:	4a19      	ldr	r2, [pc, #100]	@ (800415c <HAL_UART_MspInit+0xb8>)
 80040f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80040fe:	4b17      	ldr	r3, [pc, #92]	@ (800415c <HAL_UART_MspInit+0xb8>)
 8004100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004102:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800410a:	4b14      	ldr	r3, [pc, #80]	@ (800415c <HAL_UART_MspInit+0xb8>)
 800410c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410e:	4a13      	ldr	r2, [pc, #76]	@ (800415c <HAL_UART_MspInit+0xb8>)
 8004110:	f043 0308 	orr.w	r3, r3, #8
 8004114:	6313      	str	r3, [r2, #48]	@ 0x30
 8004116:	4b11      	ldr	r3, [pc, #68]	@ (800415c <HAL_UART_MspInit+0xb8>)
 8004118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411a:	f003 0308 	and.w	r3, r3, #8
 800411e:	60bb      	str	r3, [r7, #8]
 8004120:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004122:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004126:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800412a:	2302      	movs	r3, #2
 800412c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004130:	2301      	movs	r3, #1
 8004132:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004136:	2303      	movs	r3, #3
 8004138:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800413c:	2307      	movs	r3, #7
 800413e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004142:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004146:	4619      	mov	r1, r3
 8004148:	4805      	ldr	r0, [pc, #20]	@ (8004160 <HAL_UART_MspInit+0xbc>)
 800414a:	f001 fb8b 	bl	8005864 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800414e:	bf00      	nop
 8004150:	37a8      	adds	r7, #168	@ 0xa8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	40004800 	.word	0x40004800
 800415c:	40023800 	.word	0x40023800
 8004160:	40020c00 	.word	0x40020c00

08004164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004168:	bf00      	nop
 800416a:	e7fd      	b.n	8004168 <NMI_Handler+0x4>

0800416c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004170:	bf00      	nop
 8004172:	e7fd      	b.n	8004170 <HardFault_Handler+0x4>

08004174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004178:	bf00      	nop
 800417a:	e7fd      	b.n	8004178 <MemManage_Handler+0x4>

0800417c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004180:	bf00      	nop
 8004182:	e7fd      	b.n	8004180 <BusFault_Handler+0x4>

08004184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004188:	bf00      	nop
 800418a:	e7fd      	b.n	8004188 <UsageFault_Handler+0x4>

0800418c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004190:	bf00      	nop
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800419a:	b480      	push	{r7}
 800419c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800419e:	bf00      	nop
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041ac:	bf00      	nop
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041ba:	f000 f8c5 	bl	8004348 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041be:	bf00      	nop
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80041c8:	4802      	ldr	r0, [pc, #8]	@ (80041d4 <DMA2_Stream0_IRQHandler+0x10>)
 80041ca:	f001 f8e1 	bl	8005390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80041ce:	bf00      	nop
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20000234 	.word	0x20000234

080041d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80041dc:	4802      	ldr	r0, [pc, #8]	@ (80041e8 <OTG_FS_IRQHandler+0x10>)
 80041de:	f001 fe4c 	bl	8005e7a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80041e2:	bf00      	nop
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	20001be4 	.word	0x20001be4

080041ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041f4:	4a14      	ldr	r2, [pc, #80]	@ (8004248 <_sbrk+0x5c>)
 80041f6:	4b15      	ldr	r3, [pc, #84]	@ (800424c <_sbrk+0x60>)
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004200:	4b13      	ldr	r3, [pc, #76]	@ (8004250 <_sbrk+0x64>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d102      	bne.n	800420e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004208:	4b11      	ldr	r3, [pc, #68]	@ (8004250 <_sbrk+0x64>)
 800420a:	4a12      	ldr	r2, [pc, #72]	@ (8004254 <_sbrk+0x68>)
 800420c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800420e:	4b10      	ldr	r3, [pc, #64]	@ (8004250 <_sbrk+0x64>)
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4413      	add	r3, r2
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	429a      	cmp	r2, r3
 800421a:	d207      	bcs.n	800422c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800421c:	f00b f8c8 	bl	800f3b0 <__errno>
 8004220:	4603      	mov	r3, r0
 8004222:	220c      	movs	r2, #12
 8004224:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004226:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800422a:	e009      	b.n	8004240 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800422c:	4b08      	ldr	r3, [pc, #32]	@ (8004250 <_sbrk+0x64>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004232:	4b07      	ldr	r3, [pc, #28]	@ (8004250 <_sbrk+0x64>)
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4413      	add	r3, r2
 800423a:	4a05      	ldr	r2, [pc, #20]	@ (8004250 <_sbrk+0x64>)
 800423c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800423e:	68fb      	ldr	r3, [r7, #12]
}
 8004240:	4618      	mov	r0, r3
 8004242:	3718      	adds	r7, #24
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	20050000 	.word	0x20050000
 800424c:	00000400 	.word	0x00000400
 8004250:	200006fc 	.word	0x200006fc
 8004254:	20002238 	.word	0x20002238

08004258 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800425c:	4b06      	ldr	r3, [pc, #24]	@ (8004278 <SystemInit+0x20>)
 800425e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004262:	4a05      	ldr	r2, [pc, #20]	@ (8004278 <SystemInit+0x20>)
 8004264:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004268:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800426c:	bf00      	nop
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	e000ed00 	.word	0xe000ed00

0800427c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800427c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80042b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004280:	480d      	ldr	r0, [pc, #52]	@ (80042b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004282:	490e      	ldr	r1, [pc, #56]	@ (80042bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004284:	4a0e      	ldr	r2, [pc, #56]	@ (80042c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004288:	e002      	b.n	8004290 <LoopCopyDataInit>

0800428a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800428a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800428c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800428e:	3304      	adds	r3, #4

08004290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004294:	d3f9      	bcc.n	800428a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004296:	4a0b      	ldr	r2, [pc, #44]	@ (80042c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004298:	4c0b      	ldr	r4, [pc, #44]	@ (80042c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800429a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800429c:	e001      	b.n	80042a2 <LoopFillZerobss>

0800429e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800429e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042a0:	3204      	adds	r2, #4

080042a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042a4:	d3fb      	bcc.n	800429e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80042a6:	f7ff ffd7 	bl	8004258 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80042aa:	f00b f887 	bl	800f3bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042ae:	f7fd f967 	bl	8001580 <main>
  bx  lr    
 80042b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80042b4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80042b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042bc:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 80042c0:	08011940 	.word	0x08011940
  ldr r2, =_sbss
 80042c4:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 80042c8:	20002234 	.word	0x20002234

080042cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042cc:	e7fe      	b.n	80042cc <ADC_IRQHandler>

080042ce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042d2:	2003      	movs	r0, #3
 80042d4:	f000 fe76 	bl	8004fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042d8:	2000      	movs	r0, #0
 80042da:	f000 f805 	bl	80042e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042de:	f7ff fae7 	bl	80038b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80042f0:	4b12      	ldr	r3, [pc, #72]	@ (800433c <HAL_InitTick+0x54>)
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	4b12      	ldr	r3, [pc, #72]	@ (8004340 <HAL_InitTick+0x58>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	4619      	mov	r1, r3
 80042fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80042fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004302:	fbb2 f3f3 	udiv	r3, r2, r3
 8004306:	4618      	mov	r0, r3
 8004308:	f000 fe91 	bl	800502e <HAL_SYSTICK_Config>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e00e      	b.n	8004334 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b0f      	cmp	r3, #15
 800431a:	d80a      	bhi.n	8004332 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800431c:	2200      	movs	r2, #0
 800431e:	6879      	ldr	r1, [r7, #4]
 8004320:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004324:	f000 fe59 	bl	8004fda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004328:	4a06      	ldr	r2, [pc, #24]	@ (8004344 <HAL_InitTick+0x5c>)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800432e:	2300      	movs	r3, #0
 8004330:	e000      	b.n	8004334 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
}
 8004334:	4618      	mov	r0, r3
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	2000002c 	.word	0x2000002c
 8004340:	20000034 	.word	0x20000034
 8004344:	20000030 	.word	0x20000030

08004348 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800434c:	4b06      	ldr	r3, [pc, #24]	@ (8004368 <HAL_IncTick+0x20>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	461a      	mov	r2, r3
 8004352:	4b06      	ldr	r3, [pc, #24]	@ (800436c <HAL_IncTick+0x24>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4413      	add	r3, r2
 8004358:	4a04      	ldr	r2, [pc, #16]	@ (800436c <HAL_IncTick+0x24>)
 800435a:	6013      	str	r3, [r2, #0]
}
 800435c:	bf00      	nop
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	20000034 	.word	0x20000034
 800436c:	20000700 	.word	0x20000700

08004370 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0
  return uwTick;
 8004374:	4b03      	ldr	r3, [pc, #12]	@ (8004384 <HAL_GetTick+0x14>)
 8004376:	681b      	ldr	r3, [r3, #0]
}
 8004378:	4618      	mov	r0, r3
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	20000700 	.word	0x20000700

08004388 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004390:	f7ff ffee 	bl	8004370 <HAL_GetTick>
 8004394:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043a0:	d005      	beq.n	80043ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043a2:	4b0a      	ldr	r3, [pc, #40]	@ (80043cc <HAL_Delay+0x44>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	461a      	mov	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4413      	add	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80043ae:	bf00      	nop
 80043b0:	f7ff ffde 	bl	8004370 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d8f7      	bhi.n	80043b0 <HAL_Delay+0x28>
  {
  }
}
 80043c0:	bf00      	nop
 80043c2:	bf00      	nop
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	20000034 	.word	0x20000034

080043d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043d8:	2300      	movs	r3, #0
 80043da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e031      	b.n	800444a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d109      	bne.n	8004402 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7ff fa82 	bl	80038f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004406:	f003 0310 	and.w	r3, r3, #16
 800440a:	2b00      	cmp	r3, #0
 800440c:	d116      	bne.n	800443c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004412:	4b10      	ldr	r3, [pc, #64]	@ (8004454 <HAL_ADC_Init+0x84>)
 8004414:	4013      	ands	r3, r2
 8004416:	f043 0202 	orr.w	r2, r3, #2
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 fa88 	bl	8004934 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442e:	f023 0303 	bic.w	r3, r3, #3
 8004432:	f043 0201 	orr.w	r2, r3, #1
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	641a      	str	r2, [r3, #64]	@ 0x40
 800443a:	e001      	b.n	8004440 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004448:	7bfb      	ldrb	r3, [r7, #15]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	ffffeefd 	.word	0xffffeefd

08004458 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8004464:	2300      	movs	r3, #0
 8004466:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800446e:	2b01      	cmp	r3, #1
 8004470:	d101      	bne.n	8004476 <HAL_ADC_Start_DMA+0x1e>
 8004472:	2302      	movs	r3, #2
 8004474:	e0d4      	b.n	8004620 <HAL_ADC_Start_DMA+0x1c8>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b01      	cmp	r3, #1
 800448a:	d018      	beq.n	80044be <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689a      	ldr	r2, [r3, #8]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 0201 	orr.w	r2, r2, #1
 800449a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800449c:	4b62      	ldr	r3, [pc, #392]	@ (8004628 <HAL_ADC_Start_DMA+0x1d0>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a62      	ldr	r2, [pc, #392]	@ (800462c <HAL_ADC_Start_DMA+0x1d4>)
 80044a2:	fba2 2303 	umull	r2, r3, r2, r3
 80044a6:	0c9a      	lsrs	r2, r3, #18
 80044a8:	4613      	mov	r3, r2
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	4413      	add	r3, r2
 80044ae:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80044b0:	e002      	b.n	80044b8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	3b01      	subs	r3, #1
 80044b6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1f9      	bne.n	80044b2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	f040 809c 	bne.w	8004606 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044d2:	4b57      	ldr	r3, [pc, #348]	@ (8004630 <HAL_ADC_Start_DMA+0x1d8>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d007      	beq.n	80044fc <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80044f4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004500:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004504:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004508:	d106      	bne.n	8004518 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800450e:	f023 0206 	bic.w	r2, r3, #6
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	645a      	str	r2, [r3, #68]	@ 0x44
 8004516:	e002      	b.n	800451e <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800452a:	4a42      	ldr	r2, [pc, #264]	@ (8004634 <HAL_ADC_Start_DMA+0x1dc>)
 800452c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004532:	4a41      	ldr	r2, [pc, #260]	@ (8004638 <HAL_ADC_Start_DMA+0x1e0>)
 8004534:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800453a:	4a40      	ldr	r2, [pc, #256]	@ (800463c <HAL_ADC_Start_DMA+0x1e4>)
 800453c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004546:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004556:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689a      	ldr	r2, [r3, #8]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004566:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	334c      	adds	r3, #76	@ 0x4c
 8004572:	4619      	mov	r1, r3
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f000 feaa 	bl	80052d0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800457c:	4b30      	ldr	r3, [pc, #192]	@ (8004640 <HAL_ADC_Start_DMA+0x1e8>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f003 031f 	and.w	r3, r3, #31
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10f      	bne.n	80045a8 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d143      	bne.n	800461e <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80045a4:	609a      	str	r2, [r3, #8]
 80045a6:	e03a      	b.n	800461e <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a25      	ldr	r2, [pc, #148]	@ (8004644 <HAL_ADC_Start_DMA+0x1ec>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d10e      	bne.n	80045d0 <HAL_ADC_Start_DMA+0x178>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d107      	bne.n	80045d0 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80045ce:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80045d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004640 <HAL_ADC_Start_DMA+0x1e8>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f003 0310 	and.w	r3, r3, #16
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d120      	bne.n	800461e <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a19      	ldr	r2, [pc, #100]	@ (8004648 <HAL_ADC_Start_DMA+0x1f0>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d11b      	bne.n	800461e <HAL_ADC_Start_DMA+0x1c6>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d114      	bne.n	800461e <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004602:	609a      	str	r2, [r3, #8]
 8004604:	e00b      	b.n	800461e <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460a:	f043 0210 	orr.w	r2, r3, #16
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004616:	f043 0201 	orr.w	r2, r3, #1
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	2000002c 	.word	0x2000002c
 800462c:	431bde83 	.word	0x431bde83
 8004630:	fffff8fe 	.word	0xfffff8fe
 8004634:	08004b29 	.word	0x08004b29
 8004638:	08004be3 	.word	0x08004be3
 800463c:	08004bff 	.word	0x08004bff
 8004640:	40012300 	.word	0x40012300
 8004644:	40012000 	.word	0x40012000
 8004648:	40012200 	.word	0x40012200

0800464c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004692:	2300      	movs	r3, #0
 8004694:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_ADC_ConfigChannel+0x1c>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e136      	b.n	8004912 <HAL_ADC_ConfigChannel+0x28a>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b09      	cmp	r3, #9
 80046b2:	d93a      	bls.n	800472a <HAL_ADC_ConfigChannel+0xa2>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046bc:	d035      	beq.n	800472a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68d9      	ldr	r1, [r3, #12]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	461a      	mov	r2, r3
 80046cc:	4613      	mov	r3, r2
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	4413      	add	r3, r2
 80046d2:	3b1e      	subs	r3, #30
 80046d4:	2207      	movs	r2, #7
 80046d6:	fa02 f303 	lsl.w	r3, r2, r3
 80046da:	43da      	mvns	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	400a      	ands	r2, r1
 80046e2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a8d      	ldr	r2, [pc, #564]	@ (8004920 <HAL_ADC_ConfigChannel+0x298>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d10a      	bne.n	8004704 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68d9      	ldr	r1, [r3, #12]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	061a      	lsls	r2, r3, #24
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004702:	e035      	b.n	8004770 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68d9      	ldr	r1, [r3, #12]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	689a      	ldr	r2, [r3, #8]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	b29b      	uxth	r3, r3
 8004714:	4618      	mov	r0, r3
 8004716:	4603      	mov	r3, r0
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	4403      	add	r3, r0
 800471c:	3b1e      	subs	r3, #30
 800471e:	409a      	lsls	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004728:	e022      	b.n	8004770 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6919      	ldr	r1, [r3, #16]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	b29b      	uxth	r3, r3
 8004736:	461a      	mov	r2, r3
 8004738:	4613      	mov	r3, r2
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	4413      	add	r3, r2
 800473e:	2207      	movs	r2, #7
 8004740:	fa02 f303 	lsl.w	r3, r2, r3
 8004744:	43da      	mvns	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	400a      	ands	r2, r1
 800474c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6919      	ldr	r1, [r3, #16]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	b29b      	uxth	r3, r3
 800475e:	4618      	mov	r0, r3
 8004760:	4603      	mov	r3, r0
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	4403      	add	r3, r0
 8004766:	409a      	lsls	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	430a      	orrs	r2, r1
 800476e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2b06      	cmp	r3, #6
 8004776:	d824      	bhi.n	80047c2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	4613      	mov	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	3b05      	subs	r3, #5
 800478a:	221f      	movs	r2, #31
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	43da      	mvns	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	400a      	ands	r2, r1
 8004798:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	4618      	mov	r0, r3
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	4613      	mov	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	3b05      	subs	r3, #5
 80047b4:	fa00 f203 	lsl.w	r2, r0, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	635a      	str	r2, [r3, #52]	@ 0x34
 80047c0:	e04c      	b.n	800485c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	2b0c      	cmp	r3, #12
 80047c8:	d824      	bhi.n	8004814 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	4613      	mov	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	3b23      	subs	r3, #35	@ 0x23
 80047dc:	221f      	movs	r2, #31
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	43da      	mvns	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	400a      	ands	r2, r1
 80047ea:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	4618      	mov	r0, r3
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	4613      	mov	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	3b23      	subs	r3, #35	@ 0x23
 8004806:	fa00 f203 	lsl.w	r2, r0, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	631a      	str	r2, [r3, #48]	@ 0x30
 8004812:	e023      	b.n	800485c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	4613      	mov	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	3b41      	subs	r3, #65	@ 0x41
 8004826:	221f      	movs	r2, #31
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	43da      	mvns	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	400a      	ands	r2, r1
 8004834:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	b29b      	uxth	r3, r3
 8004842:	4618      	mov	r0, r3
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	4613      	mov	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	3b41      	subs	r3, #65	@ 0x41
 8004850:	fa00 f203 	lsl.w	r2, r0, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a30      	ldr	r2, [pc, #192]	@ (8004924 <HAL_ADC_ConfigChannel+0x29c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d10a      	bne.n	800487c <HAL_ADC_ConfigChannel+0x1f4>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800486e:	d105      	bne.n	800487c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004870:	4b2d      	ldr	r3, [pc, #180]	@ (8004928 <HAL_ADC_ConfigChannel+0x2a0>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	4a2c      	ldr	r2, [pc, #176]	@ (8004928 <HAL_ADC_ConfigChannel+0x2a0>)
 8004876:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800487a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a28      	ldr	r2, [pc, #160]	@ (8004924 <HAL_ADC_ConfigChannel+0x29c>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d10f      	bne.n	80048a6 <HAL_ADC_ConfigChannel+0x21e>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2b12      	cmp	r3, #18
 800488c:	d10b      	bne.n	80048a6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800488e:	4b26      	ldr	r3, [pc, #152]	@ (8004928 <HAL_ADC_ConfigChannel+0x2a0>)
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	4a25      	ldr	r2, [pc, #148]	@ (8004928 <HAL_ADC_ConfigChannel+0x2a0>)
 8004894:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004898:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800489a:	4b23      	ldr	r3, [pc, #140]	@ (8004928 <HAL_ADC_ConfigChannel+0x2a0>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	4a22      	ldr	r2, [pc, #136]	@ (8004928 <HAL_ADC_ConfigChannel+0x2a0>)
 80048a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80048a4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004924 <HAL_ADC_ConfigChannel+0x29c>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d12b      	bne.n	8004908 <HAL_ADC_ConfigChannel+0x280>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a1a      	ldr	r2, [pc, #104]	@ (8004920 <HAL_ADC_ConfigChannel+0x298>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d003      	beq.n	80048c2 <HAL_ADC_ConfigChannel+0x23a>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b11      	cmp	r3, #17
 80048c0:	d122      	bne.n	8004908 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80048c2:	4b19      	ldr	r3, [pc, #100]	@ (8004928 <HAL_ADC_ConfigChannel+0x2a0>)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	4a18      	ldr	r2, [pc, #96]	@ (8004928 <HAL_ADC_ConfigChannel+0x2a0>)
 80048c8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80048cc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80048ce:	4b16      	ldr	r3, [pc, #88]	@ (8004928 <HAL_ADC_ConfigChannel+0x2a0>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	4a15      	ldr	r2, [pc, #84]	@ (8004928 <HAL_ADC_ConfigChannel+0x2a0>)
 80048d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80048d8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a10      	ldr	r2, [pc, #64]	@ (8004920 <HAL_ADC_ConfigChannel+0x298>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d111      	bne.n	8004908 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80048e4:	4b11      	ldr	r3, [pc, #68]	@ (800492c <HAL_ADC_ConfigChannel+0x2a4>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a11      	ldr	r2, [pc, #68]	@ (8004930 <HAL_ADC_ConfigChannel+0x2a8>)
 80048ea:	fba2 2303 	umull	r2, r3, r2, r3
 80048ee:	0c9a      	lsrs	r2, r3, #18
 80048f0:	4613      	mov	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80048fa:	e002      	b.n	8004902 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	3b01      	subs	r3, #1
 8004900:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1f9      	bne.n	80048fc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	10000012 	.word	0x10000012
 8004924:	40012000 	.word	0x40012000
 8004928:	40012300 	.word	0x40012300
 800492c:	2000002c 	.word	0x2000002c
 8004930:	431bde83 	.word	0x431bde83

08004934 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800493c:	4b78      	ldr	r3, [pc, #480]	@ (8004b20 <ADC_Init+0x1ec>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	4a77      	ldr	r2, [pc, #476]	@ (8004b20 <ADC_Init+0x1ec>)
 8004942:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8004946:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004948:	4b75      	ldr	r3, [pc, #468]	@ (8004b20 <ADC_Init+0x1ec>)
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	4973      	ldr	r1, [pc, #460]	@ (8004b20 <ADC_Init+0x1ec>)
 8004952:	4313      	orrs	r3, r2
 8004954:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004964:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6859      	ldr	r1, [r3, #4]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	021a      	lsls	r2, r3, #8
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004988:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6859      	ldr	r1, [r3, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689a      	ldr	r2, [r3, #8]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6899      	ldr	r1, [r3, #8]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68da      	ldr	r2, [r3, #12]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c2:	4a58      	ldr	r2, [pc, #352]	@ (8004b24 <ADC_Init+0x1f0>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d022      	beq.n	8004a0e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689a      	ldr	r2, [r3, #8]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80049d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6899      	ldr	r1, [r3, #8]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80049f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	6899      	ldr	r1, [r3, #8]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	609a      	str	r2, [r3, #8]
 8004a0c:	e00f      	b.n	8004a2e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004a1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004a2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0202 	bic.w	r2, r2, #2
 8004a3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	6899      	ldr	r1, [r3, #8]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	005a      	lsls	r2, r3, #1
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d01b      	beq.n	8004a94 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a6a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004a7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6859      	ldr	r1, [r3, #4]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a86:	3b01      	subs	r3, #1
 8004a88:	035a      	lsls	r2, r3, #13
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	605a      	str	r2, [r3, #4]
 8004a92:	e007      	b.n	8004aa4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004aa2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004ab2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	051a      	lsls	r2, r3, #20
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004ad8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6899      	ldr	r1, [r3, #8]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004ae6:	025a      	lsls	r2, r3, #9
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689a      	ldr	r2, [r3, #8]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004afe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6899      	ldr	r1, [r3, #8]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	029a      	lsls	r2, r3, #10
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	609a      	str	r2, [r3, #8]
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	40012300 	.word	0x40012300
 8004b24:	0f000001 	.word	0x0f000001

08004b28 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b34:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d13c      	bne.n	8004bbc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b46:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d12b      	bne.n	8004bb4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d127      	bne.n	8004bb4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b6a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d006      	beq.n	8004b80 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d119      	bne.n	8004bb4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0220 	bic.w	r2, r2, #32
 8004b8e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d105      	bne.n	8004bb4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bac:	f043 0201 	orr.w	r2, r3, #1
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f7ff fd49 	bl	800464c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004bba:	e00e      	b.n	8004bda <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc0:	f003 0310 	and.w	r3, r3, #16
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d003      	beq.n	8004bd0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f7ff fd53 	bl	8004674 <HAL_ADC_ErrorCallback>
}
 8004bce:	e004      	b.n	8004bda <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	4798      	blx	r3
}
 8004bda:	bf00      	nop
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b084      	sub	sp, #16
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bee:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f7ff fd35 	bl	8004660 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004bf6:	bf00      	nop
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b084      	sub	sp, #16
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c0a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2240      	movs	r2, #64	@ 0x40
 8004c10:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c16:	f043 0204 	orr.w	r2, r3, #4
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f7ff fd28 	bl	8004674 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c24:	bf00      	nop
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e0ed      	b.n	8004e1a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d102      	bne.n	8004c50 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7fe fef8 	bl	8003a40 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0201 	orr.w	r2, r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c60:	f7ff fb86 	bl	8004370 <HAL_GetTick>
 8004c64:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004c66:	e012      	b.n	8004c8e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004c68:	f7ff fb82 	bl	8004370 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b0a      	cmp	r3, #10
 8004c74:	d90b      	bls.n	8004c8e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2205      	movs	r2, #5
 8004c86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e0c5      	b.n	8004e1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0e5      	beq.n	8004c68 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0202 	bic.w	r2, r2, #2
 8004caa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cac:	f7ff fb60 	bl	8004370 <HAL_GetTick>
 8004cb0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004cb2:	e012      	b.n	8004cda <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004cb4:	f7ff fb5c 	bl	8004370 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b0a      	cmp	r3, #10
 8004cc0:	d90b      	bls.n	8004cda <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2205      	movs	r2, #5
 8004cd2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e09f      	b.n	8004e1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1e5      	bne.n	8004cb4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	7e1b      	ldrb	r3, [r3, #24]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d108      	bne.n	8004d02 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	e007      	b.n	8004d12 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	7e5b      	ldrb	r3, [r3, #25]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d108      	bne.n	8004d2c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	e007      	b.n	8004d3c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	7e9b      	ldrb	r3, [r3, #26]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d108      	bne.n	8004d56 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0220 	orr.w	r2, r2, #32
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	e007      	b.n	8004d66 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 0220 	bic.w	r2, r2, #32
 8004d64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	7edb      	ldrb	r3, [r3, #27]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d108      	bne.n	8004d80 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 0210 	bic.w	r2, r2, #16
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	e007      	b.n	8004d90 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0210 	orr.w	r2, r2, #16
 8004d8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	7f1b      	ldrb	r3, [r3, #28]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d108      	bne.n	8004daa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 0208 	orr.w	r2, r2, #8
 8004da6:	601a      	str	r2, [r3, #0]
 8004da8:	e007      	b.n	8004dba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0208 	bic.w	r2, r2, #8
 8004db8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	7f5b      	ldrb	r3, [r3, #29]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d108      	bne.n	8004dd4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f042 0204 	orr.w	r2, r2, #4
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	e007      	b.n	8004de4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0204 	bic.w	r2, r2, #4
 8004de2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	431a      	orrs	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	ea42 0103 	orr.w	r1, r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	1e5a      	subs	r2, r3, #1
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
	...

08004e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f003 0307 	and.w	r3, r3, #7
 8004e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e34:	4b0b      	ldr	r3, [pc, #44]	@ (8004e64 <__NVIC_SetPriorityGrouping+0x40>)
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004e40:	4013      	ands	r3, r2
 8004e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004e4c:	4b06      	ldr	r3, [pc, #24]	@ (8004e68 <__NVIC_SetPriorityGrouping+0x44>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e52:	4a04      	ldr	r2, [pc, #16]	@ (8004e64 <__NVIC_SetPriorityGrouping+0x40>)
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	60d3      	str	r3, [r2, #12]
}
 8004e58:	bf00      	nop
 8004e5a:	3714      	adds	r7, #20
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	e000ed00 	.word	0xe000ed00
 8004e68:	05fa0000 	.word	0x05fa0000

08004e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e70:	4b04      	ldr	r3, [pc, #16]	@ (8004e84 <__NVIC_GetPriorityGrouping+0x18>)
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	0a1b      	lsrs	r3, r3, #8
 8004e76:	f003 0307 	and.w	r3, r3, #7
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	e000ed00 	.word	0xe000ed00

08004e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	4603      	mov	r3, r0
 8004e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	db0b      	blt.n	8004eb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e9a:	79fb      	ldrb	r3, [r7, #7]
 8004e9c:	f003 021f 	and.w	r2, r3, #31
 8004ea0:	4907      	ldr	r1, [pc, #28]	@ (8004ec0 <__NVIC_EnableIRQ+0x38>)
 8004ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	2001      	movs	r0, #1
 8004eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8004eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004eb2:	bf00      	nop
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	e000e100 	.word	0xe000e100

08004ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	4603      	mov	r3, r0
 8004ecc:	6039      	str	r1, [r7, #0]
 8004ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	db0a      	blt.n	8004eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	490c      	ldr	r1, [pc, #48]	@ (8004f10 <__NVIC_SetPriority+0x4c>)
 8004ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ee2:	0112      	lsls	r2, r2, #4
 8004ee4:	b2d2      	uxtb	r2, r2
 8004ee6:	440b      	add	r3, r1
 8004ee8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004eec:	e00a      	b.n	8004f04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	4908      	ldr	r1, [pc, #32]	@ (8004f14 <__NVIC_SetPriority+0x50>)
 8004ef4:	79fb      	ldrb	r3, [r7, #7]
 8004ef6:	f003 030f 	and.w	r3, r3, #15
 8004efa:	3b04      	subs	r3, #4
 8004efc:	0112      	lsls	r2, r2, #4
 8004efe:	b2d2      	uxtb	r2, r2
 8004f00:	440b      	add	r3, r1
 8004f02:	761a      	strb	r2, [r3, #24]
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	e000e100 	.word	0xe000e100
 8004f14:	e000ed00 	.word	0xe000ed00

08004f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b089      	sub	sp, #36	@ 0x24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f003 0307 	and.w	r3, r3, #7
 8004f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	f1c3 0307 	rsb	r3, r3, #7
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	bf28      	it	cs
 8004f36:	2304      	movcs	r3, #4
 8004f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	2b06      	cmp	r3, #6
 8004f40:	d902      	bls.n	8004f48 <NVIC_EncodePriority+0x30>
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	3b03      	subs	r3, #3
 8004f46:	e000      	b.n	8004f4a <NVIC_EncodePriority+0x32>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	fa02 f303 	lsl.w	r3, r2, r3
 8004f56:	43da      	mvns	r2, r3
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	401a      	ands	r2, r3
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f60:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	fa01 f303 	lsl.w	r3, r1, r3
 8004f6a:	43d9      	mvns	r1, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f70:	4313      	orrs	r3, r2
         );
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3724      	adds	r7, #36	@ 0x24
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
	...

08004f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f90:	d301      	bcc.n	8004f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f92:	2301      	movs	r3, #1
 8004f94:	e00f      	b.n	8004fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f96:	4a0a      	ldr	r2, [pc, #40]	@ (8004fc0 <SysTick_Config+0x40>)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f9e:	210f      	movs	r1, #15
 8004fa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004fa4:	f7ff ff8e 	bl	8004ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fa8:	4b05      	ldr	r3, [pc, #20]	@ (8004fc0 <SysTick_Config+0x40>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fae:	4b04      	ldr	r3, [pc, #16]	@ (8004fc0 <SysTick_Config+0x40>)
 8004fb0:	2207      	movs	r2, #7
 8004fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	e000e010 	.word	0xe000e010

08004fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7ff ff29 	bl	8004e24 <__NVIC_SetPriorityGrouping>
}
 8004fd2:	bf00      	nop
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b086      	sub	sp, #24
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	60b9      	str	r1, [r7, #8]
 8004fe4:	607a      	str	r2, [r7, #4]
 8004fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004fec:	f7ff ff3e 	bl	8004e6c <__NVIC_GetPriorityGrouping>
 8004ff0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	68b9      	ldr	r1, [r7, #8]
 8004ff6:	6978      	ldr	r0, [r7, #20]
 8004ff8:	f7ff ff8e 	bl	8004f18 <NVIC_EncodePriority>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005002:	4611      	mov	r1, r2
 8005004:	4618      	mov	r0, r3
 8005006:	f7ff ff5d 	bl	8004ec4 <__NVIC_SetPriority>
}
 800500a:	bf00      	nop
 800500c:	3718      	adds	r7, #24
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b082      	sub	sp, #8
 8005016:	af00      	add	r7, sp, #0
 8005018:	4603      	mov	r3, r0
 800501a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800501c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005020:	4618      	mov	r0, r3
 8005022:	f7ff ff31 	bl	8004e88 <__NVIC_EnableIRQ>
}
 8005026:	bf00      	nop
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b082      	sub	sp, #8
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff ffa2 	bl	8004f80 <SysTick_Config>
 800503c:	4603      	mov	r3, r0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b082      	sub	sp, #8
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e014      	b.n	8005082 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	791b      	ldrb	r3, [r3, #4]
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d105      	bne.n	800506e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7fe fd2d 	bl	8003ac8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2202      	movs	r2, #2
 8005072:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800508a:	b480      	push	{r7}
 800508c:	b087      	sub	sp, #28
 800508e:	af00      	add	r7, sp, #0
 8005090:	60f8      	str	r0, [r7, #12]
 8005092:	60b9      	str	r1, [r7, #8]
 8005094:	607a      	str	r2, [r7, #4]
 8005096:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005098:	2300      	movs	r3, #0
 800509a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d105      	bne.n	80050b4 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4413      	add	r3, r2
 80050ae:	3308      	adds	r3, #8
 80050b0:	617b      	str	r3, [r7, #20]
 80050b2:	e004      	b.n	80050be <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4413      	add	r3, r2
 80050ba:	3314      	adds	r3, #20
 80050bc:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	461a      	mov	r2, r3
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	371c      	adds	r7, #28
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	795b      	ldrb	r3, [r3, #5]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d101      	bne.n	80050ec <HAL_DAC_ConfigChannel+0x18>
 80050e8:	2302      	movs	r3, #2
 80050ea:	e03c      	b.n	8005166 <HAL_DAC_ConfigChannel+0x92>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2201      	movs	r2, #1
 80050f0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2202      	movs	r2, #2
 80050f6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f003 0310 	and.w	r3, r3, #16
 8005106:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800510a:	fa02 f303 	lsl.w	r3, r2, r3
 800510e:	43db      	mvns	r3, r3
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	4013      	ands	r3, r2
 8005114:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	4313      	orrs	r3, r2
 8005120:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f003 0310 	and.w	r3, r3, #16
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	fa02 f303 	lsl.w	r3, r2, r3
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	4313      	orrs	r3, r2
 8005132:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6819      	ldr	r1, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f003 0310 	and.w	r3, r3, #16
 8005148:	22c0      	movs	r2, #192	@ 0xc0
 800514a:	fa02 f303 	lsl.w	r3, r2, r3
 800514e:	43da      	mvns	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	400a      	ands	r2, r1
 8005156:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2201      	movs	r2, #1
 800515c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	371c      	adds	r7, #28
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
	...

08005174 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800517c:	2300      	movs	r3, #0
 800517e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005180:	f7ff f8f6 	bl	8004370 <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e099      	b.n	80052c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f022 0201 	bic.w	r2, r2, #1
 80051ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051b0:	e00f      	b.n	80051d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051b2:	f7ff f8dd 	bl	8004370 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	2b05      	cmp	r3, #5
 80051be:	d908      	bls.n	80051d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2220      	movs	r2, #32
 80051c4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2203      	movs	r2, #3
 80051ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e078      	b.n	80052c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1e8      	bne.n	80051b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	4b38      	ldr	r3, [pc, #224]	@ (80052cc <HAL_DMA_Init+0x158>)
 80051ec:	4013      	ands	r3, r2
 80051ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800520a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005216:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	4313      	orrs	r3, r2
 8005222:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005228:	2b04      	cmp	r3, #4
 800522a:	d107      	bne.n	800523c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005234:	4313      	orrs	r3, r2
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	4313      	orrs	r3, r2
 800523a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f023 0307 	bic.w	r3, r3, #7
 8005252:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	4313      	orrs	r3, r2
 800525c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005262:	2b04      	cmp	r3, #4
 8005264:	d117      	bne.n	8005296 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	4313      	orrs	r3, r2
 800526e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00e      	beq.n	8005296 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 fa77 	bl	800576c <DMA_CheckFifoParam>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d008      	beq.n	8005296 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2240      	movs	r2, #64	@ 0x40
 8005288:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005292:	2301      	movs	r3, #1
 8005294:	e016      	b.n	80052c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 fa2e 	bl	8005700 <DMA_CalcBaseAndBitshift>
 80052a4:	4603      	mov	r3, r0
 80052a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052ac:	223f      	movs	r2, #63	@ 0x3f
 80052ae:	409a      	lsls	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3718      	adds	r7, #24
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	f010803f 	.word	0xf010803f

080052d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
 80052dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052de:	2300      	movs	r3, #0
 80052e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d101      	bne.n	80052f6 <HAL_DMA_Start_IT+0x26>
 80052f2:	2302      	movs	r3, #2
 80052f4:	e048      	b.n	8005388 <HAL_DMA_Start_IT+0xb8>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b01      	cmp	r3, #1
 8005308:	d137      	bne.n	800537a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2202      	movs	r2, #2
 800530e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	68b9      	ldr	r1, [r7, #8]
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 f9c0 	bl	80056a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005328:	223f      	movs	r2, #63	@ 0x3f
 800532a:	409a      	lsls	r2, r3
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 0216 	orr.w	r2, r2, #22
 800533e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695a      	ldr	r2, [r3, #20]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800534e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005354:	2b00      	cmp	r3, #0
 8005356:	d007      	beq.n	8005368 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f042 0208 	orr.w	r2, r2, #8
 8005366:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f042 0201 	orr.w	r2, r2, #1
 8005376:	601a      	str	r2, [r3, #0]
 8005378:	e005      	b.n	8005386 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005382:	2302      	movs	r3, #2
 8005384:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005386:	7dfb      	ldrb	r3, [r7, #23]
}
 8005388:	4618      	mov	r0, r3
 800538a:	3718      	adds	r7, #24
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005398:	2300      	movs	r3, #0
 800539a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800539c:	4b8e      	ldr	r3, [pc, #568]	@ (80055d8 <HAL_DMA_IRQHandler+0x248>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a8e      	ldr	r2, [pc, #568]	@ (80055dc <HAL_DMA_IRQHandler+0x24c>)
 80053a2:	fba2 2303 	umull	r2, r3, r2, r3
 80053a6:	0a9b      	lsrs	r3, r3, #10
 80053a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053ba:	2208      	movs	r2, #8
 80053bc:	409a      	lsls	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	4013      	ands	r3, r2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d01a      	beq.n	80053fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0304 	and.w	r3, r3, #4
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d013      	beq.n	80053fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f022 0204 	bic.w	r2, r2, #4
 80053e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053e8:	2208      	movs	r2, #8
 80053ea:	409a      	lsls	r2, r3
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053f4:	f043 0201 	orr.w	r2, r3, #1
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005400:	2201      	movs	r2, #1
 8005402:	409a      	lsls	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4013      	ands	r3, r2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d012      	beq.n	8005432 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00b      	beq.n	8005432 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800541e:	2201      	movs	r2, #1
 8005420:	409a      	lsls	r2, r3
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800542a:	f043 0202 	orr.w	r2, r3, #2
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005436:	2204      	movs	r2, #4
 8005438:	409a      	lsls	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	4013      	ands	r3, r2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d012      	beq.n	8005468 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00b      	beq.n	8005468 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005454:	2204      	movs	r2, #4
 8005456:	409a      	lsls	r2, r3
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005460:	f043 0204 	orr.w	r2, r3, #4
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800546c:	2210      	movs	r2, #16
 800546e:	409a      	lsls	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4013      	ands	r3, r2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d043      	beq.n	8005500 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0308 	and.w	r3, r3, #8
 8005482:	2b00      	cmp	r3, #0
 8005484:	d03c      	beq.n	8005500 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800548a:	2210      	movs	r2, #16
 800548c:	409a      	lsls	r2, r3
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d018      	beq.n	80054d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d108      	bne.n	80054c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d024      	beq.n	8005500 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	4798      	blx	r3
 80054be:	e01f      	b.n	8005500 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d01b      	beq.n	8005500 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	4798      	blx	r3
 80054d0:	e016      	b.n	8005500 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d107      	bne.n	80054f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 0208 	bic.w	r2, r2, #8
 80054ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d003      	beq.n	8005500 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005504:	2220      	movs	r2, #32
 8005506:	409a      	lsls	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4013      	ands	r3, r2
 800550c:	2b00      	cmp	r3, #0
 800550e:	f000 808f 	beq.w	8005630 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0310 	and.w	r3, r3, #16
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 8087 	beq.w	8005630 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005526:	2220      	movs	r2, #32
 8005528:	409a      	lsls	r2, r3
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b05      	cmp	r3, #5
 8005538:	d136      	bne.n	80055a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f022 0216 	bic.w	r2, r2, #22
 8005548:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	695a      	ldr	r2, [r3, #20]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005558:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555e:	2b00      	cmp	r3, #0
 8005560:	d103      	bne.n	800556a <HAL_DMA_IRQHandler+0x1da>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005566:	2b00      	cmp	r3, #0
 8005568:	d007      	beq.n	800557a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f022 0208 	bic.w	r2, r2, #8
 8005578:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800557e:	223f      	movs	r2, #63	@ 0x3f
 8005580:	409a      	lsls	r2, r3
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800559a:	2b00      	cmp	r3, #0
 800559c:	d07e      	beq.n	800569c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	4798      	blx	r3
        }
        return;
 80055a6:	e079      	b.n	800569c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d01d      	beq.n	80055f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10d      	bne.n	80055e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d031      	beq.n	8005630 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	4798      	blx	r3
 80055d4:	e02c      	b.n	8005630 <HAL_DMA_IRQHandler+0x2a0>
 80055d6:	bf00      	nop
 80055d8:	2000002c 	.word	0x2000002c
 80055dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d023      	beq.n	8005630 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	4798      	blx	r3
 80055f0:	e01e      	b.n	8005630 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10f      	bne.n	8005620 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 0210 	bic.w	r2, r2, #16
 800560e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005624:	2b00      	cmp	r3, #0
 8005626:	d003      	beq.n	8005630 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005634:	2b00      	cmp	r3, #0
 8005636:	d032      	beq.n	800569e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	2b00      	cmp	r3, #0
 8005642:	d022      	beq.n	800568a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2205      	movs	r2, #5
 8005648:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f022 0201 	bic.w	r2, r2, #1
 800565a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	3301      	adds	r3, #1
 8005660:	60bb      	str	r3, [r7, #8]
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	429a      	cmp	r2, r3
 8005666:	d307      	bcc.n	8005678 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1f2      	bne.n	800565c <HAL_DMA_IRQHandler+0x2cc>
 8005676:	e000      	b.n	800567a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005678:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800568e:	2b00      	cmp	r3, #0
 8005690:	d005      	beq.n	800569e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	4798      	blx	r3
 800569a:	e000      	b.n	800569e <HAL_DMA_IRQHandler+0x30e>
        return;
 800569c:	bf00      	nop
    }
  }
}
 800569e:	3718      	adds	r7, #24
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
 80056b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80056c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	2b40      	cmp	r3, #64	@ 0x40
 80056d0:	d108      	bne.n	80056e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80056e2:	e007      	b.n	80056f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	60da      	str	r2, [r3, #12]
}
 80056f4:	bf00      	nop
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	b2db      	uxtb	r3, r3
 800570e:	3b10      	subs	r3, #16
 8005710:	4a13      	ldr	r2, [pc, #76]	@ (8005760 <DMA_CalcBaseAndBitshift+0x60>)
 8005712:	fba2 2303 	umull	r2, r3, r2, r3
 8005716:	091b      	lsrs	r3, r3, #4
 8005718:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800571a:	4a12      	ldr	r2, [pc, #72]	@ (8005764 <DMA_CalcBaseAndBitshift+0x64>)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4413      	add	r3, r2
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	461a      	mov	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2b03      	cmp	r3, #3
 800572c:	d908      	bls.n	8005740 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	461a      	mov	r2, r3
 8005734:	4b0c      	ldr	r3, [pc, #48]	@ (8005768 <DMA_CalcBaseAndBitshift+0x68>)
 8005736:	4013      	ands	r3, r2
 8005738:	1d1a      	adds	r2, r3, #4
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	659a      	str	r2, [r3, #88]	@ 0x58
 800573e:	e006      	b.n	800574e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	461a      	mov	r2, r3
 8005746:	4b08      	ldr	r3, [pc, #32]	@ (8005768 <DMA_CalcBaseAndBitshift+0x68>)
 8005748:	4013      	ands	r3, r2
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005752:	4618      	mov	r0, r3
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	aaaaaaab 	.word	0xaaaaaaab
 8005764:	080115f8 	.word	0x080115f8
 8005768:	fffffc00 	.word	0xfffffc00

0800576c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005774:	2300      	movs	r3, #0
 8005776:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800577c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d11f      	bne.n	80057c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	2b03      	cmp	r3, #3
 800578a:	d856      	bhi.n	800583a <DMA_CheckFifoParam+0xce>
 800578c:	a201      	add	r2, pc, #4	@ (adr r2, 8005794 <DMA_CheckFifoParam+0x28>)
 800578e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005792:	bf00      	nop
 8005794:	080057a5 	.word	0x080057a5
 8005798:	080057b7 	.word	0x080057b7
 800579c:	080057a5 	.word	0x080057a5
 80057a0:	0800583b 	.word	0x0800583b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d046      	beq.n	800583e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057b4:	e043      	b.n	800583e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80057be:	d140      	bne.n	8005842 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057c4:	e03d      	b.n	8005842 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057ce:	d121      	bne.n	8005814 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2b03      	cmp	r3, #3
 80057d4:	d837      	bhi.n	8005846 <DMA_CheckFifoParam+0xda>
 80057d6:	a201      	add	r2, pc, #4	@ (adr r2, 80057dc <DMA_CheckFifoParam+0x70>)
 80057d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057dc:	080057ed 	.word	0x080057ed
 80057e0:	080057f3 	.word	0x080057f3
 80057e4:	080057ed 	.word	0x080057ed
 80057e8:	08005805 	.word	0x08005805
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	73fb      	strb	r3, [r7, #15]
      break;
 80057f0:	e030      	b.n	8005854 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d025      	beq.n	800584a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005802:	e022      	b.n	800584a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005808:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800580c:	d11f      	bne.n	800584e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005812:	e01c      	b.n	800584e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2b02      	cmp	r3, #2
 8005818:	d903      	bls.n	8005822 <DMA_CheckFifoParam+0xb6>
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	2b03      	cmp	r3, #3
 800581e:	d003      	beq.n	8005828 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005820:	e018      	b.n	8005854 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	73fb      	strb	r3, [r7, #15]
      break;
 8005826:	e015      	b.n	8005854 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800582c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00e      	beq.n	8005852 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	73fb      	strb	r3, [r7, #15]
      break;
 8005838:	e00b      	b.n	8005852 <DMA_CheckFifoParam+0xe6>
      break;
 800583a:	bf00      	nop
 800583c:	e00a      	b.n	8005854 <DMA_CheckFifoParam+0xe8>
      break;
 800583e:	bf00      	nop
 8005840:	e008      	b.n	8005854 <DMA_CheckFifoParam+0xe8>
      break;
 8005842:	bf00      	nop
 8005844:	e006      	b.n	8005854 <DMA_CheckFifoParam+0xe8>
      break;
 8005846:	bf00      	nop
 8005848:	e004      	b.n	8005854 <DMA_CheckFifoParam+0xe8>
      break;
 800584a:	bf00      	nop
 800584c:	e002      	b.n	8005854 <DMA_CheckFifoParam+0xe8>
      break;   
 800584e:	bf00      	nop
 8005850:	e000      	b.n	8005854 <DMA_CheckFifoParam+0xe8>
      break;
 8005852:	bf00      	nop
    }
  } 
  
  return status; 
 8005854:	7bfb      	ldrb	r3, [r7, #15]
}
 8005856:	4618      	mov	r0, r3
 8005858:	3714      	adds	r7, #20
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop

08005864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005864:	b480      	push	{r7}
 8005866:	b089      	sub	sp, #36	@ 0x24
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800586e:	2300      	movs	r3, #0
 8005870:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005872:	2300      	movs	r3, #0
 8005874:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005876:	2300      	movs	r3, #0
 8005878:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800587a:	2300      	movs	r3, #0
 800587c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800587e:	2300      	movs	r3, #0
 8005880:	61fb      	str	r3, [r7, #28]
 8005882:	e175      	b.n	8005b70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005884:	2201      	movs	r2, #1
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	fa02 f303 	lsl.w	r3, r2, r3
 800588c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	4013      	ands	r3, r2
 8005896:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	429a      	cmp	r2, r3
 800589e:	f040 8164 	bne.w	8005b6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f003 0303 	and.w	r3, r3, #3
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d005      	beq.n	80058ba <HAL_GPIO_Init+0x56>
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f003 0303 	and.w	r3, r3, #3
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d130      	bne.n	800591c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	005b      	lsls	r3, r3, #1
 80058c4:	2203      	movs	r2, #3
 80058c6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ca:	43db      	mvns	r3, r3
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	4013      	ands	r3, r2
 80058d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	68da      	ldr	r2, [r3, #12]
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	005b      	lsls	r3, r3, #1
 80058da:	fa02 f303 	lsl.w	r3, r2, r3
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	69ba      	ldr	r2, [r7, #24]
 80058e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058f0:	2201      	movs	r2, #1
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	fa02 f303 	lsl.w	r3, r2, r3
 80058f8:	43db      	mvns	r3, r3
 80058fa:	69ba      	ldr	r2, [r7, #24]
 80058fc:	4013      	ands	r3, r2
 80058fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	091b      	lsrs	r3, r3, #4
 8005906:	f003 0201 	and.w	r2, r3, #1
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	fa02 f303 	lsl.w	r3, r2, r3
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	4313      	orrs	r3, r2
 8005914:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f003 0303 	and.w	r3, r3, #3
 8005924:	2b03      	cmp	r3, #3
 8005926:	d017      	beq.n	8005958 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	005b      	lsls	r3, r3, #1
 8005932:	2203      	movs	r2, #3
 8005934:	fa02 f303 	lsl.w	r3, r2, r3
 8005938:	43db      	mvns	r3, r3
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	4013      	ands	r3, r2
 800593e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	689a      	ldr	r2, [r3, #8]
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	005b      	lsls	r3, r3, #1
 8005948:	fa02 f303 	lsl.w	r3, r2, r3
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	4313      	orrs	r3, r2
 8005950:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	69ba      	ldr	r2, [r7, #24]
 8005956:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f003 0303 	and.w	r3, r3, #3
 8005960:	2b02      	cmp	r3, #2
 8005962:	d123      	bne.n	80059ac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	08da      	lsrs	r2, r3, #3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	3208      	adds	r2, #8
 800596c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	f003 0307 	and.w	r3, r3, #7
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	220f      	movs	r2, #15
 800597c:	fa02 f303 	lsl.w	r3, r2, r3
 8005980:	43db      	mvns	r3, r3
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	4013      	ands	r3, r2
 8005986:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	691a      	ldr	r2, [r3, #16]
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	f003 0307 	and.w	r3, r3, #7
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	fa02 f303 	lsl.w	r3, r2, r3
 8005998:	69ba      	ldr	r2, [r7, #24]
 800599a:	4313      	orrs	r3, r2
 800599c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	08da      	lsrs	r2, r3, #3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	3208      	adds	r2, #8
 80059a6:	69b9      	ldr	r1, [r7, #24]
 80059a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	005b      	lsls	r3, r3, #1
 80059b6:	2203      	movs	r2, #3
 80059b8:	fa02 f303 	lsl.w	r3, r2, r3
 80059bc:	43db      	mvns	r3, r3
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	4013      	ands	r3, r2
 80059c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f003 0203 	and.w	r2, r3, #3
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	005b      	lsls	r3, r3, #1
 80059d0:	fa02 f303 	lsl.w	r3, r2, r3
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f000 80be 	beq.w	8005b6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059ee:	4b66      	ldr	r3, [pc, #408]	@ (8005b88 <HAL_GPIO_Init+0x324>)
 80059f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059f2:	4a65      	ldr	r2, [pc, #404]	@ (8005b88 <HAL_GPIO_Init+0x324>)
 80059f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80059f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80059fa:	4b63      	ldr	r3, [pc, #396]	@ (8005b88 <HAL_GPIO_Init+0x324>)
 80059fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a02:	60fb      	str	r3, [r7, #12]
 8005a04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005a06:	4a61      	ldr	r2, [pc, #388]	@ (8005b8c <HAL_GPIO_Init+0x328>)
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	089b      	lsrs	r3, r3, #2
 8005a0c:	3302      	adds	r3, #2
 8005a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	f003 0303 	and.w	r3, r3, #3
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	220f      	movs	r2, #15
 8005a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a22:	43db      	mvns	r3, r3
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	4013      	ands	r3, r2
 8005a28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a58      	ldr	r2, [pc, #352]	@ (8005b90 <HAL_GPIO_Init+0x32c>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d037      	beq.n	8005aa2 <HAL_GPIO_Init+0x23e>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a57      	ldr	r2, [pc, #348]	@ (8005b94 <HAL_GPIO_Init+0x330>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d031      	beq.n	8005a9e <HAL_GPIO_Init+0x23a>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a56      	ldr	r2, [pc, #344]	@ (8005b98 <HAL_GPIO_Init+0x334>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d02b      	beq.n	8005a9a <HAL_GPIO_Init+0x236>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a55      	ldr	r2, [pc, #340]	@ (8005b9c <HAL_GPIO_Init+0x338>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d025      	beq.n	8005a96 <HAL_GPIO_Init+0x232>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a54      	ldr	r2, [pc, #336]	@ (8005ba0 <HAL_GPIO_Init+0x33c>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d01f      	beq.n	8005a92 <HAL_GPIO_Init+0x22e>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a53      	ldr	r2, [pc, #332]	@ (8005ba4 <HAL_GPIO_Init+0x340>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d019      	beq.n	8005a8e <HAL_GPIO_Init+0x22a>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a52      	ldr	r2, [pc, #328]	@ (8005ba8 <HAL_GPIO_Init+0x344>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d013      	beq.n	8005a8a <HAL_GPIO_Init+0x226>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a51      	ldr	r2, [pc, #324]	@ (8005bac <HAL_GPIO_Init+0x348>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d00d      	beq.n	8005a86 <HAL_GPIO_Init+0x222>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a50      	ldr	r2, [pc, #320]	@ (8005bb0 <HAL_GPIO_Init+0x34c>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d007      	beq.n	8005a82 <HAL_GPIO_Init+0x21e>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a4f      	ldr	r2, [pc, #316]	@ (8005bb4 <HAL_GPIO_Init+0x350>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d101      	bne.n	8005a7e <HAL_GPIO_Init+0x21a>
 8005a7a:	2309      	movs	r3, #9
 8005a7c:	e012      	b.n	8005aa4 <HAL_GPIO_Init+0x240>
 8005a7e:	230a      	movs	r3, #10
 8005a80:	e010      	b.n	8005aa4 <HAL_GPIO_Init+0x240>
 8005a82:	2308      	movs	r3, #8
 8005a84:	e00e      	b.n	8005aa4 <HAL_GPIO_Init+0x240>
 8005a86:	2307      	movs	r3, #7
 8005a88:	e00c      	b.n	8005aa4 <HAL_GPIO_Init+0x240>
 8005a8a:	2306      	movs	r3, #6
 8005a8c:	e00a      	b.n	8005aa4 <HAL_GPIO_Init+0x240>
 8005a8e:	2305      	movs	r3, #5
 8005a90:	e008      	b.n	8005aa4 <HAL_GPIO_Init+0x240>
 8005a92:	2304      	movs	r3, #4
 8005a94:	e006      	b.n	8005aa4 <HAL_GPIO_Init+0x240>
 8005a96:	2303      	movs	r3, #3
 8005a98:	e004      	b.n	8005aa4 <HAL_GPIO_Init+0x240>
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	e002      	b.n	8005aa4 <HAL_GPIO_Init+0x240>
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e000      	b.n	8005aa4 <HAL_GPIO_Init+0x240>
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	69fa      	ldr	r2, [r7, #28]
 8005aa6:	f002 0203 	and.w	r2, r2, #3
 8005aaa:	0092      	lsls	r2, r2, #2
 8005aac:	4093      	lsls	r3, r2
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005ab4:	4935      	ldr	r1, [pc, #212]	@ (8005b8c <HAL_GPIO_Init+0x328>)
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	089b      	lsrs	r3, r3, #2
 8005aba:	3302      	adds	r3, #2
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ac2:	4b3d      	ldr	r3, [pc, #244]	@ (8005bb8 <HAL_GPIO_Init+0x354>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	43db      	mvns	r3, r3
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	4013      	ands	r3, r2
 8005ad0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005ae6:	4a34      	ldr	r2, [pc, #208]	@ (8005bb8 <HAL_GPIO_Init+0x354>)
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005aec:	4b32      	ldr	r3, [pc, #200]	@ (8005bb8 <HAL_GPIO_Init+0x354>)
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	43db      	mvns	r3, r3
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	4013      	ands	r3, r2
 8005afa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d003      	beq.n	8005b10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b10:	4a29      	ldr	r2, [pc, #164]	@ (8005bb8 <HAL_GPIO_Init+0x354>)
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005b16:	4b28      	ldr	r3, [pc, #160]	@ (8005bb8 <HAL_GPIO_Init+0x354>)
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	43db      	mvns	r3, r3
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	4013      	ands	r3, r2
 8005b24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d003      	beq.n	8005b3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b3a:	4a1f      	ldr	r2, [pc, #124]	@ (8005bb8 <HAL_GPIO_Init+0x354>)
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b40:	4b1d      	ldr	r3, [pc, #116]	@ (8005bb8 <HAL_GPIO_Init+0x354>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	43db      	mvns	r3, r3
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d003      	beq.n	8005b64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b64:	4a14      	ldr	r2, [pc, #80]	@ (8005bb8 <HAL_GPIO_Init+0x354>)
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	61fb      	str	r3, [r7, #28]
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	2b0f      	cmp	r3, #15
 8005b74:	f67f ae86 	bls.w	8005884 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005b78:	bf00      	nop
 8005b7a:	bf00      	nop
 8005b7c:	3724      	adds	r7, #36	@ 0x24
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	40023800 	.word	0x40023800
 8005b8c:	40013800 	.word	0x40013800
 8005b90:	40020000 	.word	0x40020000
 8005b94:	40020400 	.word	0x40020400
 8005b98:	40020800 	.word	0x40020800
 8005b9c:	40020c00 	.word	0x40020c00
 8005ba0:	40021000 	.word	0x40021000
 8005ba4:	40021400 	.word	0x40021400
 8005ba8:	40021800 	.word	0x40021800
 8005bac:	40021c00 	.word	0x40021c00
 8005bb0:	40022000 	.word	0x40022000
 8005bb4:	40022400 	.word	0x40022400
 8005bb8:	40013c00 	.word	0x40013c00

08005bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	807b      	strh	r3, [r7, #2]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005bcc:	787b      	ldrb	r3, [r7, #1]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005bd2:	887a      	ldrh	r2, [r7, #2]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005bd8:	e003      	b.n	8005be2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005bda:	887b      	ldrh	r3, [r7, #2]
 8005bdc:	041a      	lsls	r2, r3, #16
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	619a      	str	r2, [r3, #24]
}
 8005be2:	bf00      	nop
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005bee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bf0:	b08f      	sub	sp, #60	@ 0x3c
 8005bf2:	af0a      	add	r7, sp, #40	@ 0x28
 8005bf4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d101      	bne.n	8005c00 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e116      	b.n	8005e2e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d106      	bne.n	8005c20 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f008 feec 	bl	800e9f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2203      	movs	r2, #3
 8005c24:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d102      	bne.n	8005c3a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f005 f989 	bl	800af56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	603b      	str	r3, [r7, #0]
 8005c4a:	687e      	ldr	r6, [r7, #4]
 8005c4c:	466d      	mov	r5, sp
 8005c4e:	f106 0410 	add.w	r4, r6, #16
 8005c52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005c5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005c62:	1d33      	adds	r3, r6, #4
 8005c64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c66:	6838      	ldr	r0, [r7, #0]
 8005c68:	f005 f86a 	bl	800ad40 <USB_CoreInit>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d005      	beq.n	8005c7e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2202      	movs	r2, #2
 8005c76:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e0d7      	b.n	8005e2e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2100      	movs	r1, #0
 8005c84:	4618      	mov	r0, r3
 8005c86:	f005 f977 	bl	800af78 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	73fb      	strb	r3, [r7, #15]
 8005c8e:	e04a      	b.n	8005d26 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005c90:	7bfa      	ldrb	r2, [r7, #15]
 8005c92:	6879      	ldr	r1, [r7, #4]
 8005c94:	4613      	mov	r3, r2
 8005c96:	00db      	lsls	r3, r3, #3
 8005c98:	4413      	add	r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	440b      	add	r3, r1
 8005c9e:	333d      	adds	r3, #61	@ 0x3d
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005ca4:	7bfa      	ldrb	r2, [r7, #15]
 8005ca6:	6879      	ldr	r1, [r7, #4]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	4413      	add	r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	440b      	add	r3, r1
 8005cb2:	333c      	adds	r3, #60	@ 0x3c
 8005cb4:	7bfa      	ldrb	r2, [r7, #15]
 8005cb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005cb8:	7bfa      	ldrb	r2, [r7, #15]
 8005cba:	7bfb      	ldrb	r3, [r7, #15]
 8005cbc:	b298      	uxth	r0, r3
 8005cbe:	6879      	ldr	r1, [r7, #4]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	00db      	lsls	r3, r3, #3
 8005cc4:	4413      	add	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	440b      	add	r3, r1
 8005cca:	3344      	adds	r3, #68	@ 0x44
 8005ccc:	4602      	mov	r2, r0
 8005cce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005cd0:	7bfa      	ldrb	r2, [r7, #15]
 8005cd2:	6879      	ldr	r1, [r7, #4]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	00db      	lsls	r3, r3, #3
 8005cd8:	4413      	add	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	440b      	add	r3, r1
 8005cde:	3340      	adds	r3, #64	@ 0x40
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005ce4:	7bfa      	ldrb	r2, [r7, #15]
 8005ce6:	6879      	ldr	r1, [r7, #4]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	00db      	lsls	r3, r3, #3
 8005cec:	4413      	add	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	440b      	add	r3, r1
 8005cf2:	3348      	adds	r3, #72	@ 0x48
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005cf8:	7bfa      	ldrb	r2, [r7, #15]
 8005cfa:	6879      	ldr	r1, [r7, #4]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	00db      	lsls	r3, r3, #3
 8005d00:	4413      	add	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	440b      	add	r3, r1
 8005d06:	334c      	adds	r3, #76	@ 0x4c
 8005d08:	2200      	movs	r2, #0
 8005d0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005d0c:	7bfa      	ldrb	r2, [r7, #15]
 8005d0e:	6879      	ldr	r1, [r7, #4]
 8005d10:	4613      	mov	r3, r2
 8005d12:	00db      	lsls	r3, r3, #3
 8005d14:	4413      	add	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	440b      	add	r3, r1
 8005d1a:	3354      	adds	r3, #84	@ 0x54
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
 8005d22:	3301      	adds	r3, #1
 8005d24:	73fb      	strb	r3, [r7, #15]
 8005d26:	7bfa      	ldrb	r2, [r7, #15]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d3af      	bcc.n	8005c90 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d30:	2300      	movs	r3, #0
 8005d32:	73fb      	strb	r3, [r7, #15]
 8005d34:	e044      	b.n	8005dc0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005d36:	7bfa      	ldrb	r2, [r7, #15]
 8005d38:	6879      	ldr	r1, [r7, #4]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	00db      	lsls	r3, r3, #3
 8005d3e:	4413      	add	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	440b      	add	r3, r1
 8005d44:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8005d48:	2200      	movs	r2, #0
 8005d4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005d4c:	7bfa      	ldrb	r2, [r7, #15]
 8005d4e:	6879      	ldr	r1, [r7, #4]
 8005d50:	4613      	mov	r3, r2
 8005d52:	00db      	lsls	r3, r3, #3
 8005d54:	4413      	add	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	440b      	add	r3, r1
 8005d5a:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8005d5e:	7bfa      	ldrb	r2, [r7, #15]
 8005d60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005d62:	7bfa      	ldrb	r2, [r7, #15]
 8005d64:	6879      	ldr	r1, [r7, #4]
 8005d66:	4613      	mov	r3, r2
 8005d68:	00db      	lsls	r3, r3, #3
 8005d6a:	4413      	add	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	440b      	add	r3, r1
 8005d70:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8005d74:	2200      	movs	r2, #0
 8005d76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005d78:	7bfa      	ldrb	r2, [r7, #15]
 8005d7a:	6879      	ldr	r1, [r7, #4]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	00db      	lsls	r3, r3, #3
 8005d80:	4413      	add	r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	440b      	add	r3, r1
 8005d86:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005d8e:	7bfa      	ldrb	r2, [r7, #15]
 8005d90:	6879      	ldr	r1, [r7, #4]
 8005d92:	4613      	mov	r3, r2
 8005d94:	00db      	lsls	r3, r3, #3
 8005d96:	4413      	add	r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	440b      	add	r3, r1
 8005d9c:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8005da0:	2200      	movs	r2, #0
 8005da2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005da4:	7bfa      	ldrb	r2, [r7, #15]
 8005da6:	6879      	ldr	r1, [r7, #4]
 8005da8:	4613      	mov	r3, r2
 8005daa:	00db      	lsls	r3, r3, #3
 8005dac:	4413      	add	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	440b      	add	r3, r1
 8005db2:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8005db6:	2200      	movs	r2, #0
 8005db8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005dba:	7bfb      	ldrb	r3, [r7, #15]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	73fb      	strb	r3, [r7, #15]
 8005dc0:	7bfa      	ldrb	r2, [r7, #15]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d3b5      	bcc.n	8005d36 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	603b      	str	r3, [r7, #0]
 8005dd0:	687e      	ldr	r6, [r7, #4]
 8005dd2:	466d      	mov	r5, sp
 8005dd4:	f106 0410 	add.w	r4, r6, #16
 8005dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005dda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ddc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005dde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005de0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005de4:	e885 0003 	stmia.w	r5, {r0, r1}
 8005de8:	1d33      	adds	r3, r6, #4
 8005dea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005dec:	6838      	ldr	r0, [r7, #0]
 8005dee:	f005 f90f 	bl	800b010 <USB_DevInit>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d005      	beq.n	8005e04 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e014      	b.n	8005e2e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d102      	bne.n	8005e22 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f001 f97b 	bl	8007118 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f006 fa5d 	bl	800c2e6 <USB_DevDisconnect>

  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3714      	adds	r7, #20
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e36 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b082      	sub	sp, #8
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d101      	bne.n	8005e4c <HAL_PCD_Start+0x16>
 8005e48:	2302      	movs	r3, #2
 8005e4a:	e012      	b.n	8005e72 <HAL_PCD_Start+0x3c>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f005 f86b 	bl	800af34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4618      	mov	r0, r3
 8005e64:	f006 fa1e 	bl	800c2a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3708      	adds	r7, #8
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005e7a:	b590      	push	{r4, r7, lr}
 8005e7c:	b08d      	sub	sp, #52	@ 0x34
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4618      	mov	r0, r3
 8005e92:	f006 fadc 	bl	800c44e <USB_GetMode>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f040 84b7 	bne.w	800680c <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f006 fa40 	bl	800c328 <USB_ReadInterrupts>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 84ad 	beq.w	800680a <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	0a1b      	lsrs	r3, r3, #8
 8005eba:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f006 fa2d 	bl	800c328 <USB_ReadInterrupts>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d107      	bne.n	8005ee8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	695a      	ldr	r2, [r3, #20]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f002 0202 	and.w	r2, r2, #2
 8005ee6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f006 fa1b 	bl	800c328 <USB_ReadInterrupts>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	f003 0310 	and.w	r3, r3, #16
 8005ef8:	2b10      	cmp	r3, #16
 8005efa:	d161      	bne.n	8005fc0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	699a      	ldr	r2, [r3, #24]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 0210 	bic.w	r2, r2, #16
 8005f0a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	6a1b      	ldr	r3, [r3, #32]
 8005f10:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	f003 020f 	and.w	r2, r3, #15
 8005f18:	4613      	mov	r3, r2
 8005f1a:	00db      	lsls	r3, r3, #3
 8005f1c:	4413      	add	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	4413      	add	r3, r2
 8005f28:	3304      	adds	r3, #4
 8005f2a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005f32:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f36:	d124      	bne.n	8005f82 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005f3e:	4013      	ands	r3, r2
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d035      	beq.n	8005fb0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	091b      	lsrs	r3, r3, #4
 8005f4c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005f4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	461a      	mov	r2, r3
 8005f56:	6a38      	ldr	r0, [r7, #32]
 8005f58:	f006 f852 	bl	800c000 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	691a      	ldr	r2, [r3, #16]
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	091b      	lsrs	r3, r3, #4
 8005f64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f68:	441a      	add	r2, r3
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	6a1a      	ldr	r2, [r3, #32]
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	091b      	lsrs	r3, r3, #4
 8005f76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f7a:	441a      	add	r2, r3
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	621a      	str	r2, [r3, #32]
 8005f80:	e016      	b.n	8005fb0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005f88:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005f8c:	d110      	bne.n	8005fb0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8005f94:	2208      	movs	r2, #8
 8005f96:	4619      	mov	r1, r3
 8005f98:	6a38      	ldr	r0, [r7, #32]
 8005f9a:	f006 f831 	bl	800c000 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	6a1a      	ldr	r2, [r3, #32]
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	091b      	lsrs	r3, r3, #4
 8005fa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005faa:	441a      	add	r2, r3
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	699a      	ldr	r2, [r3, #24]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0210 	orr.w	r2, r2, #16
 8005fbe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f006 f9af 	bl	800c328 <USB_ReadInterrupts>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005fd0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005fd4:	f040 80a7 	bne.w	8006126 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f006 f9b4 	bl	800c34e <USB_ReadDevAllOutEpInterrupt>
 8005fe6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005fe8:	e099      	b.n	800611e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 808e 	beq.w	8006112 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ffc:	b2d2      	uxtb	r2, r2
 8005ffe:	4611      	mov	r1, r2
 8006000:	4618      	mov	r0, r3
 8006002:	f006 f9d8 	bl	800c3b6 <USB_ReadDevOutEPInterrupt>
 8006006:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00c      	beq.n	800602c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006014:	015a      	lsls	r2, r3, #5
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	4413      	add	r3, r2
 800601a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800601e:	461a      	mov	r2, r3
 8006020:	2301      	movs	r3, #1
 8006022:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006024:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fef0 	bl	8006e0c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	f003 0308 	and.w	r3, r3, #8
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00c      	beq.n	8006050 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006038:	015a      	lsls	r2, r3, #5
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	4413      	add	r3, r2
 800603e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006042:	461a      	mov	r2, r3
 8006044:	2308      	movs	r3, #8
 8006046:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006048:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 ffc6 	bl	8006fdc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	f003 0310 	and.w	r3, r3, #16
 8006056:	2b00      	cmp	r3, #0
 8006058:	d008      	beq.n	800606c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800605a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	4413      	add	r3, r2
 8006062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006066:	461a      	mov	r2, r3
 8006068:	2310      	movs	r3, #16
 800606a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	f003 0302 	and.w	r3, r3, #2
 8006072:	2b00      	cmp	r3, #0
 8006074:	d030      	beq.n	80060d8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006076:	6a3b      	ldr	r3, [r7, #32]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800607e:	2b80      	cmp	r3, #128	@ 0x80
 8006080:	d109      	bne.n	8006096 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	69fa      	ldr	r2, [r7, #28]
 800608c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006090:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006094:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006098:	4613      	mov	r3, r2
 800609a:	00db      	lsls	r3, r3, #3
 800609c:	4413      	add	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	4413      	add	r3, r2
 80060a8:	3304      	adds	r3, #4
 80060aa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	78db      	ldrb	r3, [r3, #3]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d108      	bne.n	80060c6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	2200      	movs	r2, #0
 80060b8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80060ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	4619      	mov	r1, r3
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f008 fdcd 	bl	800ec60 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80060c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d2:	461a      	mov	r2, r3
 80060d4:	2302      	movs	r3, #2
 80060d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	f003 0320 	and.w	r3, r3, #32
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d008      	beq.n	80060f4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80060e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ee:	461a      	mov	r2, r3
 80060f0:	2320      	movs	r3, #32
 80060f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d009      	beq.n	8006112 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80060fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006100:	015a      	lsls	r2, r3, #5
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	4413      	add	r3, r2
 8006106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800610a:	461a      	mov	r2, r3
 800610c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006110:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006114:	3301      	adds	r3, #1
 8006116:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800611a:	085b      	lsrs	r3, r3, #1
 800611c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800611e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006120:	2b00      	cmp	r3, #0
 8006122:	f47f af62 	bne.w	8005fea <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4618      	mov	r0, r3
 800612c:	f006 f8fc 	bl	800c328 <USB_ReadInterrupts>
 8006130:	4603      	mov	r3, r0
 8006132:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006136:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800613a:	f040 80db 	bne.w	80062f4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4618      	mov	r0, r3
 8006144:	f006 f91d 	bl	800c382 <USB_ReadDevAllInEpInterrupt>
 8006148:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800614a:	2300      	movs	r3, #0
 800614c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800614e:	e0cd      	b.n	80062ec <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	2b00      	cmp	r3, #0
 8006158:	f000 80c2 	beq.w	80062e0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006162:	b2d2      	uxtb	r2, r2
 8006164:	4611      	mov	r1, r2
 8006166:	4618      	mov	r0, r3
 8006168:	f006 f943 	bl	800c3f2 <USB_ReadDevInEPInterrupt>
 800616c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	2b00      	cmp	r3, #0
 8006176:	d057      	beq.n	8006228 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617a:	f003 030f 	and.w	r3, r3, #15
 800617e:	2201      	movs	r2, #1
 8006180:	fa02 f303 	lsl.w	r3, r2, r3
 8006184:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800618c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	43db      	mvns	r3, r3
 8006192:	69f9      	ldr	r1, [r7, #28]
 8006194:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006198:	4013      	ands	r3, r2
 800619a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800619c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619e:	015a      	lsls	r2, r3, #5
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	4413      	add	r3, r2
 80061a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061a8:	461a      	mov	r2, r3
 80061aa:	2301      	movs	r3, #1
 80061ac:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d132      	bne.n	800621c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80061b6:	6879      	ldr	r1, [r7, #4]
 80061b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ba:	4613      	mov	r3, r2
 80061bc:	00db      	lsls	r3, r3, #3
 80061be:	4413      	add	r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	440b      	add	r3, r1
 80061c4:	334c      	adds	r3, #76	@ 0x4c
 80061c6:	6819      	ldr	r1, [r3, #0]
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061cc:	4613      	mov	r3, r2
 80061ce:	00db      	lsls	r3, r3, #3
 80061d0:	4413      	add	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4403      	add	r3, r0
 80061d6:	3348      	adds	r3, #72	@ 0x48
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4419      	add	r1, r3
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061e0:	4613      	mov	r3, r2
 80061e2:	00db      	lsls	r3, r3, #3
 80061e4:	4413      	add	r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4403      	add	r3, r0
 80061ea:	334c      	adds	r3, #76	@ 0x4c
 80061ec:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80061ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d113      	bne.n	800621c <HAL_PCD_IRQHandler+0x3a2>
 80061f4:	6879      	ldr	r1, [r7, #4]
 80061f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061f8:	4613      	mov	r3, r2
 80061fa:	00db      	lsls	r3, r3, #3
 80061fc:	4413      	add	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	440b      	add	r3, r1
 8006202:	3354      	adds	r3, #84	@ 0x54
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d108      	bne.n	800621c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6818      	ldr	r0, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8006214:	461a      	mov	r2, r3
 8006216:	2101      	movs	r1, #1
 8006218:	f006 f94c 	bl	800c4b4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800621c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621e:	b2db      	uxtb	r3, r3
 8006220:	4619      	mov	r1, r3
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f008 fc97 	bl	800eb56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	f003 0308 	and.w	r3, r3, #8
 800622e:	2b00      	cmp	r3, #0
 8006230:	d008      	beq.n	8006244 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006234:	015a      	lsls	r2, r3, #5
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	4413      	add	r3, r2
 800623a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800623e:	461a      	mov	r2, r3
 8006240:	2308      	movs	r3, #8
 8006242:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	f003 0310 	and.w	r3, r3, #16
 800624a:	2b00      	cmp	r3, #0
 800624c:	d008      	beq.n	8006260 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800624e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	4413      	add	r3, r2
 8006256:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800625a:	461a      	mov	r2, r3
 800625c:	2310      	movs	r3, #16
 800625e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006266:	2b00      	cmp	r3, #0
 8006268:	d008      	beq.n	800627c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800626a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	4413      	add	r3, r2
 8006272:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006276:	461a      	mov	r2, r3
 8006278:	2340      	movs	r3, #64	@ 0x40
 800627a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	f003 0302 	and.w	r3, r3, #2
 8006282:	2b00      	cmp	r3, #0
 8006284:	d023      	beq.n	80062ce <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006286:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006288:	6a38      	ldr	r0, [r7, #32]
 800628a:	f005 f81f 	bl	800b2cc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800628e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006290:	4613      	mov	r3, r2
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	4413      	add	r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	3338      	adds	r3, #56	@ 0x38
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	4413      	add	r3, r2
 800629e:	3304      	adds	r3, #4
 80062a0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	78db      	ldrb	r3, [r3, #3]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d108      	bne.n	80062bc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	2200      	movs	r2, #0
 80062ae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80062b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	4619      	mov	r1, r3
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f008 fce4 	bl	800ec84 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80062bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062c8:	461a      	mov	r2, r3
 80062ca:	2302      	movs	r3, #2
 80062cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d003      	beq.n	80062e0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80062d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fd08 	bl	8006cf0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80062e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e2:	3301      	adds	r3, #1
 80062e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80062e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e8:	085b      	lsrs	r3, r3, #1
 80062ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80062ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f47f af2e 	bne.w	8006150 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f006 f815 	bl	800c328 <USB_ReadInterrupts>
 80062fe:	4603      	mov	r3, r0
 8006300:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006304:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006308:	d122      	bne.n	8006350 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	69fa      	ldr	r2, [r7, #28]
 8006314:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006318:	f023 0301 	bic.w	r3, r3, #1
 800631c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8006324:	2b01      	cmp	r3, #1
 8006326:	d108      	bne.n	800633a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006330:	2100      	movs	r1, #0
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f008 fe5e 	bl	800eff4 <HAL_PCDEx_LPM_Callback>
 8006338:	e002      	b.n	8006340 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f008 fc82 	bl	800ec44 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	695a      	ldr	r2, [r3, #20]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800634e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4618      	mov	r0, r3
 8006356:	f005 ffe7 	bl	800c328 <USB_ReadInterrupts>
 800635a:	4603      	mov	r3, r0
 800635c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006360:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006364:	d112      	bne.n	800638c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b01      	cmp	r3, #1
 8006374:	d102      	bne.n	800637c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f008 fc3e 	bl	800ebf8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	695a      	ldr	r2, [r3, #20]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800638a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4618      	mov	r0, r3
 8006392:	f005 ffc9 	bl	800c328 <USB_ReadInterrupts>
 8006396:	4603      	mov	r3, r0
 8006398:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800639c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063a0:	d121      	bne.n	80063e6 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	695a      	ldr	r2, [r3, #20]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80063b0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d111      	bne.n	80063e0 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ca:	089b      	lsrs	r3, r3, #2
 80063cc:	f003 020f 	and.w	r2, r3, #15
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80063d6:	2101      	movs	r1, #1
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f008 fe0b 	bl	800eff4 <HAL_PCDEx_LPM_Callback>
 80063de:	e002      	b.n	80063e6 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f008 fc09 	bl	800ebf8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4618      	mov	r0, r3
 80063ec:	f005 ff9c 	bl	800c328 <USB_ReadInterrupts>
 80063f0:	4603      	mov	r3, r0
 80063f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80063f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063fa:	f040 80b7 	bne.w	800656c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	69fa      	ldr	r2, [r7, #28]
 8006408:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800640c:	f023 0301 	bic.w	r3, r3, #1
 8006410:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2110      	movs	r1, #16
 8006418:	4618      	mov	r0, r3
 800641a:	f004 ff57 	bl	800b2cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800641e:	2300      	movs	r3, #0
 8006420:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006422:	e046      	b.n	80064b2 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006426:	015a      	lsls	r2, r3, #5
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	4413      	add	r3, r2
 800642c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006430:	461a      	mov	r2, r3
 8006432:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006436:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	4413      	add	r3, r2
 8006440:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006448:	0151      	lsls	r1, r2, #5
 800644a:	69fa      	ldr	r2, [r7, #28]
 800644c:	440a      	add	r2, r1
 800644e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006452:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006456:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	4413      	add	r3, r2
 8006460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006464:	461a      	mov	r2, r3
 8006466:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800646a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800646c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800646e:	015a      	lsls	r2, r3, #5
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	4413      	add	r3, r2
 8006474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800647c:	0151      	lsls	r1, r2, #5
 800647e:	69fa      	ldr	r2, [r7, #28]
 8006480:	440a      	add	r2, r1
 8006482:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006486:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800648a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800648c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	4413      	add	r3, r2
 8006494:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800649c:	0151      	lsls	r1, r2, #5
 800649e:	69fa      	ldr	r2, [r7, #28]
 80064a0:	440a      	add	r2, r1
 80064a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064a6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80064aa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80064ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ae:	3301      	adds	r3, #1
 80064b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d3b3      	bcc.n	8006424 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064c2:	69db      	ldr	r3, [r3, #28]
 80064c4:	69fa      	ldr	r2, [r7, #28]
 80064c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064ca:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80064ce:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d016      	beq.n	8006506 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064e2:	69fa      	ldr	r2, [r7, #28]
 80064e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064e8:	f043 030b 	orr.w	r3, r3, #11
 80064ec:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064f8:	69fa      	ldr	r2, [r7, #28]
 80064fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064fe:	f043 030b 	orr.w	r3, r3, #11
 8006502:	6453      	str	r3, [r2, #68]	@ 0x44
 8006504:	e015      	b.n	8006532 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800650c:	695a      	ldr	r2, [r3, #20]
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006514:	4619      	mov	r1, r3
 8006516:	f242 032b 	movw	r3, #8235	@ 0x202b
 800651a:	4313      	orrs	r3, r2
 800651c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	69fa      	ldr	r2, [r7, #28]
 8006528:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800652c:	f043 030b 	orr.w	r3, r3, #11
 8006530:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	69fa      	ldr	r2, [r7, #28]
 800653c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006540:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006544:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6818      	ldr	r0, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006556:	461a      	mov	r2, r3
 8006558:	f005 ffac 	bl	800c4b4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	695a      	ldr	r2, [r3, #20]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800656a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4618      	mov	r0, r3
 8006572:	f005 fed9 	bl	800c328 <USB_ReadInterrupts>
 8006576:	4603      	mov	r3, r0
 8006578:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800657c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006580:	d124      	bne.n	80065cc <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4618      	mov	r0, r3
 8006588:	f005 ff70 	bl	800c46c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4618      	mov	r0, r3
 8006592:	f004 ff18 	bl	800b3c6 <USB_GetDevSpeed>
 8006596:	4603      	mov	r3, r0
 8006598:	461a      	mov	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681c      	ldr	r4, [r3, #0]
 80065a2:	f001 fad3 	bl	8007b4c <HAL_RCC_GetHCLKFreq>
 80065a6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	461a      	mov	r2, r3
 80065b0:	4620      	mov	r0, r4
 80065b2:	f004 fc1d 	bl	800adf0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f008 faf5 	bl	800eba6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	695a      	ldr	r2, [r3, #20]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80065ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4618      	mov	r0, r3
 80065d2:	f005 fea9 	bl	800c328 <USB_ReadInterrupts>
 80065d6:	4603      	mov	r3, r0
 80065d8:	f003 0308 	and.w	r3, r3, #8
 80065dc:	2b08      	cmp	r3, #8
 80065de:	d10a      	bne.n	80065f6 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f008 fad2 	bl	800eb8a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	695a      	ldr	r2, [r3, #20]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f002 0208 	and.w	r2, r2, #8
 80065f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4618      	mov	r0, r3
 80065fc:	f005 fe94 	bl	800c328 <USB_ReadInterrupts>
 8006600:	4603      	mov	r3, r0
 8006602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006606:	2b80      	cmp	r3, #128	@ 0x80
 8006608:	d122      	bne.n	8006650 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800660a:	6a3b      	ldr	r3, [r7, #32]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006612:	6a3b      	ldr	r3, [r7, #32]
 8006614:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006616:	2301      	movs	r3, #1
 8006618:	627b      	str	r3, [r7, #36]	@ 0x24
 800661a:	e014      	b.n	8006646 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800661c:	6879      	ldr	r1, [r7, #4]
 800661e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006620:	4613      	mov	r3, r2
 8006622:	00db      	lsls	r3, r3, #3
 8006624:	4413      	add	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	440b      	add	r3, r1
 800662a:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d105      	bne.n	8006640 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006636:	b2db      	uxtb	r3, r3
 8006638:	4619      	mov	r1, r3
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 fb27 	bl	8006c8e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006642:	3301      	adds	r3, #1
 8006644:	627b      	str	r3, [r7, #36]	@ 0x24
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800664c:	429a      	cmp	r2, r3
 800664e:	d3e5      	bcc.n	800661c <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4618      	mov	r0, r3
 8006656:	f005 fe67 	bl	800c328 <USB_ReadInterrupts>
 800665a:	4603      	mov	r3, r0
 800665c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006660:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006664:	d13b      	bne.n	80066de <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006666:	2301      	movs	r3, #1
 8006668:	627b      	str	r3, [r7, #36]	@ 0x24
 800666a:	e02b      	b.n	80066c4 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800666c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800667c:	6879      	ldr	r1, [r7, #4]
 800667e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006680:	4613      	mov	r3, r2
 8006682:	00db      	lsls	r3, r3, #3
 8006684:	4413      	add	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	440b      	add	r3, r1
 800668a:	3340      	adds	r3, #64	@ 0x40
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d115      	bne.n	80066be <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006692:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006694:	2b00      	cmp	r3, #0
 8006696:	da12      	bge.n	80066be <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006698:	6879      	ldr	r1, [r7, #4]
 800669a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800669c:	4613      	mov	r3, r2
 800669e:	00db      	lsls	r3, r3, #3
 80066a0:	4413      	add	r3, r2
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	440b      	add	r3, r1
 80066a6:	333f      	adds	r3, #63	@ 0x3f
 80066a8:	2201      	movs	r2, #1
 80066aa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80066ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	4619      	mov	r1, r3
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 fae8 	bl	8006c8e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80066be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c0:	3301      	adds	r3, #1
 80066c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d3ce      	bcc.n	800666c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	695a      	ldr	r2, [r3, #20]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80066dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f005 fe20 	bl	800c328 <USB_ReadInterrupts>
 80066e8:	4603      	mov	r3, r0
 80066ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80066f2:	d155      	bne.n	80067a0 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80066f4:	2301      	movs	r3, #1
 80066f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80066f8:	e045      	b.n	8006786 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80066fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fc:	015a      	lsls	r2, r3, #5
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	4413      	add	r3, r2
 8006702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800670a:	6879      	ldr	r1, [r7, #4]
 800670c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800670e:	4613      	mov	r3, r2
 8006710:	00db      	lsls	r3, r3, #3
 8006712:	4413      	add	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	440b      	add	r3, r1
 8006718:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d12e      	bne.n	8006780 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006722:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006724:	2b00      	cmp	r3, #0
 8006726:	da2b      	bge.n	8006780 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8006734:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006738:	429a      	cmp	r2, r3
 800673a:	d121      	bne.n	8006780 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800673c:	6879      	ldr	r1, [r7, #4]
 800673e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006740:	4613      	mov	r3, r2
 8006742:	00db      	lsls	r3, r3, #3
 8006744:	4413      	add	r3, r2
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	440b      	add	r3, r1
 800674a:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800674e:	2201      	movs	r2, #1
 8006750:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006752:	6a3b      	ldr	r3, [r7, #32]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800675a:	6a3b      	ldr	r3, [r7, #32]
 800675c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800675e:	6a3b      	ldr	r3, [r7, #32]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006766:	2b00      	cmp	r3, #0
 8006768:	d10a      	bne.n	8006780 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	69fa      	ldr	r2, [r7, #28]
 8006774:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006778:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800677c:	6053      	str	r3, [r2, #4]
            break;
 800677e:	e007      	b.n	8006790 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006782:	3301      	adds	r3, #1
 8006784:	627b      	str	r3, [r7, #36]	@ 0x24
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800678c:	429a      	cmp	r2, r3
 800678e:	d3b4      	bcc.n	80066fa <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	695a      	ldr	r2, [r3, #20]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800679e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4618      	mov	r0, r3
 80067a6:	f005 fdbf 	bl	800c328 <USB_ReadInterrupts>
 80067aa:	4603      	mov	r3, r0
 80067ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80067b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067b4:	d10a      	bne.n	80067cc <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f008 fa76 	bl	800eca8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	695a      	ldr	r2, [r3, #20]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80067ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f005 fda9 	bl	800c328 <USB_ReadInterrupts>
 80067d6:	4603      	mov	r3, r0
 80067d8:	f003 0304 	and.w	r3, r3, #4
 80067dc:	2b04      	cmp	r3, #4
 80067de:	d115      	bne.n	800680c <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	f003 0304 	and.w	r3, r3, #4
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d002      	beq.n	80067f8 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f008 fa66 	bl	800ecc4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	6859      	ldr	r1, [r3, #4]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	69ba      	ldr	r2, [r7, #24]
 8006804:	430a      	orrs	r2, r1
 8006806:	605a      	str	r2, [r3, #4]
 8006808:	e000      	b.n	800680c <HAL_PCD_IRQHandler+0x992>
      return;
 800680a:	bf00      	nop
    }
  }
}
 800680c:	3734      	adds	r7, #52	@ 0x34
 800680e:	46bd      	mov	sp, r7
 8006810:	bd90      	pop	{r4, r7, pc}

08006812 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b082      	sub	sp, #8
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
 800681a:	460b      	mov	r3, r1
 800681c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8006824:	2b01      	cmp	r3, #1
 8006826:	d101      	bne.n	800682c <HAL_PCD_SetAddress+0x1a>
 8006828:	2302      	movs	r3, #2
 800682a:	e013      	b.n	8006854 <HAL_PCD_SetAddress+0x42>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	78fa      	ldrb	r2, [r7, #3]
 8006838:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	78fa      	ldrb	r2, [r7, #3]
 8006842:	4611      	mov	r1, r2
 8006844:	4618      	mov	r0, r3
 8006846:	f005 fd07 	bl	800c258 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	4608      	mov	r0, r1
 8006866:	4611      	mov	r1, r2
 8006868:	461a      	mov	r2, r3
 800686a:	4603      	mov	r3, r0
 800686c:	70fb      	strb	r3, [r7, #3]
 800686e:	460b      	mov	r3, r1
 8006870:	803b      	strh	r3, [r7, #0]
 8006872:	4613      	mov	r3, r2
 8006874:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006876:	2300      	movs	r3, #0
 8006878:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800687a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800687e:	2b00      	cmp	r3, #0
 8006880:	da0f      	bge.n	80068a2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006882:	78fb      	ldrb	r3, [r7, #3]
 8006884:	f003 020f 	and.w	r2, r3, #15
 8006888:	4613      	mov	r3, r2
 800688a:	00db      	lsls	r3, r3, #3
 800688c:	4413      	add	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	3338      	adds	r3, #56	@ 0x38
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	4413      	add	r3, r2
 8006896:	3304      	adds	r3, #4
 8006898:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2201      	movs	r2, #1
 800689e:	705a      	strb	r2, [r3, #1]
 80068a0:	e00f      	b.n	80068c2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80068a2:	78fb      	ldrb	r3, [r7, #3]
 80068a4:	f003 020f 	and.w	r2, r3, #15
 80068a8:	4613      	mov	r3, r2
 80068aa:	00db      	lsls	r3, r3, #3
 80068ac:	4413      	add	r3, r2
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	4413      	add	r3, r2
 80068b8:	3304      	adds	r3, #4
 80068ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80068c2:	78fb      	ldrb	r3, [r7, #3]
 80068c4:	f003 030f 	and.w	r3, r3, #15
 80068c8:	b2da      	uxtb	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80068ce:	883a      	ldrh	r2, [r7, #0]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	78ba      	ldrb	r2, [r7, #2]
 80068d8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	785b      	ldrb	r3, [r3, #1]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d004      	beq.n	80068ec <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	461a      	mov	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80068ec:	78bb      	ldrb	r3, [r7, #2]
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d102      	bne.n	80068f8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d101      	bne.n	8006906 <HAL_PCD_EP_Open+0xaa>
 8006902:	2302      	movs	r3, #2
 8006904:	e00e      	b.n	8006924 <HAL_PCD_EP_Open+0xc8>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68f9      	ldr	r1, [r7, #12]
 8006914:	4618      	mov	r0, r3
 8006916:	f004 fd7b 	bl	800b410 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8006922:	7afb      	ldrb	r3, [r7, #11]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	460b      	mov	r3, r1
 8006936:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006938:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800693c:	2b00      	cmp	r3, #0
 800693e:	da0f      	bge.n	8006960 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006940:	78fb      	ldrb	r3, [r7, #3]
 8006942:	f003 020f 	and.w	r2, r3, #15
 8006946:	4613      	mov	r3, r2
 8006948:	00db      	lsls	r3, r3, #3
 800694a:	4413      	add	r3, r2
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	3338      	adds	r3, #56	@ 0x38
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	4413      	add	r3, r2
 8006954:	3304      	adds	r3, #4
 8006956:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2201      	movs	r2, #1
 800695c:	705a      	strb	r2, [r3, #1]
 800695e:	e00f      	b.n	8006980 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006960:	78fb      	ldrb	r3, [r7, #3]
 8006962:	f003 020f 	and.w	r2, r3, #15
 8006966:	4613      	mov	r3, r2
 8006968:	00db      	lsls	r3, r3, #3
 800696a:	4413      	add	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	4413      	add	r3, r2
 8006976:	3304      	adds	r3, #4
 8006978:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006980:	78fb      	ldrb	r3, [r7, #3]
 8006982:	f003 030f 	and.w	r3, r3, #15
 8006986:	b2da      	uxtb	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8006992:	2b01      	cmp	r3, #1
 8006994:	d101      	bne.n	800699a <HAL_PCD_EP_Close+0x6e>
 8006996:	2302      	movs	r3, #2
 8006998:	e00e      	b.n	80069b8 <HAL_PCD_EP_Close+0x8c>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2201      	movs	r2, #1
 800699e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68f9      	ldr	r1, [r7, #12]
 80069a8:	4618      	mov	r0, r3
 80069aa:	f004 fdb9 	bl	800b520 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	607a      	str	r2, [r7, #4]
 80069ca:	603b      	str	r3, [r7, #0]
 80069cc:	460b      	mov	r3, r1
 80069ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069d0:	7afb      	ldrb	r3, [r7, #11]
 80069d2:	f003 020f 	and.w	r2, r3, #15
 80069d6:	4613      	mov	r3, r2
 80069d8:	00db      	lsls	r3, r3, #3
 80069da:	4413      	add	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	4413      	add	r3, r2
 80069e6:	3304      	adds	r3, #4
 80069e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	2200      	movs	r2, #0
 80069fa:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	2200      	movs	r2, #0
 8006a00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a02:	7afb      	ldrb	r3, [r7, #11]
 8006a04:	f003 030f 	and.w	r3, r3, #15
 8006a08:	b2da      	uxtb	r2, r3
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d102      	bne.n	8006a1c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006a1c:	7afb      	ldrb	r3, [r7, #11]
 8006a1e:	f003 030f 	and.w	r3, r3, #15
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d109      	bne.n	8006a3a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6818      	ldr	r0, [r3, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	461a      	mov	r2, r3
 8006a32:	6979      	ldr	r1, [r7, #20]
 8006a34:	f005 f8a0 	bl	800bb78 <USB_EP0StartXfer>
 8006a38:	e008      	b.n	8006a4c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6818      	ldr	r0, [r3, #0]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	461a      	mov	r2, r3
 8006a46:	6979      	ldr	r1, [r7, #20]
 8006a48:	f004 fe46 	bl	800b6d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3718      	adds	r7, #24
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b083      	sub	sp, #12
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	460b      	mov	r3, r1
 8006a60:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006a62:	78fb      	ldrb	r3, [r7, #3]
 8006a64:	f003 020f 	and.w	r2, r3, #15
 8006a68:	6879      	ldr	r1, [r7, #4]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	00db      	lsls	r3, r3, #3
 8006a6e:	4413      	add	r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	440b      	add	r3, r1
 8006a74:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8006a78:	681b      	ldr	r3, [r3, #0]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	370c      	adds	r7, #12
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b086      	sub	sp, #24
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	60f8      	str	r0, [r7, #12]
 8006a8e:	607a      	str	r2, [r7, #4]
 8006a90:	603b      	str	r3, [r7, #0]
 8006a92:	460b      	mov	r3, r1
 8006a94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a96:	7afb      	ldrb	r3, [r7, #11]
 8006a98:	f003 020f 	and.w	r2, r3, #15
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	00db      	lsls	r3, r3, #3
 8006aa0:	4413      	add	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	3338      	adds	r3, #56	@ 0x38
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	3304      	adds	r3, #4
 8006aac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	2200      	movs	r2, #0
 8006abe:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ac6:	7afb      	ldrb	r3, [r7, #11]
 8006ac8:	f003 030f 	and.w	r3, r3, #15
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d102      	bne.n	8006ae0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006ae0:	7afb      	ldrb	r3, [r7, #11]
 8006ae2:	f003 030f 	and.w	r3, r3, #15
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d109      	bne.n	8006afe <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6818      	ldr	r0, [r3, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	461a      	mov	r2, r3
 8006af6:	6979      	ldr	r1, [r7, #20]
 8006af8:	f005 f83e 	bl	800bb78 <USB_EP0StartXfer>
 8006afc:	e008      	b.n	8006b10 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6818      	ldr	r0, [r3, #0]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	461a      	mov	r2, r3
 8006b0a:	6979      	ldr	r1, [r7, #20]
 8006b0c:	f004 fde4 	bl	800b6d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3718      	adds	r7, #24
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b084      	sub	sp, #16
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
 8006b22:	460b      	mov	r3, r1
 8006b24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006b26:	78fb      	ldrb	r3, [r7, #3]
 8006b28:	f003 020f 	and.w	r2, r3, #15
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d901      	bls.n	8006b38 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e050      	b.n	8006bda <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006b38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	da0f      	bge.n	8006b60 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b40:	78fb      	ldrb	r3, [r7, #3]
 8006b42:	f003 020f 	and.w	r2, r3, #15
 8006b46:	4613      	mov	r3, r2
 8006b48:	00db      	lsls	r3, r3, #3
 8006b4a:	4413      	add	r3, r2
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	3338      	adds	r3, #56	@ 0x38
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	4413      	add	r3, r2
 8006b54:	3304      	adds	r3, #4
 8006b56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	705a      	strb	r2, [r3, #1]
 8006b5e:	e00d      	b.n	8006b7c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006b60:	78fa      	ldrb	r2, [r7, #3]
 8006b62:	4613      	mov	r3, r2
 8006b64:	00db      	lsls	r3, r3, #3
 8006b66:	4413      	add	r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	4413      	add	r3, r2
 8006b72:	3304      	adds	r3, #4
 8006b74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b82:	78fb      	ldrb	r3, [r7, #3]
 8006b84:	f003 030f 	and.w	r3, r3, #15
 8006b88:	b2da      	uxtb	r2, r3
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d101      	bne.n	8006b9c <HAL_PCD_EP_SetStall+0x82>
 8006b98:	2302      	movs	r3, #2
 8006b9a:	e01e      	b.n	8006bda <HAL_PCD_EP_SetStall+0xc0>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68f9      	ldr	r1, [r7, #12]
 8006baa:	4618      	mov	r0, r3
 8006bac:	f005 fa80 	bl	800c0b0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006bb0:	78fb      	ldrb	r3, [r7, #3]
 8006bb2:	f003 030f 	and.w	r3, r3, #15
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10a      	bne.n	8006bd0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6818      	ldr	r0, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	b2d9      	uxtb	r1, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8006bca:	461a      	mov	r2, r3
 8006bcc:	f005 fc72 	bl	800c4b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b084      	sub	sp, #16
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	460b      	mov	r3, r1
 8006bec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006bee:	78fb      	ldrb	r3, [r7, #3]
 8006bf0:	f003 020f 	and.w	r2, r3, #15
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d901      	bls.n	8006c00 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e042      	b.n	8006c86 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006c00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	da0f      	bge.n	8006c28 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c08:	78fb      	ldrb	r3, [r7, #3]
 8006c0a:	f003 020f 	and.w	r2, r3, #15
 8006c0e:	4613      	mov	r3, r2
 8006c10:	00db      	lsls	r3, r3, #3
 8006c12:	4413      	add	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	3338      	adds	r3, #56	@ 0x38
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	3304      	adds	r3, #4
 8006c1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2201      	movs	r2, #1
 8006c24:	705a      	strb	r2, [r3, #1]
 8006c26:	e00f      	b.n	8006c48 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c28:	78fb      	ldrb	r3, [r7, #3]
 8006c2a:	f003 020f 	and.w	r2, r3, #15
 8006c2e:	4613      	mov	r3, r2
 8006c30:	00db      	lsls	r3, r3, #3
 8006c32:	4413      	add	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	3304      	adds	r3, #4
 8006c40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c4e:	78fb      	ldrb	r3, [r7, #3]
 8006c50:	f003 030f 	and.w	r3, r3, #15
 8006c54:	b2da      	uxtb	r2, r3
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d101      	bne.n	8006c68 <HAL_PCD_EP_ClrStall+0x86>
 8006c64:	2302      	movs	r3, #2
 8006c66:	e00e      	b.n	8006c86 <HAL_PCD_EP_ClrStall+0xa4>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68f9      	ldr	r1, [r7, #12]
 8006c76:	4618      	mov	r0, r3
 8006c78:	f005 fa88 	bl	800c18c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b084      	sub	sp, #16
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
 8006c96:	460b      	mov	r3, r1
 8006c98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006c9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	da0c      	bge.n	8006cbc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ca2:	78fb      	ldrb	r3, [r7, #3]
 8006ca4:	f003 020f 	and.w	r2, r3, #15
 8006ca8:	4613      	mov	r3, r2
 8006caa:	00db      	lsls	r3, r3, #3
 8006cac:	4413      	add	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	3338      	adds	r3, #56	@ 0x38
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	60fb      	str	r3, [r7, #12]
 8006cba:	e00c      	b.n	8006cd6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006cbc:	78fb      	ldrb	r3, [r7, #3]
 8006cbe:	f003 020f 	and.w	r2, r3, #15
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	00db      	lsls	r3, r3, #3
 8006cc6:	4413      	add	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	3304      	adds	r3, #4
 8006cd4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68f9      	ldr	r1, [r7, #12]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f005 f8a7 	bl	800be30 <USB_EPStopXfer>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006ce6:	7afb      	ldrb	r3, [r7, #11]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b08a      	sub	sp, #40	@ 0x28
 8006cf4:	af02      	add	r7, sp, #8
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006d04:	683a      	ldr	r2, [r7, #0]
 8006d06:	4613      	mov	r3, r2
 8006d08:	00db      	lsls	r3, r3, #3
 8006d0a:	4413      	add	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	3338      	adds	r3, #56	@ 0x38
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	4413      	add	r3, r2
 8006d14:	3304      	adds	r3, #4
 8006d16:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6a1a      	ldr	r2, [r3, #32]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d901      	bls.n	8006d28 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e06c      	b.n	8006e02 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	699a      	ldr	r2, [r3, #24]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6a1b      	ldr	r3, [r3, #32]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	69fa      	ldr	r2, [r7, #28]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d902      	bls.n	8006d44 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	3303      	adds	r3, #3
 8006d48:	089b      	lsrs	r3, r3, #2
 8006d4a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006d4c:	e02b      	b.n	8006da6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	699a      	ldr	r2, [r3, #24]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	69fa      	ldr	r2, [r7, #28]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d902      	bls.n	8006d6a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	3303      	adds	r3, #3
 8006d6e:	089b      	lsrs	r3, r3, #2
 8006d70:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6919      	ldr	r1, [r3, #16]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	4603      	mov	r3, r0
 8006d88:	6978      	ldr	r0, [r7, #20]
 8006d8a:	f005 f8fb 	bl	800bf84 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	691a      	ldr	r2, [r3, #16]
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	441a      	add	r2, r3
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6a1a      	ldr	r2, [r3, #32]
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	441a      	add	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	015a      	lsls	r2, r3, #5
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	4413      	add	r3, r2
 8006dae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006db6:	69ba      	ldr	r2, [r7, #24]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d809      	bhi.n	8006dd0 <PCD_WriteEmptyTxFifo+0xe0>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6a1a      	ldr	r2, [r3, #32]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d203      	bcs.n	8006dd0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1be      	bne.n	8006d4e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	699a      	ldr	r2, [r3, #24]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6a1b      	ldr	r3, [r3, #32]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d811      	bhi.n	8006e00 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	f003 030f 	and.w	r3, r3, #15
 8006de2:	2201      	movs	r2, #1
 8006de4:	fa02 f303 	lsl.w	r3, r2, r3
 8006de8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006df0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	43db      	mvns	r3, r3
 8006df6:	6939      	ldr	r1, [r7, #16]
 8006df8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3720      	adds	r7, #32
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
	...

08006e0c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b088      	sub	sp, #32
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	333c      	adds	r3, #60	@ 0x3c
 8006e24:	3304      	adds	r3, #4
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	015a      	lsls	r2, r3, #5
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	4413      	add	r3, r2
 8006e32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d17b      	bne.n	8006f3a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	f003 0308 	and.w	r3, r3, #8
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d015      	beq.n	8006e78 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	4a61      	ldr	r2, [pc, #388]	@ (8006fd4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	f240 80b9 	bls.w	8006fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 80b3 	beq.w	8006fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	015a      	lsls	r2, r3, #5
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	4413      	add	r3, r2
 8006e6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e6e:	461a      	mov	r2, r3
 8006e70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e74:	6093      	str	r3, [r2, #8]
 8006e76:	e0a7      	b.n	8006fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	f003 0320 	and.w	r3, r3, #32
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d009      	beq.n	8006e96 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	015a      	lsls	r2, r3, #5
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	4413      	add	r3, r2
 8006e8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e8e:	461a      	mov	r2, r3
 8006e90:	2320      	movs	r3, #32
 8006e92:	6093      	str	r3, [r2, #8]
 8006e94:	e098      	b.n	8006fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f040 8093 	bne.w	8006fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	4a4b      	ldr	r2, [pc, #300]	@ (8006fd4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d90f      	bls.n	8006eca <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00a      	beq.n	8006eca <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	015a      	lsls	r2, r3, #5
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ec6:	6093      	str	r3, [r2, #8]
 8006ec8:	e07e      	b.n	8006fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	00db      	lsls	r3, r3, #3
 8006ed0:	4413      	add	r3, r2
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	4413      	add	r3, r2
 8006edc:	3304      	adds	r3, #4
 8006ede:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	69da      	ldr	r2, [r3, #28]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	0159      	lsls	r1, r3, #5
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	440b      	add	r3, r1
 8006eec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ef6:	1ad2      	subs	r2, r2, r3
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d114      	bne.n	8006f2c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	699b      	ldr	r3, [r3, #24]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d109      	bne.n	8006f1e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6818      	ldr	r0, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8006f14:	461a      	mov	r2, r3
 8006f16:	2101      	movs	r1, #1
 8006f18:	f005 facc 	bl	800c4b4 <USB_EP0_OutStart>
 8006f1c:	e006      	b.n	8006f2c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	691a      	ldr	r2, [r3, #16]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	441a      	add	r2, r3
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	4619      	mov	r1, r3
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f007 fdf4 	bl	800eb20 <HAL_PCD_DataOutStageCallback>
 8006f38:	e046      	b.n	8006fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	4a26      	ldr	r2, [pc, #152]	@ (8006fd8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d124      	bne.n	8006f8c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00a      	beq.n	8006f62 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f58:	461a      	mov	r2, r3
 8006f5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f5e:	6093      	str	r3, [r2, #8]
 8006f60:	e032      	b.n	8006fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	f003 0320 	and.w	r3, r3, #32
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d008      	beq.n	8006f7e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	015a      	lsls	r2, r3, #5
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	4413      	add	r3, r2
 8006f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f78:	461a      	mov	r2, r3
 8006f7a:	2320      	movs	r3, #32
 8006f7c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	4619      	mov	r1, r3
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f007 fdcb 	bl	800eb20 <HAL_PCD_DataOutStageCallback>
 8006f8a:	e01d      	b.n	8006fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d114      	bne.n	8006fbc <PCD_EP_OutXfrComplete_int+0x1b0>
 8006f92:	6879      	ldr	r1, [r7, #4]
 8006f94:	683a      	ldr	r2, [r7, #0]
 8006f96:	4613      	mov	r3, r2
 8006f98:	00db      	lsls	r3, r3, #3
 8006f9a:	4413      	add	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	440b      	add	r3, r1
 8006fa0:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d108      	bne.n	8006fbc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6818      	ldr	r0, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	f005 fa7c 	bl	800c4b4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f007 fdac 	bl	800eb20 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3720      	adds	r7, #32
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	4f54300a 	.word	0x4f54300a
 8006fd8:	4f54310a 	.word	0x4f54310a

08006fdc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	333c      	adds	r3, #60	@ 0x3c
 8006ff4:	3304      	adds	r3, #4
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	4413      	add	r3, r2
 8007002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	4a15      	ldr	r2, [pc, #84]	@ (8007064 <PCD_EP_OutSetupPacket_int+0x88>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d90e      	bls.n	8007030 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007018:	2b00      	cmp	r3, #0
 800701a:	d009      	beq.n	8007030 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	4413      	add	r3, r2
 8007024:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007028:	461a      	mov	r2, r3
 800702a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800702e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f007 fd63 	bl	800eafc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	4a0a      	ldr	r2, [pc, #40]	@ (8007064 <PCD_EP_OutSetupPacket_int+0x88>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d90c      	bls.n	8007058 <PCD_EP_OutSetupPacket_int+0x7c>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d108      	bne.n	8007058 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6818      	ldr	r0, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007050:	461a      	mov	r2, r3
 8007052:	2101      	movs	r1, #1
 8007054:	f005 fa2e 	bl	800c4b4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3718      	adds	r7, #24
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	4f54300a 	.word	0x4f54300a

08007068 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	460b      	mov	r3, r1
 8007072:	70fb      	strb	r3, [r7, #3]
 8007074:	4613      	mov	r3, r2
 8007076:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800707e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007080:	78fb      	ldrb	r3, [r7, #3]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d107      	bne.n	8007096 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007086:	883b      	ldrh	r3, [r7, #0]
 8007088:	0419      	lsls	r1, r3, #16
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	430a      	orrs	r2, r1
 8007092:	629a      	str	r2, [r3, #40]	@ 0x28
 8007094:	e028      	b.n	80070e8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800709c:	0c1b      	lsrs	r3, r3, #16
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	4413      	add	r3, r2
 80070a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80070a4:	2300      	movs	r3, #0
 80070a6:	73fb      	strb	r3, [r7, #15]
 80070a8:	e00d      	b.n	80070c6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	7bfb      	ldrb	r3, [r7, #15]
 80070b0:	3340      	adds	r3, #64	@ 0x40
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4413      	add	r3, r2
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	0c1b      	lsrs	r3, r3, #16
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	4413      	add	r3, r2
 80070be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80070c0:	7bfb      	ldrb	r3, [r7, #15]
 80070c2:	3301      	adds	r3, #1
 80070c4:	73fb      	strb	r3, [r7, #15]
 80070c6:	7bfa      	ldrb	r2, [r7, #15]
 80070c8:	78fb      	ldrb	r3, [r7, #3]
 80070ca:	3b01      	subs	r3, #1
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d3ec      	bcc.n	80070aa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80070d0:	883b      	ldrh	r3, [r7, #0]
 80070d2:	0418      	lsls	r0, r3, #16
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6819      	ldr	r1, [r3, #0]
 80070d8:	78fb      	ldrb	r3, [r7, #3]
 80070da:	3b01      	subs	r3, #1
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	4302      	orrs	r2, r0
 80070e0:	3340      	adds	r3, #64	@ 0x40
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	440b      	add	r3, r1
 80070e6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3714      	adds	r7, #20
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr

080070f6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80070f6:	b480      	push	{r7}
 80070f8:	b083      	sub	sp, #12
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
 80070fe:	460b      	mov	r3, r1
 8007100:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	887a      	ldrh	r2, [r7, #2]
 8007108:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007146:	4b05      	ldr	r3, [pc, #20]	@ (800715c <HAL_PCDEx_ActivateLPM+0x44>)
 8007148:	4313      	orrs	r3, r2
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3714      	adds	r7, #20
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr
 800715c:	10000003 	.word	0x10000003

08007160 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007160:	b480      	push	{r7}
 8007162:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007164:	4b05      	ldr	r3, [pc, #20]	@ (800717c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a04      	ldr	r2, [pc, #16]	@ (800717c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800716a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800716e:	6013      	str	r3, [r2, #0]
}
 8007170:	bf00      	nop
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	40007000 	.word	0x40007000

08007180 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007186:	2300      	movs	r3, #0
 8007188:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800718a:	4b23      	ldr	r3, [pc, #140]	@ (8007218 <HAL_PWREx_EnableOverDrive+0x98>)
 800718c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800718e:	4a22      	ldr	r2, [pc, #136]	@ (8007218 <HAL_PWREx_EnableOverDrive+0x98>)
 8007190:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007194:	6413      	str	r3, [r2, #64]	@ 0x40
 8007196:	4b20      	ldr	r3, [pc, #128]	@ (8007218 <HAL_PWREx_EnableOverDrive+0x98>)
 8007198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800719a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800719e:	603b      	str	r3, [r7, #0]
 80071a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80071a2:	4b1e      	ldr	r3, [pc, #120]	@ (800721c <HAL_PWREx_EnableOverDrive+0x9c>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a1d      	ldr	r2, [pc, #116]	@ (800721c <HAL_PWREx_EnableOverDrive+0x9c>)
 80071a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071ac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80071ae:	f7fd f8df 	bl	8004370 <HAL_GetTick>
 80071b2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80071b4:	e009      	b.n	80071ca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80071b6:	f7fd f8db 	bl	8004370 <HAL_GetTick>
 80071ba:	4602      	mov	r2, r0
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80071c4:	d901      	bls.n	80071ca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e022      	b.n	8007210 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80071ca:	4b14      	ldr	r3, [pc, #80]	@ (800721c <HAL_PWREx_EnableOverDrive+0x9c>)
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071d6:	d1ee      	bne.n	80071b6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80071d8:	4b10      	ldr	r3, [pc, #64]	@ (800721c <HAL_PWREx_EnableOverDrive+0x9c>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a0f      	ldr	r2, [pc, #60]	@ (800721c <HAL_PWREx_EnableOverDrive+0x9c>)
 80071de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80071e4:	f7fd f8c4 	bl	8004370 <HAL_GetTick>
 80071e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80071ea:	e009      	b.n	8007200 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80071ec:	f7fd f8c0 	bl	8004370 <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80071fa:	d901      	bls.n	8007200 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80071fc:	2303      	movs	r3, #3
 80071fe:	e007      	b.n	8007210 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007200:	4b06      	ldr	r3, [pc, #24]	@ (800721c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007208:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800720c:	d1ee      	bne.n	80071ec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3708      	adds	r7, #8
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	40023800 	.word	0x40023800
 800721c:	40007000 	.word	0x40007000

08007220 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007228:	2300      	movs	r3, #0
 800722a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e291      	b.n	800775a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 8087 	beq.w	8007352 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007244:	4b96      	ldr	r3, [pc, #600]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	f003 030c 	and.w	r3, r3, #12
 800724c:	2b04      	cmp	r3, #4
 800724e:	d00c      	beq.n	800726a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007250:	4b93      	ldr	r3, [pc, #588]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f003 030c 	and.w	r3, r3, #12
 8007258:	2b08      	cmp	r3, #8
 800725a:	d112      	bne.n	8007282 <HAL_RCC_OscConfig+0x62>
 800725c:	4b90      	ldr	r3, [pc, #576]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007264:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007268:	d10b      	bne.n	8007282 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800726a:	4b8d      	ldr	r3, [pc, #564]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007272:	2b00      	cmp	r3, #0
 8007274:	d06c      	beq.n	8007350 <HAL_RCC_OscConfig+0x130>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d168      	bne.n	8007350 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e26b      	b.n	800775a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800728a:	d106      	bne.n	800729a <HAL_RCC_OscConfig+0x7a>
 800728c:	4b84      	ldr	r3, [pc, #528]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a83      	ldr	r2, [pc, #524]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 8007292:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007296:	6013      	str	r3, [r2, #0]
 8007298:	e02e      	b.n	80072f8 <HAL_RCC_OscConfig+0xd8>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d10c      	bne.n	80072bc <HAL_RCC_OscConfig+0x9c>
 80072a2:	4b7f      	ldr	r3, [pc, #508]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a7e      	ldr	r2, [pc, #504]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 80072a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072ac:	6013      	str	r3, [r2, #0]
 80072ae:	4b7c      	ldr	r3, [pc, #496]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a7b      	ldr	r2, [pc, #492]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 80072b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80072b8:	6013      	str	r3, [r2, #0]
 80072ba:	e01d      	b.n	80072f8 <HAL_RCC_OscConfig+0xd8>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80072c4:	d10c      	bne.n	80072e0 <HAL_RCC_OscConfig+0xc0>
 80072c6:	4b76      	ldr	r3, [pc, #472]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a75      	ldr	r2, [pc, #468]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 80072cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80072d0:	6013      	str	r3, [r2, #0]
 80072d2:	4b73      	ldr	r3, [pc, #460]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a72      	ldr	r2, [pc, #456]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 80072d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072dc:	6013      	str	r3, [r2, #0]
 80072de:	e00b      	b.n	80072f8 <HAL_RCC_OscConfig+0xd8>
 80072e0:	4b6f      	ldr	r3, [pc, #444]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a6e      	ldr	r2, [pc, #440]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 80072e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072ea:	6013      	str	r3, [r2, #0]
 80072ec:	4b6c      	ldr	r3, [pc, #432]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a6b      	ldr	r2, [pc, #428]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 80072f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80072f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d013      	beq.n	8007328 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007300:	f7fd f836 	bl	8004370 <HAL_GetTick>
 8007304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007306:	e008      	b.n	800731a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007308:	f7fd f832 	bl	8004370 <HAL_GetTick>
 800730c:	4602      	mov	r2, r0
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	2b64      	cmp	r3, #100	@ 0x64
 8007314:	d901      	bls.n	800731a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	e21f      	b.n	800775a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800731a:	4b61      	ldr	r3, [pc, #388]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007322:	2b00      	cmp	r3, #0
 8007324:	d0f0      	beq.n	8007308 <HAL_RCC_OscConfig+0xe8>
 8007326:	e014      	b.n	8007352 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007328:	f7fd f822 	bl	8004370 <HAL_GetTick>
 800732c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800732e:	e008      	b.n	8007342 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007330:	f7fd f81e 	bl	8004370 <HAL_GetTick>
 8007334:	4602      	mov	r2, r0
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	2b64      	cmp	r3, #100	@ 0x64
 800733c:	d901      	bls.n	8007342 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e20b      	b.n	800775a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007342:	4b57      	ldr	r3, [pc, #348]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1f0      	bne.n	8007330 <HAL_RCC_OscConfig+0x110>
 800734e:	e000      	b.n	8007352 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0302 	and.w	r3, r3, #2
 800735a:	2b00      	cmp	r3, #0
 800735c:	d069      	beq.n	8007432 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800735e:	4b50      	ldr	r3, [pc, #320]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	f003 030c 	and.w	r3, r3, #12
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00b      	beq.n	8007382 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800736a:	4b4d      	ldr	r3, [pc, #308]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	f003 030c 	and.w	r3, r3, #12
 8007372:	2b08      	cmp	r3, #8
 8007374:	d11c      	bne.n	80073b0 <HAL_RCC_OscConfig+0x190>
 8007376:	4b4a      	ldr	r3, [pc, #296]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800737e:	2b00      	cmp	r3, #0
 8007380:	d116      	bne.n	80073b0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007382:	4b47      	ldr	r3, [pc, #284]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0302 	and.w	r3, r3, #2
 800738a:	2b00      	cmp	r3, #0
 800738c:	d005      	beq.n	800739a <HAL_RCC_OscConfig+0x17a>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	2b01      	cmp	r3, #1
 8007394:	d001      	beq.n	800739a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e1df      	b.n	800775a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800739a:	4b41      	ldr	r3, [pc, #260]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	00db      	lsls	r3, r3, #3
 80073a8:	493d      	ldr	r1, [pc, #244]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 80073aa:	4313      	orrs	r3, r2
 80073ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073ae:	e040      	b.n	8007432 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d023      	beq.n	8007400 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80073b8:	4b39      	ldr	r3, [pc, #228]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a38      	ldr	r2, [pc, #224]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 80073be:	f043 0301 	orr.w	r3, r3, #1
 80073c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073c4:	f7fc ffd4 	bl	8004370 <HAL_GetTick>
 80073c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073ca:	e008      	b.n	80073de <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073cc:	f7fc ffd0 	bl	8004370 <HAL_GetTick>
 80073d0:	4602      	mov	r2, r0
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d901      	bls.n	80073de <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	e1bd      	b.n	800775a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073de:	4b30      	ldr	r3, [pc, #192]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0302 	and.w	r3, r3, #2
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d0f0      	beq.n	80073cc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073ea:	4b2d      	ldr	r3, [pc, #180]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	00db      	lsls	r3, r3, #3
 80073f8:	4929      	ldr	r1, [pc, #164]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 80073fa:	4313      	orrs	r3, r2
 80073fc:	600b      	str	r3, [r1, #0]
 80073fe:	e018      	b.n	8007432 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007400:	4b27      	ldr	r3, [pc, #156]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a26      	ldr	r2, [pc, #152]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 8007406:	f023 0301 	bic.w	r3, r3, #1
 800740a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800740c:	f7fc ffb0 	bl	8004370 <HAL_GetTick>
 8007410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007412:	e008      	b.n	8007426 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007414:	f7fc ffac 	bl	8004370 <HAL_GetTick>
 8007418:	4602      	mov	r2, r0
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	2b02      	cmp	r3, #2
 8007420:	d901      	bls.n	8007426 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e199      	b.n	800775a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007426:	4b1e      	ldr	r3, [pc, #120]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 0302 	and.w	r3, r3, #2
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1f0      	bne.n	8007414 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 0308 	and.w	r3, r3, #8
 800743a:	2b00      	cmp	r3, #0
 800743c:	d038      	beq.n	80074b0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d019      	beq.n	800747a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007446:	4b16      	ldr	r3, [pc, #88]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 8007448:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800744a:	4a15      	ldr	r2, [pc, #84]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 800744c:	f043 0301 	orr.w	r3, r3, #1
 8007450:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007452:	f7fc ff8d 	bl	8004370 <HAL_GetTick>
 8007456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007458:	e008      	b.n	800746c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800745a:	f7fc ff89 	bl	8004370 <HAL_GetTick>
 800745e:	4602      	mov	r2, r0
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	2b02      	cmp	r3, #2
 8007466:	d901      	bls.n	800746c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007468:	2303      	movs	r3, #3
 800746a:	e176      	b.n	800775a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800746c:	4b0c      	ldr	r3, [pc, #48]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 800746e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007470:	f003 0302 	and.w	r3, r3, #2
 8007474:	2b00      	cmp	r3, #0
 8007476:	d0f0      	beq.n	800745a <HAL_RCC_OscConfig+0x23a>
 8007478:	e01a      	b.n	80074b0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800747a:	4b09      	ldr	r3, [pc, #36]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 800747c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800747e:	4a08      	ldr	r2, [pc, #32]	@ (80074a0 <HAL_RCC_OscConfig+0x280>)
 8007480:	f023 0301 	bic.w	r3, r3, #1
 8007484:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007486:	f7fc ff73 	bl	8004370 <HAL_GetTick>
 800748a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800748c:	e00a      	b.n	80074a4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800748e:	f7fc ff6f 	bl	8004370 <HAL_GetTick>
 8007492:	4602      	mov	r2, r0
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	2b02      	cmp	r3, #2
 800749a:	d903      	bls.n	80074a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e15c      	b.n	800775a <HAL_RCC_OscConfig+0x53a>
 80074a0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074a4:	4b91      	ldr	r3, [pc, #580]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 80074a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074a8:	f003 0302 	and.w	r3, r3, #2
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1ee      	bne.n	800748e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0304 	and.w	r3, r3, #4
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f000 80a4 	beq.w	8007606 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074be:	4b8b      	ldr	r3, [pc, #556]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 80074c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10d      	bne.n	80074e6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80074ca:	4b88      	ldr	r3, [pc, #544]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 80074cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ce:	4a87      	ldr	r2, [pc, #540]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 80074d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80074d6:	4b85      	ldr	r3, [pc, #532]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 80074d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074de:	60bb      	str	r3, [r7, #8]
 80074e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074e2:	2301      	movs	r3, #1
 80074e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074e6:	4b82      	ldr	r3, [pc, #520]	@ (80076f0 <HAL_RCC_OscConfig+0x4d0>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d118      	bne.n	8007524 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80074f2:	4b7f      	ldr	r3, [pc, #508]	@ (80076f0 <HAL_RCC_OscConfig+0x4d0>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a7e      	ldr	r2, [pc, #504]	@ (80076f0 <HAL_RCC_OscConfig+0x4d0>)
 80074f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074fe:	f7fc ff37 	bl	8004370 <HAL_GetTick>
 8007502:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007504:	e008      	b.n	8007518 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007506:	f7fc ff33 	bl	8004370 <HAL_GetTick>
 800750a:	4602      	mov	r2, r0
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	1ad3      	subs	r3, r2, r3
 8007510:	2b64      	cmp	r3, #100	@ 0x64
 8007512:	d901      	bls.n	8007518 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007514:	2303      	movs	r3, #3
 8007516:	e120      	b.n	800775a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007518:	4b75      	ldr	r3, [pc, #468]	@ (80076f0 <HAL_RCC_OscConfig+0x4d0>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007520:	2b00      	cmp	r3, #0
 8007522:	d0f0      	beq.n	8007506 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	2b01      	cmp	r3, #1
 800752a:	d106      	bne.n	800753a <HAL_RCC_OscConfig+0x31a>
 800752c:	4b6f      	ldr	r3, [pc, #444]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 800752e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007530:	4a6e      	ldr	r2, [pc, #440]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 8007532:	f043 0301 	orr.w	r3, r3, #1
 8007536:	6713      	str	r3, [r2, #112]	@ 0x70
 8007538:	e02d      	b.n	8007596 <HAL_RCC_OscConfig+0x376>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d10c      	bne.n	800755c <HAL_RCC_OscConfig+0x33c>
 8007542:	4b6a      	ldr	r3, [pc, #424]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 8007544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007546:	4a69      	ldr	r2, [pc, #420]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 8007548:	f023 0301 	bic.w	r3, r3, #1
 800754c:	6713      	str	r3, [r2, #112]	@ 0x70
 800754e:	4b67      	ldr	r3, [pc, #412]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 8007550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007552:	4a66      	ldr	r2, [pc, #408]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 8007554:	f023 0304 	bic.w	r3, r3, #4
 8007558:	6713      	str	r3, [r2, #112]	@ 0x70
 800755a:	e01c      	b.n	8007596 <HAL_RCC_OscConfig+0x376>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	2b05      	cmp	r3, #5
 8007562:	d10c      	bne.n	800757e <HAL_RCC_OscConfig+0x35e>
 8007564:	4b61      	ldr	r3, [pc, #388]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 8007566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007568:	4a60      	ldr	r2, [pc, #384]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 800756a:	f043 0304 	orr.w	r3, r3, #4
 800756e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007570:	4b5e      	ldr	r3, [pc, #376]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 8007572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007574:	4a5d      	ldr	r2, [pc, #372]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 8007576:	f043 0301 	orr.w	r3, r3, #1
 800757a:	6713      	str	r3, [r2, #112]	@ 0x70
 800757c:	e00b      	b.n	8007596 <HAL_RCC_OscConfig+0x376>
 800757e:	4b5b      	ldr	r3, [pc, #364]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 8007580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007582:	4a5a      	ldr	r2, [pc, #360]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 8007584:	f023 0301 	bic.w	r3, r3, #1
 8007588:	6713      	str	r3, [r2, #112]	@ 0x70
 800758a:	4b58      	ldr	r3, [pc, #352]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 800758c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800758e:	4a57      	ldr	r2, [pc, #348]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 8007590:	f023 0304 	bic.w	r3, r3, #4
 8007594:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d015      	beq.n	80075ca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800759e:	f7fc fee7 	bl	8004370 <HAL_GetTick>
 80075a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075a4:	e00a      	b.n	80075bc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075a6:	f7fc fee3 	bl	8004370 <HAL_GetTick>
 80075aa:	4602      	mov	r2, r0
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d901      	bls.n	80075bc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e0ce      	b.n	800775a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075bc:	4b4b      	ldr	r3, [pc, #300]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 80075be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075c0:	f003 0302 	and.w	r3, r3, #2
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d0ee      	beq.n	80075a6 <HAL_RCC_OscConfig+0x386>
 80075c8:	e014      	b.n	80075f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075ca:	f7fc fed1 	bl	8004370 <HAL_GetTick>
 80075ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075d0:	e00a      	b.n	80075e8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075d2:	f7fc fecd 	bl	8004370 <HAL_GetTick>
 80075d6:	4602      	mov	r2, r0
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d901      	bls.n	80075e8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e0b8      	b.n	800775a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075e8:	4b40      	ldr	r3, [pc, #256]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 80075ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075ec:	f003 0302 	and.w	r3, r3, #2
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1ee      	bne.n	80075d2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80075f4:	7dfb      	ldrb	r3, [r7, #23]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d105      	bne.n	8007606 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075fa:	4b3c      	ldr	r3, [pc, #240]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 80075fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075fe:	4a3b      	ldr	r2, [pc, #236]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 8007600:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007604:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	2b00      	cmp	r3, #0
 800760c:	f000 80a4 	beq.w	8007758 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007610:	4b36      	ldr	r3, [pc, #216]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	f003 030c 	and.w	r3, r3, #12
 8007618:	2b08      	cmp	r3, #8
 800761a:	d06b      	beq.n	80076f4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	2b02      	cmp	r3, #2
 8007622:	d149      	bne.n	80076b8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007624:	4b31      	ldr	r3, [pc, #196]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a30      	ldr	r2, [pc, #192]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 800762a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800762e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007630:	f7fc fe9e 	bl	8004370 <HAL_GetTick>
 8007634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007636:	e008      	b.n	800764a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007638:	f7fc fe9a 	bl	8004370 <HAL_GetTick>
 800763c:	4602      	mov	r2, r0
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	2b02      	cmp	r3, #2
 8007644:	d901      	bls.n	800764a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e087      	b.n	800775a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800764a:	4b28      	ldr	r3, [pc, #160]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1f0      	bne.n	8007638 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	69da      	ldr	r2, [r3, #28]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	431a      	orrs	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007664:	019b      	lsls	r3, r3, #6
 8007666:	431a      	orrs	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800766c:	085b      	lsrs	r3, r3, #1
 800766e:	3b01      	subs	r3, #1
 8007670:	041b      	lsls	r3, r3, #16
 8007672:	431a      	orrs	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007678:	061b      	lsls	r3, r3, #24
 800767a:	4313      	orrs	r3, r2
 800767c:	4a1b      	ldr	r2, [pc, #108]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 800767e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007682:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007684:	4b19      	ldr	r3, [pc, #100]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a18      	ldr	r2, [pc, #96]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 800768a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800768e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007690:	f7fc fe6e 	bl	8004370 <HAL_GetTick>
 8007694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007696:	e008      	b.n	80076aa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007698:	f7fc fe6a 	bl	8004370 <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d901      	bls.n	80076aa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80076a6:	2303      	movs	r3, #3
 80076a8:	e057      	b.n	800775a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076aa:	4b10      	ldr	r3, [pc, #64]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d0f0      	beq.n	8007698 <HAL_RCC_OscConfig+0x478>
 80076b6:	e04f      	b.n	8007758 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076b8:	4b0c      	ldr	r3, [pc, #48]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a0b      	ldr	r2, [pc, #44]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 80076be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80076c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076c4:	f7fc fe54 	bl	8004370 <HAL_GetTick>
 80076c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076ca:	e008      	b.n	80076de <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076cc:	f7fc fe50 	bl	8004370 <HAL_GetTick>
 80076d0:	4602      	mov	r2, r0
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d901      	bls.n	80076de <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e03d      	b.n	800775a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076de:	4b03      	ldr	r3, [pc, #12]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1f0      	bne.n	80076cc <HAL_RCC_OscConfig+0x4ac>
 80076ea:	e035      	b.n	8007758 <HAL_RCC_OscConfig+0x538>
 80076ec:	40023800 	.word	0x40023800
 80076f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80076f4:	4b1b      	ldr	r3, [pc, #108]	@ (8007764 <HAL_RCC_OscConfig+0x544>)
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d028      	beq.n	8007754 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800770c:	429a      	cmp	r2, r3
 800770e:	d121      	bne.n	8007754 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800771a:	429a      	cmp	r2, r3
 800771c:	d11a      	bne.n	8007754 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007724:	4013      	ands	r3, r2
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800772a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800772c:	4293      	cmp	r3, r2
 800772e:	d111      	bne.n	8007754 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800773a:	085b      	lsrs	r3, r3, #1
 800773c:	3b01      	subs	r3, #1
 800773e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007740:	429a      	cmp	r2, r3
 8007742:	d107      	bne.n	8007754 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800774e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007750:	429a      	cmp	r2, r3
 8007752:	d001      	beq.n	8007758 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	e000      	b.n	800775a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3718      	adds	r7, #24
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	40023800 	.word	0x40023800

08007768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007772:	2300      	movs	r3, #0
 8007774:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d101      	bne.n	8007780 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	e0d0      	b.n	8007922 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007780:	4b6a      	ldr	r3, [pc, #424]	@ (800792c <HAL_RCC_ClockConfig+0x1c4>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 030f 	and.w	r3, r3, #15
 8007788:	683a      	ldr	r2, [r7, #0]
 800778a:	429a      	cmp	r2, r3
 800778c:	d910      	bls.n	80077b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800778e:	4b67      	ldr	r3, [pc, #412]	@ (800792c <HAL_RCC_ClockConfig+0x1c4>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f023 020f 	bic.w	r2, r3, #15
 8007796:	4965      	ldr	r1, [pc, #404]	@ (800792c <HAL_RCC_ClockConfig+0x1c4>)
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	4313      	orrs	r3, r2
 800779c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800779e:	4b63      	ldr	r3, [pc, #396]	@ (800792c <HAL_RCC_ClockConfig+0x1c4>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 030f 	and.w	r3, r3, #15
 80077a6:	683a      	ldr	r2, [r7, #0]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d001      	beq.n	80077b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e0b8      	b.n	8007922 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0302 	and.w	r3, r3, #2
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d020      	beq.n	80077fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0304 	and.w	r3, r3, #4
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d005      	beq.n	80077d4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80077c8:	4b59      	ldr	r3, [pc, #356]	@ (8007930 <HAL_RCC_ClockConfig+0x1c8>)
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	4a58      	ldr	r2, [pc, #352]	@ (8007930 <HAL_RCC_ClockConfig+0x1c8>)
 80077ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80077d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0308 	and.w	r3, r3, #8
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d005      	beq.n	80077ec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80077e0:	4b53      	ldr	r3, [pc, #332]	@ (8007930 <HAL_RCC_ClockConfig+0x1c8>)
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	4a52      	ldr	r2, [pc, #328]	@ (8007930 <HAL_RCC_ClockConfig+0x1c8>)
 80077e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80077ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077ec:	4b50      	ldr	r3, [pc, #320]	@ (8007930 <HAL_RCC_ClockConfig+0x1c8>)
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	494d      	ldr	r1, [pc, #308]	@ (8007930 <HAL_RCC_ClockConfig+0x1c8>)
 80077fa:	4313      	orrs	r3, r2
 80077fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 0301 	and.w	r3, r3, #1
 8007806:	2b00      	cmp	r3, #0
 8007808:	d040      	beq.n	800788c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	2b01      	cmp	r3, #1
 8007810:	d107      	bne.n	8007822 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007812:	4b47      	ldr	r3, [pc, #284]	@ (8007930 <HAL_RCC_ClockConfig+0x1c8>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800781a:	2b00      	cmp	r3, #0
 800781c:	d115      	bne.n	800784a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e07f      	b.n	8007922 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	2b02      	cmp	r3, #2
 8007828:	d107      	bne.n	800783a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800782a:	4b41      	ldr	r3, [pc, #260]	@ (8007930 <HAL_RCC_ClockConfig+0x1c8>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d109      	bne.n	800784a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e073      	b.n	8007922 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800783a:	4b3d      	ldr	r3, [pc, #244]	@ (8007930 <HAL_RCC_ClockConfig+0x1c8>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 0302 	and.w	r3, r3, #2
 8007842:	2b00      	cmp	r3, #0
 8007844:	d101      	bne.n	800784a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e06b      	b.n	8007922 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800784a:	4b39      	ldr	r3, [pc, #228]	@ (8007930 <HAL_RCC_ClockConfig+0x1c8>)
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	f023 0203 	bic.w	r2, r3, #3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	4936      	ldr	r1, [pc, #216]	@ (8007930 <HAL_RCC_ClockConfig+0x1c8>)
 8007858:	4313      	orrs	r3, r2
 800785a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800785c:	f7fc fd88 	bl	8004370 <HAL_GetTick>
 8007860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007862:	e00a      	b.n	800787a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007864:	f7fc fd84 	bl	8004370 <HAL_GetTick>
 8007868:	4602      	mov	r2, r0
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	1ad3      	subs	r3, r2, r3
 800786e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007872:	4293      	cmp	r3, r2
 8007874:	d901      	bls.n	800787a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007876:	2303      	movs	r3, #3
 8007878:	e053      	b.n	8007922 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800787a:	4b2d      	ldr	r3, [pc, #180]	@ (8007930 <HAL_RCC_ClockConfig+0x1c8>)
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f003 020c 	and.w	r2, r3, #12
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	429a      	cmp	r2, r3
 800788a:	d1eb      	bne.n	8007864 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800788c:	4b27      	ldr	r3, [pc, #156]	@ (800792c <HAL_RCC_ClockConfig+0x1c4>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 030f 	and.w	r3, r3, #15
 8007894:	683a      	ldr	r2, [r7, #0]
 8007896:	429a      	cmp	r2, r3
 8007898:	d210      	bcs.n	80078bc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800789a:	4b24      	ldr	r3, [pc, #144]	@ (800792c <HAL_RCC_ClockConfig+0x1c4>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f023 020f 	bic.w	r2, r3, #15
 80078a2:	4922      	ldr	r1, [pc, #136]	@ (800792c <HAL_RCC_ClockConfig+0x1c4>)
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078aa:	4b20      	ldr	r3, [pc, #128]	@ (800792c <HAL_RCC_ClockConfig+0x1c4>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 030f 	and.w	r3, r3, #15
 80078b2:	683a      	ldr	r2, [r7, #0]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d001      	beq.n	80078bc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e032      	b.n	8007922 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0304 	and.w	r3, r3, #4
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d008      	beq.n	80078da <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078c8:	4b19      	ldr	r3, [pc, #100]	@ (8007930 <HAL_RCC_ClockConfig+0x1c8>)
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	4916      	ldr	r1, [pc, #88]	@ (8007930 <HAL_RCC_ClockConfig+0x1c8>)
 80078d6:	4313      	orrs	r3, r2
 80078d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0308 	and.w	r3, r3, #8
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d009      	beq.n	80078fa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80078e6:	4b12      	ldr	r3, [pc, #72]	@ (8007930 <HAL_RCC_ClockConfig+0x1c8>)
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	00db      	lsls	r3, r3, #3
 80078f4:	490e      	ldr	r1, [pc, #56]	@ (8007930 <HAL_RCC_ClockConfig+0x1c8>)
 80078f6:	4313      	orrs	r3, r2
 80078f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80078fa:	f000 f821 	bl	8007940 <HAL_RCC_GetSysClockFreq>
 80078fe:	4602      	mov	r2, r0
 8007900:	4b0b      	ldr	r3, [pc, #44]	@ (8007930 <HAL_RCC_ClockConfig+0x1c8>)
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	091b      	lsrs	r3, r3, #4
 8007906:	f003 030f 	and.w	r3, r3, #15
 800790a:	490a      	ldr	r1, [pc, #40]	@ (8007934 <HAL_RCC_ClockConfig+0x1cc>)
 800790c:	5ccb      	ldrb	r3, [r1, r3]
 800790e:	fa22 f303 	lsr.w	r3, r2, r3
 8007912:	4a09      	ldr	r2, [pc, #36]	@ (8007938 <HAL_RCC_ClockConfig+0x1d0>)
 8007914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007916:	4b09      	ldr	r3, [pc, #36]	@ (800793c <HAL_RCC_ClockConfig+0x1d4>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4618      	mov	r0, r3
 800791c:	f7fc fce4 	bl	80042e8 <HAL_InitTick>

  return HAL_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	40023c00 	.word	0x40023c00
 8007930:	40023800 	.word	0x40023800
 8007934:	080115e0 	.word	0x080115e0
 8007938:	2000002c 	.word	0x2000002c
 800793c:	20000030 	.word	0x20000030

08007940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007944:	b094      	sub	sp, #80	@ 0x50
 8007946:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007948:	2300      	movs	r3, #0
 800794a:	647b      	str	r3, [r7, #68]	@ 0x44
 800794c:	2300      	movs	r3, #0
 800794e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007950:	2300      	movs	r3, #0
 8007952:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8007954:	2300      	movs	r3, #0
 8007956:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007958:	4b79      	ldr	r3, [pc, #484]	@ (8007b40 <HAL_RCC_GetSysClockFreq+0x200>)
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	f003 030c 	and.w	r3, r3, #12
 8007960:	2b08      	cmp	r3, #8
 8007962:	d00d      	beq.n	8007980 <HAL_RCC_GetSysClockFreq+0x40>
 8007964:	2b08      	cmp	r3, #8
 8007966:	f200 80e1 	bhi.w	8007b2c <HAL_RCC_GetSysClockFreq+0x1ec>
 800796a:	2b00      	cmp	r3, #0
 800796c:	d002      	beq.n	8007974 <HAL_RCC_GetSysClockFreq+0x34>
 800796e:	2b04      	cmp	r3, #4
 8007970:	d003      	beq.n	800797a <HAL_RCC_GetSysClockFreq+0x3a>
 8007972:	e0db      	b.n	8007b2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007974:	4b73      	ldr	r3, [pc, #460]	@ (8007b44 <HAL_RCC_GetSysClockFreq+0x204>)
 8007976:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007978:	e0db      	b.n	8007b32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800797a:	4b73      	ldr	r3, [pc, #460]	@ (8007b48 <HAL_RCC_GetSysClockFreq+0x208>)
 800797c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800797e:	e0d8      	b.n	8007b32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007980:	4b6f      	ldr	r3, [pc, #444]	@ (8007b40 <HAL_RCC_GetSysClockFreq+0x200>)
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007988:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800798a:	4b6d      	ldr	r3, [pc, #436]	@ (8007b40 <HAL_RCC_GetSysClockFreq+0x200>)
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d063      	beq.n	8007a5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007996:	4b6a      	ldr	r3, [pc, #424]	@ (8007b40 <HAL_RCC_GetSysClockFreq+0x200>)
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	099b      	lsrs	r3, r3, #6
 800799c:	2200      	movs	r2, #0
 800799e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80079a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80079a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80079aa:	2300      	movs	r3, #0
 80079ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80079ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80079b2:	4622      	mov	r2, r4
 80079b4:	462b      	mov	r3, r5
 80079b6:	f04f 0000 	mov.w	r0, #0
 80079ba:	f04f 0100 	mov.w	r1, #0
 80079be:	0159      	lsls	r1, r3, #5
 80079c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80079c4:	0150      	lsls	r0, r2, #5
 80079c6:	4602      	mov	r2, r0
 80079c8:	460b      	mov	r3, r1
 80079ca:	4621      	mov	r1, r4
 80079cc:	1a51      	subs	r1, r2, r1
 80079ce:	6139      	str	r1, [r7, #16]
 80079d0:	4629      	mov	r1, r5
 80079d2:	eb63 0301 	sbc.w	r3, r3, r1
 80079d6:	617b      	str	r3, [r7, #20]
 80079d8:	f04f 0200 	mov.w	r2, #0
 80079dc:	f04f 0300 	mov.w	r3, #0
 80079e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80079e4:	4659      	mov	r1, fp
 80079e6:	018b      	lsls	r3, r1, #6
 80079e8:	4651      	mov	r1, sl
 80079ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80079ee:	4651      	mov	r1, sl
 80079f0:	018a      	lsls	r2, r1, #6
 80079f2:	4651      	mov	r1, sl
 80079f4:	ebb2 0801 	subs.w	r8, r2, r1
 80079f8:	4659      	mov	r1, fp
 80079fa:	eb63 0901 	sbc.w	r9, r3, r1
 80079fe:	f04f 0200 	mov.w	r2, #0
 8007a02:	f04f 0300 	mov.w	r3, #0
 8007a06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a12:	4690      	mov	r8, r2
 8007a14:	4699      	mov	r9, r3
 8007a16:	4623      	mov	r3, r4
 8007a18:	eb18 0303 	adds.w	r3, r8, r3
 8007a1c:	60bb      	str	r3, [r7, #8]
 8007a1e:	462b      	mov	r3, r5
 8007a20:	eb49 0303 	adc.w	r3, r9, r3
 8007a24:	60fb      	str	r3, [r7, #12]
 8007a26:	f04f 0200 	mov.w	r2, #0
 8007a2a:	f04f 0300 	mov.w	r3, #0
 8007a2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007a32:	4629      	mov	r1, r5
 8007a34:	024b      	lsls	r3, r1, #9
 8007a36:	4621      	mov	r1, r4
 8007a38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007a3c:	4621      	mov	r1, r4
 8007a3e:	024a      	lsls	r2, r1, #9
 8007a40:	4610      	mov	r0, r2
 8007a42:	4619      	mov	r1, r3
 8007a44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a46:	2200      	movs	r2, #0
 8007a48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007a50:	f7f9 f8de 	bl	8000c10 <__aeabi_uldivmod>
 8007a54:	4602      	mov	r2, r0
 8007a56:	460b      	mov	r3, r1
 8007a58:	4613      	mov	r3, r2
 8007a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a5c:	e058      	b.n	8007b10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a5e:	4b38      	ldr	r3, [pc, #224]	@ (8007b40 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	099b      	lsrs	r3, r3, #6
 8007a64:	2200      	movs	r2, #0
 8007a66:	4618      	mov	r0, r3
 8007a68:	4611      	mov	r1, r2
 8007a6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007a6e:	623b      	str	r3, [r7, #32]
 8007a70:	2300      	movs	r3, #0
 8007a72:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007a78:	4642      	mov	r2, r8
 8007a7a:	464b      	mov	r3, r9
 8007a7c:	f04f 0000 	mov.w	r0, #0
 8007a80:	f04f 0100 	mov.w	r1, #0
 8007a84:	0159      	lsls	r1, r3, #5
 8007a86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a8a:	0150      	lsls	r0, r2, #5
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	460b      	mov	r3, r1
 8007a90:	4641      	mov	r1, r8
 8007a92:	ebb2 0a01 	subs.w	sl, r2, r1
 8007a96:	4649      	mov	r1, r9
 8007a98:	eb63 0b01 	sbc.w	fp, r3, r1
 8007a9c:	f04f 0200 	mov.w	r2, #0
 8007aa0:	f04f 0300 	mov.w	r3, #0
 8007aa4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007aa8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007aac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007ab0:	ebb2 040a 	subs.w	r4, r2, sl
 8007ab4:	eb63 050b 	sbc.w	r5, r3, fp
 8007ab8:	f04f 0200 	mov.w	r2, #0
 8007abc:	f04f 0300 	mov.w	r3, #0
 8007ac0:	00eb      	lsls	r3, r5, #3
 8007ac2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ac6:	00e2      	lsls	r2, r4, #3
 8007ac8:	4614      	mov	r4, r2
 8007aca:	461d      	mov	r5, r3
 8007acc:	4643      	mov	r3, r8
 8007ace:	18e3      	adds	r3, r4, r3
 8007ad0:	603b      	str	r3, [r7, #0]
 8007ad2:	464b      	mov	r3, r9
 8007ad4:	eb45 0303 	adc.w	r3, r5, r3
 8007ad8:	607b      	str	r3, [r7, #4]
 8007ada:	f04f 0200 	mov.w	r2, #0
 8007ade:	f04f 0300 	mov.w	r3, #0
 8007ae2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007ae6:	4629      	mov	r1, r5
 8007ae8:	028b      	lsls	r3, r1, #10
 8007aea:	4621      	mov	r1, r4
 8007aec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007af0:	4621      	mov	r1, r4
 8007af2:	028a      	lsls	r2, r1, #10
 8007af4:	4610      	mov	r0, r2
 8007af6:	4619      	mov	r1, r3
 8007af8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007afa:	2200      	movs	r2, #0
 8007afc:	61bb      	str	r3, [r7, #24]
 8007afe:	61fa      	str	r2, [r7, #28]
 8007b00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b04:	f7f9 f884 	bl	8000c10 <__aeabi_uldivmod>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007b10:	4b0b      	ldr	r3, [pc, #44]	@ (8007b40 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	0c1b      	lsrs	r3, r3, #16
 8007b16:	f003 0303 	and.w	r3, r3, #3
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	005b      	lsls	r3, r3, #1
 8007b1e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007b20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007b2a:	e002      	b.n	8007b32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b2c:	4b05      	ldr	r3, [pc, #20]	@ (8007b44 <HAL_RCC_GetSysClockFreq+0x204>)
 8007b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007b30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3750      	adds	r7, #80	@ 0x50
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b3e:	bf00      	nop
 8007b40:	40023800 	.word	0x40023800
 8007b44:	00f42400 	.word	0x00f42400
 8007b48:	007a1200 	.word	0x007a1200

08007b4c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b50:	4b03      	ldr	r3, [pc, #12]	@ (8007b60 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b52:	681b      	ldr	r3, [r3, #0]
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	2000002c 	.word	0x2000002c

08007b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007b68:	f7ff fff0 	bl	8007b4c <HAL_RCC_GetHCLKFreq>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	4b05      	ldr	r3, [pc, #20]	@ (8007b84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	0a9b      	lsrs	r3, r3, #10
 8007b74:	f003 0307 	and.w	r3, r3, #7
 8007b78:	4903      	ldr	r1, [pc, #12]	@ (8007b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b7a:	5ccb      	ldrb	r3, [r1, r3]
 8007b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	40023800 	.word	0x40023800
 8007b88:	080115f0 	.word	0x080115f0

08007b8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007b90:	f7ff ffdc 	bl	8007b4c <HAL_RCC_GetHCLKFreq>
 8007b94:	4602      	mov	r2, r0
 8007b96:	4b05      	ldr	r3, [pc, #20]	@ (8007bac <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	0b5b      	lsrs	r3, r3, #13
 8007b9c:	f003 0307 	and.w	r3, r3, #7
 8007ba0:	4903      	ldr	r1, [pc, #12]	@ (8007bb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ba2:	5ccb      	ldrb	r3, [r1, r3]
 8007ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	40023800 	.word	0x40023800
 8007bb0:	080115f0 	.word	0x080115f0

08007bb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b088      	sub	sp, #32
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f003 0301 	and.w	r3, r3, #1
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d012      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007bdc:	4b69      	ldr	r3, [pc, #420]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	4a68      	ldr	r2, [pc, #416]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007be2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007be6:	6093      	str	r3, [r2, #8]
 8007be8:	4b66      	ldr	r3, [pc, #408]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bea:	689a      	ldr	r2, [r3, #8]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bf0:	4964      	ldr	r1, [pc, #400]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d101      	bne.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d017      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c0e:	4b5d      	ldr	r3, [pc, #372]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c14:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c1c:	4959      	ldr	r1, [pc, #356]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c2c:	d101      	bne.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d101      	bne.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d017      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007c4a:	4b4e      	ldr	r3, [pc, #312]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c50:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c58:	494a      	ldr	r1, [pc, #296]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c68:	d101      	bne.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d101      	bne.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007c76:	2301      	movs	r3, #1
 8007c78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d001      	beq.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007c86:	2301      	movs	r3, #1
 8007c88:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 0320 	and.w	r3, r3, #32
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f000 808b 	beq.w	8007dae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007c98:	4b3a      	ldr	r3, [pc, #232]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c9c:	4a39      	ldr	r2, [pc, #228]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ca2:	6413      	str	r3, [r2, #64]	@ 0x40
 8007ca4:	4b37      	ldr	r3, [pc, #220]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ca8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007cac:	60bb      	str	r3, [r7, #8]
 8007cae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007cb0:	4b35      	ldr	r3, [pc, #212]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a34      	ldr	r2, [pc, #208]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007cb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cbc:	f7fc fb58 	bl	8004370 <HAL_GetTick>
 8007cc0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007cc2:	e008      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cc4:	f7fc fb54 	bl	8004370 <HAL_GetTick>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	2b64      	cmp	r3, #100	@ 0x64
 8007cd0:	d901      	bls.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	e357      	b.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007cd6:	4b2c      	ldr	r3, [pc, #176]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d0f0      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007ce2:	4b28      	ldr	r3, [pc, #160]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ce6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007cea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d035      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007cfa:	693a      	ldr	r2, [r7, #16]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d02e      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d00:	4b20      	ldr	r3, [pc, #128]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d08:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d0a:	4b1e      	ldr	r3, [pc, #120]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d0e:	4a1d      	ldr	r2, [pc, #116]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d14:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007d16:	4b1b      	ldr	r3, [pc, #108]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d1a:	4a1a      	ldr	r2, [pc, #104]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d20:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007d22:	4a18      	ldr	r2, [pc, #96]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007d28:	4b16      	ldr	r3, [pc, #88]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d2c:	f003 0301 	and.w	r3, r3, #1
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d114      	bne.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d34:	f7fc fb1c 	bl	8004370 <HAL_GetTick>
 8007d38:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d3a:	e00a      	b.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d3c:	f7fc fb18 	bl	8004370 <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d901      	bls.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	e319      	b.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d52:	4b0c      	ldr	r3, [pc, #48]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d56:	f003 0302 	and.w	r3, r3, #2
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d0ee      	beq.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d6a:	d111      	bne.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007d6c:	4b05      	ldr	r3, [pc, #20]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007d78:	4b04      	ldr	r3, [pc, #16]	@ (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007d7a:	400b      	ands	r3, r1
 8007d7c:	4901      	ldr	r1, [pc, #4]	@ (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	608b      	str	r3, [r1, #8]
 8007d82:	e00b      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007d84:	40023800 	.word	0x40023800
 8007d88:	40007000 	.word	0x40007000
 8007d8c:	0ffffcff 	.word	0x0ffffcff
 8007d90:	4baa      	ldr	r3, [pc, #680]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	4aa9      	ldr	r2, [pc, #676]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d96:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007d9a:	6093      	str	r3, [r2, #8]
 8007d9c:	4ba7      	ldr	r3, [pc, #668]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d9e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007da8:	49a4      	ldr	r1, [pc, #656]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007daa:	4313      	orrs	r3, r2
 8007dac:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f003 0310 	and.w	r3, r3, #16
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d010      	beq.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007dba:	4ba0      	ldr	r3, [pc, #640]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dc0:	4a9e      	ldr	r2, [pc, #632]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007dc6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007dca:	4b9c      	ldr	r3, [pc, #624]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dcc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd4:	4999      	ldr	r1, [pc, #612]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00a      	beq.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007de8:	4b94      	ldr	r3, [pc, #592]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dee:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007df6:	4991      	ldr	r1, [pc, #580]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d00a      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e0a:	4b8c      	ldr	r3, [pc, #560]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e10:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e18:	4988      	ldr	r1, [pc, #544]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00a      	beq.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e2c:	4b83      	ldr	r3, [pc, #524]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e3a:	4980      	ldr	r1, [pc, #512]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00a      	beq.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007e4e:	4b7b      	ldr	r3, [pc, #492]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e54:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e5c:	4977      	ldr	r1, [pc, #476]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00a      	beq.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007e70:	4b72      	ldr	r3, [pc, #456]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e76:	f023 0203 	bic.w	r2, r3, #3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e7e:	496f      	ldr	r1, [pc, #444]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e80:	4313      	orrs	r3, r2
 8007e82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00a      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007e92:	4b6a      	ldr	r3, [pc, #424]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e98:	f023 020c 	bic.w	r2, r3, #12
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ea0:	4966      	ldr	r1, [pc, #408]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00a      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007eb4:	4b61      	ldr	r3, [pc, #388]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007eba:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ec2:	495e      	ldr	r1, [pc, #376]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00a      	beq.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007ed6:	4b59      	ldr	r3, [pc, #356]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007edc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ee4:	4955      	ldr	r1, [pc, #340]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d00a      	beq.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007ef8:	4b50      	ldr	r3, [pc, #320]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007efe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f06:	494d      	ldr	r1, [pc, #308]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00a      	beq.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007f1a:	4b48      	ldr	r3, [pc, #288]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f20:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f28:	4944      	ldr	r1, [pc, #272]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00a      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007f3c:	4b3f      	ldr	r3, [pc, #252]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f42:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f4a:	493c      	ldr	r1, [pc, #240]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00a      	beq.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007f5e:	4b37      	ldr	r3, [pc, #220]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f64:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f6c:	4933      	ldr	r1, [pc, #204]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00a      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007f80:	4b2e      	ldr	r3, [pc, #184]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f86:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f8e:	492b      	ldr	r1, [pc, #172]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f90:	4313      	orrs	r3, r2
 8007f92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d011      	beq.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007fa2:	4b26      	ldr	r3, [pc, #152]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fa8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007fb0:	4922      	ldr	r1, [pc, #136]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007fbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007fc0:	d101      	bne.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 0308 	and.w	r3, r3, #8
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d001      	beq.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00a      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007fe2:	4b16      	ldr	r3, [pc, #88]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fe8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ff0:	4912      	ldr	r1, [pc, #72]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00b      	beq.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008004:	4b0d      	ldr	r3, [pc, #52]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800800a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008014:	4909      	ldr	r1, [pc, #36]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008016:	4313      	orrs	r3, r2
 8008018:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	2b01      	cmp	r3, #1
 8008020:	d006      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800802a:	2b00      	cmp	r3, #0
 800802c:	f000 80d9 	beq.w	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008030:	4b02      	ldr	r3, [pc, #8]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a01      	ldr	r2, [pc, #4]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008036:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800803a:	e001      	b.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800803c:	40023800 	.word	0x40023800
 8008040:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008042:	f7fc f995 	bl	8004370 <HAL_GetTick>
 8008046:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008048:	e008      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800804a:	f7fc f991 	bl	8004370 <HAL_GetTick>
 800804e:	4602      	mov	r2, r0
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	1ad3      	subs	r3, r2, r3
 8008054:	2b64      	cmp	r3, #100	@ 0x64
 8008056:	d901      	bls.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008058:	2303      	movs	r3, #3
 800805a:	e194      	b.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800805c:	4b6c      	ldr	r3, [pc, #432]	@ (8008210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008064:	2b00      	cmp	r3, #0
 8008066:	d1f0      	bne.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f003 0301 	and.w	r3, r3, #1
 8008070:	2b00      	cmp	r3, #0
 8008072:	d021      	beq.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008078:	2b00      	cmp	r3, #0
 800807a:	d11d      	bne.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800807c:	4b64      	ldr	r3, [pc, #400]	@ (8008210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800807e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008082:	0c1b      	lsrs	r3, r3, #16
 8008084:	f003 0303 	and.w	r3, r3, #3
 8008088:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800808a:	4b61      	ldr	r3, [pc, #388]	@ (8008210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800808c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008090:	0e1b      	lsrs	r3, r3, #24
 8008092:	f003 030f 	and.w	r3, r3, #15
 8008096:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	019a      	lsls	r2, r3, #6
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	041b      	lsls	r3, r3, #16
 80080a2:	431a      	orrs	r2, r3
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	061b      	lsls	r3, r3, #24
 80080a8:	431a      	orrs	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	071b      	lsls	r3, r3, #28
 80080b0:	4957      	ldr	r1, [pc, #348]	@ (8008210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080b2:	4313      	orrs	r3, r2
 80080b4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d004      	beq.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080cc:	d00a      	beq.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d02e      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80080e2:	d129      	bne.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80080e4:	4b4a      	ldr	r3, [pc, #296]	@ (8008210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080ea:	0c1b      	lsrs	r3, r3, #16
 80080ec:	f003 0303 	and.w	r3, r3, #3
 80080f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80080f2:	4b47      	ldr	r3, [pc, #284]	@ (8008210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080f8:	0f1b      	lsrs	r3, r3, #28
 80080fa:	f003 0307 	and.w	r3, r3, #7
 80080fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	019a      	lsls	r2, r3, #6
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	041b      	lsls	r3, r3, #16
 800810a:	431a      	orrs	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	061b      	lsls	r3, r3, #24
 8008112:	431a      	orrs	r2, r3
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	071b      	lsls	r3, r3, #28
 8008118:	493d      	ldr	r1, [pc, #244]	@ (8008210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800811a:	4313      	orrs	r3, r2
 800811c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008120:	4b3b      	ldr	r3, [pc, #236]	@ (8008210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008122:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008126:	f023 021f 	bic.w	r2, r3, #31
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800812e:	3b01      	subs	r3, #1
 8008130:	4937      	ldr	r1, [pc, #220]	@ (8008210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008132:	4313      	orrs	r3, r2
 8008134:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008140:	2b00      	cmp	r3, #0
 8008142:	d01d      	beq.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008144:	4b32      	ldr	r3, [pc, #200]	@ (8008210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008146:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800814a:	0e1b      	lsrs	r3, r3, #24
 800814c:	f003 030f 	and.w	r3, r3, #15
 8008150:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008152:	4b2f      	ldr	r3, [pc, #188]	@ (8008210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008154:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008158:	0f1b      	lsrs	r3, r3, #28
 800815a:	f003 0307 	and.w	r3, r3, #7
 800815e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	019a      	lsls	r2, r3, #6
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	041b      	lsls	r3, r3, #16
 800816c:	431a      	orrs	r2, r3
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	061b      	lsls	r3, r3, #24
 8008172:	431a      	orrs	r2, r3
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	071b      	lsls	r3, r3, #28
 8008178:	4925      	ldr	r1, [pc, #148]	@ (8008210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800817a:	4313      	orrs	r3, r2
 800817c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008188:	2b00      	cmp	r3, #0
 800818a:	d011      	beq.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	019a      	lsls	r2, r3, #6
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	041b      	lsls	r3, r3, #16
 8008198:	431a      	orrs	r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	061b      	lsls	r3, r3, #24
 80081a0:	431a      	orrs	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	071b      	lsls	r3, r3, #28
 80081a8:	4919      	ldr	r1, [pc, #100]	@ (8008210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081aa:	4313      	orrs	r3, r2
 80081ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80081b0:	4b17      	ldr	r3, [pc, #92]	@ (8008210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a16      	ldr	r2, [pc, #88]	@ (8008210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80081ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081bc:	f7fc f8d8 	bl	8004370 <HAL_GetTick>
 80081c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80081c2:	e008      	b.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80081c4:	f7fc f8d4 	bl	8004370 <HAL_GetTick>
 80081c8:	4602      	mov	r2, r0
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	1ad3      	subs	r3, r2, r3
 80081ce:	2b64      	cmp	r3, #100	@ 0x64
 80081d0:	d901      	bls.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80081d2:	2303      	movs	r3, #3
 80081d4:	e0d7      	b.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80081d6:	4b0e      	ldr	r3, [pc, #56]	@ (8008210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d0f0      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	f040 80cd 	bne.w	8008384 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80081ea:	4b09      	ldr	r3, [pc, #36]	@ (8008210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a08      	ldr	r2, [pc, #32]	@ (8008210 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80081f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081f6:	f7fc f8bb 	bl	8004370 <HAL_GetTick>
 80081fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80081fc:	e00a      	b.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80081fe:	f7fc f8b7 	bl	8004370 <HAL_GetTick>
 8008202:	4602      	mov	r2, r0
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	1ad3      	subs	r3, r2, r3
 8008208:	2b64      	cmp	r3, #100	@ 0x64
 800820a:	d903      	bls.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800820c:	2303      	movs	r3, #3
 800820e:	e0ba      	b.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008210:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008214:	4b5e      	ldr	r3, [pc, #376]	@ (8008390 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800821c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008220:	d0ed      	beq.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800822a:	2b00      	cmp	r3, #0
 800822c:	d003      	beq.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008232:	2b00      	cmp	r3, #0
 8008234:	d009      	beq.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800823e:	2b00      	cmp	r3, #0
 8008240:	d02e      	beq.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008246:	2b00      	cmp	r3, #0
 8008248:	d12a      	bne.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800824a:	4b51      	ldr	r3, [pc, #324]	@ (8008390 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800824c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008250:	0c1b      	lsrs	r3, r3, #16
 8008252:	f003 0303 	and.w	r3, r3, #3
 8008256:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008258:	4b4d      	ldr	r3, [pc, #308]	@ (8008390 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800825a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800825e:	0f1b      	lsrs	r3, r3, #28
 8008260:	f003 0307 	and.w	r3, r3, #7
 8008264:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	019a      	lsls	r2, r3, #6
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	041b      	lsls	r3, r3, #16
 8008270:	431a      	orrs	r2, r3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	699b      	ldr	r3, [r3, #24]
 8008276:	061b      	lsls	r3, r3, #24
 8008278:	431a      	orrs	r2, r3
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	071b      	lsls	r3, r3, #28
 800827e:	4944      	ldr	r1, [pc, #272]	@ (8008390 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008280:	4313      	orrs	r3, r2
 8008282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008286:	4b42      	ldr	r3, [pc, #264]	@ (8008390 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008288:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800828c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008294:	3b01      	subs	r3, #1
 8008296:	021b      	lsls	r3, r3, #8
 8008298:	493d      	ldr	r1, [pc, #244]	@ (8008390 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800829a:	4313      	orrs	r3, r2
 800829c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d022      	beq.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082b4:	d11d      	bne.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80082b6:	4b36      	ldr	r3, [pc, #216]	@ (8008390 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082bc:	0e1b      	lsrs	r3, r3, #24
 80082be:	f003 030f 	and.w	r3, r3, #15
 80082c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80082c4:	4b32      	ldr	r3, [pc, #200]	@ (8008390 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082ca:	0f1b      	lsrs	r3, r3, #28
 80082cc:	f003 0307 	and.w	r3, r3, #7
 80082d0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	695b      	ldr	r3, [r3, #20]
 80082d6:	019a      	lsls	r2, r3, #6
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6a1b      	ldr	r3, [r3, #32]
 80082dc:	041b      	lsls	r3, r3, #16
 80082de:	431a      	orrs	r2, r3
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	061b      	lsls	r3, r3, #24
 80082e4:	431a      	orrs	r2, r3
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	071b      	lsls	r3, r3, #28
 80082ea:	4929      	ldr	r1, [pc, #164]	@ (8008390 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082ec:	4313      	orrs	r3, r2
 80082ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f003 0308 	and.w	r3, r3, #8
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d028      	beq.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80082fe:	4b24      	ldr	r3, [pc, #144]	@ (8008390 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008304:	0e1b      	lsrs	r3, r3, #24
 8008306:	f003 030f 	and.w	r3, r3, #15
 800830a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800830c:	4b20      	ldr	r3, [pc, #128]	@ (8008390 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800830e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008312:	0c1b      	lsrs	r3, r3, #16
 8008314:	f003 0303 	and.w	r3, r3, #3
 8008318:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	695b      	ldr	r3, [r3, #20]
 800831e:	019a      	lsls	r2, r3, #6
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	041b      	lsls	r3, r3, #16
 8008324:	431a      	orrs	r2, r3
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	061b      	lsls	r3, r3, #24
 800832a:	431a      	orrs	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	69db      	ldr	r3, [r3, #28]
 8008330:	071b      	lsls	r3, r3, #28
 8008332:	4917      	ldr	r1, [pc, #92]	@ (8008390 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008334:	4313      	orrs	r3, r2
 8008336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800833a:	4b15      	ldr	r3, [pc, #84]	@ (8008390 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800833c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008340:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008348:	4911      	ldr	r1, [pc, #68]	@ (8008390 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800834a:	4313      	orrs	r3, r2
 800834c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008350:	4b0f      	ldr	r3, [pc, #60]	@ (8008390 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a0e      	ldr	r2, [pc, #56]	@ (8008390 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008356:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800835a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800835c:	f7fc f808 	bl	8004370 <HAL_GetTick>
 8008360:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008362:	e008      	b.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008364:	f7fc f804 	bl	8004370 <HAL_GetTick>
 8008368:	4602      	mov	r2, r0
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	2b64      	cmp	r3, #100	@ 0x64
 8008370:	d901      	bls.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008372:	2303      	movs	r3, #3
 8008374:	e007      	b.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008376:	4b06      	ldr	r3, [pc, #24]	@ (8008390 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800837e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008382:	d1ef      	bne.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3720      	adds	r7, #32
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	40023800 	.word	0x40023800

08008394 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d101      	bne.n	80083a6 <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e0a8      	b.n	80084f8 <HAL_SMBUS_Init+0x164>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d106      	bne.n	80083bc <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f7fb fbc6 	bl	8003b48 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2202      	movs	r2, #2
 80083c0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f022 0201 	bic.w	r2, r2, #1
 80083d0:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	685a      	ldr	r2, [r3, #4]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80083de:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	695a      	ldr	r2, [r3, #20]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80083ee:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	695a      	ldr	r2, [r3, #20]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80083fe:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008408:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	689a      	ldr	r2, [r3, #8]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008418:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d012      	beq.n	8008448 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	2b01      	cmp	r3, #1
 8008428:	d107      	bne.n	800843a <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	68da      	ldr	r2, [r3, #12]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008436:	609a      	str	r2, [r3, #8]
 8008438:	e006      	b.n	8008448 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	68da      	ldr	r2, [r3, #12]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008446:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	2b02      	cmp	r3, #2
 800844e:	d104      	bne.n	800845a <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008458:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	6859      	ldr	r1, [r3, #4]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	4b26      	ldr	r3, [pc, #152]	@ (8008500 <HAL_SMBUS_Init+0x16c>)
 8008466:	430b      	orrs	r3, r1
 8008468:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	695a      	ldr	r2, [r3, #20]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	699b      	ldr	r3, [r3, #24]
 8008472:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	69db      	ldr	r3, [r3, #28]
 800847a:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	430a      	orrs	r2, r1
 8008482:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6a1a      	ldr	r2, [r3, #32]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800848c:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8008492:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008498:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 80084a4:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80084a6:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80084b0:	d110      	bne.n	80084d4 <HAL_SMBUS_Init+0x140>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d004      	beq.n	80084c4 <HAL_SMBUS_Init+0x130>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 80084be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084c2:	d107      	bne.n	80084d4 <HAL_SMBUS_Init+0x140>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80084d2:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f042 0201 	orr.w	r2, r2, #1
 80084e2:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2201      	movs	r2, #1
 80084ee:	641a      	str	r2, [r3, #64]	@ 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	649a      	str	r2, [r3, #72]	@ 0x48

  return HAL_OK;
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3708      	adds	r7, #8
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	02008000 	.word	0x02008000

08008504 <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800851a:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008524:	61da      	str	r2, [r3, #28]

  /* Enable Alert Interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ALERT);
 8008526:	2180      	movs	r1, #128	@ 0x80
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 f805 	bl	8008538 <SMBUS_Enable_IRQ>

  return HAL_OK;
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	3708      	adds	r7, #8
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <SMBUS_Enable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 8008538:	b480      	push	{r7}
 800853a:	b085      	sub	sp, #20
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 8008542:	2300      	movs	r3, #0
 8008544:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800854c:	2b00      	cmp	r3, #0
 800854e:	d003      	beq.n	8008558 <SMBUS_Enable_IRQ+0x20>
  {
    /* Enable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008556:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800855e:	2b38      	cmp	r3, #56	@ 0x38
 8008560:	d103      	bne.n	800856a <SMBUS_Enable_IRQ+0x32>
  {
    /* Enable ADDR, STOP interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008568:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8008570:	2bf2      	cmp	r3, #242	@ 0xf2
 8008572:	d103      	bne.n	800857c <SMBUS_Enable_IRQ+0x44>
  {
    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800857a:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	f003 03d4 	and.w	r3, r3, #212	@ 0xd4
 8008582:	2bd4      	cmp	r3, #212	@ 0xd4
 8008584:	d103      	bne.n	800858e <SMBUS_Enable_IRQ+0x56>
  {
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800858c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	6819      	ldr	r1, [r3, #0]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	430a      	orrs	r2, r1
 800859c:	601a      	str	r2, [r3, #0]
}
 800859e:	bf00      	nop
 80085a0:	3714      	adds	r7, #20
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr

080085aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b082      	sub	sp, #8
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d101      	bne.n	80085bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	e049      	b.n	8008650 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d106      	bne.n	80085d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f7fb fb17 	bl	8003c04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2202      	movs	r2, #2
 80085da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	3304      	adds	r3, #4
 80085e6:	4619      	mov	r1, r3
 80085e8:	4610      	mov	r0, r2
 80085ea:	f000 fee1 	bl	80093b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2201      	movs	r2, #1
 80085fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2201      	movs	r2, #1
 8008602:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2201      	movs	r2, #1
 800860a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2201      	movs	r2, #1
 8008612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2201      	movs	r2, #1
 800861a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2201      	movs	r2, #1
 800862a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2201      	movs	r2, #1
 8008632:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2201      	movs	r2, #1
 800863a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2201      	movs	r2, #1
 8008642:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2201      	movs	r2, #1
 800864a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3708      	adds	r7, #8
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008666:	b2db      	uxtb	r3, r3
 8008668:	2b01      	cmp	r3, #1
 800866a:	d001      	beq.n	8008670 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	e04c      	b.n	800870a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2202      	movs	r2, #2
 8008674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a26      	ldr	r2, [pc, #152]	@ (8008718 <HAL_TIM_Base_Start+0xc0>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d022      	beq.n	80086c8 <HAL_TIM_Base_Start+0x70>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800868a:	d01d      	beq.n	80086c8 <HAL_TIM_Base_Start+0x70>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a22      	ldr	r2, [pc, #136]	@ (800871c <HAL_TIM_Base_Start+0xc4>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d018      	beq.n	80086c8 <HAL_TIM_Base_Start+0x70>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a21      	ldr	r2, [pc, #132]	@ (8008720 <HAL_TIM_Base_Start+0xc8>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d013      	beq.n	80086c8 <HAL_TIM_Base_Start+0x70>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a1f      	ldr	r2, [pc, #124]	@ (8008724 <HAL_TIM_Base_Start+0xcc>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d00e      	beq.n	80086c8 <HAL_TIM_Base_Start+0x70>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a1e      	ldr	r2, [pc, #120]	@ (8008728 <HAL_TIM_Base_Start+0xd0>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d009      	beq.n	80086c8 <HAL_TIM_Base_Start+0x70>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a1c      	ldr	r2, [pc, #112]	@ (800872c <HAL_TIM_Base_Start+0xd4>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d004      	beq.n	80086c8 <HAL_TIM_Base_Start+0x70>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a1b      	ldr	r2, [pc, #108]	@ (8008730 <HAL_TIM_Base_Start+0xd8>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d115      	bne.n	80086f4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	689a      	ldr	r2, [r3, #8]
 80086ce:	4b19      	ldr	r3, [pc, #100]	@ (8008734 <HAL_TIM_Base_Start+0xdc>)
 80086d0:	4013      	ands	r3, r2
 80086d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2b06      	cmp	r3, #6
 80086d8:	d015      	beq.n	8008706 <HAL_TIM_Base_Start+0xae>
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086e0:	d011      	beq.n	8008706 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f042 0201 	orr.w	r2, r2, #1
 80086f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086f2:	e008      	b.n	8008706 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f042 0201 	orr.w	r2, r2, #1
 8008702:	601a      	str	r2, [r3, #0]
 8008704:	e000      	b.n	8008708 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008706:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	40010000 	.word	0x40010000
 800871c:	40000400 	.word	0x40000400
 8008720:	40000800 	.word	0x40000800
 8008724:	40000c00 	.word	0x40000c00
 8008728:	40010400 	.word	0x40010400
 800872c:	40014000 	.word	0x40014000
 8008730:	40001800 	.word	0x40001800
 8008734:	00010007 	.word	0x00010007

08008738 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d101      	bne.n	800874a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	e049      	b.n	80087de <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2b00      	cmp	r3, #0
 8008754:	d106      	bne.n	8008764 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f7fb fb62 	bl	8003e28 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2202      	movs	r2, #2
 8008768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	3304      	adds	r3, #4
 8008774:	4619      	mov	r1, r3
 8008776:	4610      	mov	r0, r2
 8008778:	f000 fe1a 	bl	80093b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3708      	adds	r7, #8
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b082      	sub	sp, #8
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d101      	bne.n	80087f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	e049      	b.n	800888c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	2b00      	cmp	r3, #0
 8008802:	d106      	bne.n	8008812 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 f841 	bl	8008894 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2202      	movs	r2, #2
 8008816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	3304      	adds	r3, #4
 8008822:	4619      	mov	r1, r3
 8008824:	4610      	mov	r0, r2
 8008826:	f000 fdc3 	bl	80093b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2201      	movs	r2, #1
 800882e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2201      	movs	r2, #1
 8008836:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2201      	movs	r2, #1
 800883e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2201      	movs	r2, #1
 8008846:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2201      	movs	r2, #1
 800884e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2201      	movs	r2, #1
 8008856:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2201      	movs	r2, #1
 800885e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2201      	movs	r2, #1
 8008866:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2201      	movs	r2, #1
 800886e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2201      	movs	r2, #1
 8008876:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2201      	movs	r2, #1
 800887e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2201      	movs	r2, #1
 8008886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	3708      	adds	r7, #8
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800889c:	bf00      	nop
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d109      	bne.n	80088cc <HAL_TIM_PWM_Start+0x24>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	bf14      	ite	ne
 80088c4:	2301      	movne	r3, #1
 80088c6:	2300      	moveq	r3, #0
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	e03c      	b.n	8008946 <HAL_TIM_PWM_Start+0x9e>
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	2b04      	cmp	r3, #4
 80088d0:	d109      	bne.n	80088e6 <HAL_TIM_PWM_Start+0x3e>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	2b01      	cmp	r3, #1
 80088dc:	bf14      	ite	ne
 80088de:	2301      	movne	r3, #1
 80088e0:	2300      	moveq	r3, #0
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	e02f      	b.n	8008946 <HAL_TIM_PWM_Start+0x9e>
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	2b08      	cmp	r3, #8
 80088ea:	d109      	bne.n	8008900 <HAL_TIM_PWM_Start+0x58>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	bf14      	ite	ne
 80088f8:	2301      	movne	r3, #1
 80088fa:	2300      	moveq	r3, #0
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	e022      	b.n	8008946 <HAL_TIM_PWM_Start+0x9e>
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	2b0c      	cmp	r3, #12
 8008904:	d109      	bne.n	800891a <HAL_TIM_PWM_Start+0x72>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800890c:	b2db      	uxtb	r3, r3
 800890e:	2b01      	cmp	r3, #1
 8008910:	bf14      	ite	ne
 8008912:	2301      	movne	r3, #1
 8008914:	2300      	moveq	r3, #0
 8008916:	b2db      	uxtb	r3, r3
 8008918:	e015      	b.n	8008946 <HAL_TIM_PWM_Start+0x9e>
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	2b10      	cmp	r3, #16
 800891e:	d109      	bne.n	8008934 <HAL_TIM_PWM_Start+0x8c>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008926:	b2db      	uxtb	r3, r3
 8008928:	2b01      	cmp	r3, #1
 800892a:	bf14      	ite	ne
 800892c:	2301      	movne	r3, #1
 800892e:	2300      	moveq	r3, #0
 8008930:	b2db      	uxtb	r3, r3
 8008932:	e008      	b.n	8008946 <HAL_TIM_PWM_Start+0x9e>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800893a:	b2db      	uxtb	r3, r3
 800893c:	2b01      	cmp	r3, #1
 800893e:	bf14      	ite	ne
 8008940:	2301      	movne	r3, #1
 8008942:	2300      	moveq	r3, #0
 8008944:	b2db      	uxtb	r3, r3
 8008946:	2b00      	cmp	r3, #0
 8008948:	d001      	beq.n	800894e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	e092      	b.n	8008a74 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d104      	bne.n	800895e <HAL_TIM_PWM_Start+0xb6>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2202      	movs	r2, #2
 8008958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800895c:	e023      	b.n	80089a6 <HAL_TIM_PWM_Start+0xfe>
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	2b04      	cmp	r3, #4
 8008962:	d104      	bne.n	800896e <HAL_TIM_PWM_Start+0xc6>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2202      	movs	r2, #2
 8008968:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800896c:	e01b      	b.n	80089a6 <HAL_TIM_PWM_Start+0xfe>
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	2b08      	cmp	r3, #8
 8008972:	d104      	bne.n	800897e <HAL_TIM_PWM_Start+0xd6>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2202      	movs	r2, #2
 8008978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800897c:	e013      	b.n	80089a6 <HAL_TIM_PWM_Start+0xfe>
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	2b0c      	cmp	r3, #12
 8008982:	d104      	bne.n	800898e <HAL_TIM_PWM_Start+0xe6>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2202      	movs	r2, #2
 8008988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800898c:	e00b      	b.n	80089a6 <HAL_TIM_PWM_Start+0xfe>
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	2b10      	cmp	r3, #16
 8008992:	d104      	bne.n	800899e <HAL_TIM_PWM_Start+0xf6>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2202      	movs	r2, #2
 8008998:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800899c:	e003      	b.n	80089a6 <HAL_TIM_PWM_Start+0xfe>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2202      	movs	r2, #2
 80089a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2201      	movs	r2, #1
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	4618      	mov	r0, r3
 80089b0:	f001 f92a 	bl	8009c08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a30      	ldr	r2, [pc, #192]	@ (8008a7c <HAL_TIM_PWM_Start+0x1d4>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d004      	beq.n	80089c8 <HAL_TIM_PWM_Start+0x120>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a2f      	ldr	r2, [pc, #188]	@ (8008a80 <HAL_TIM_PWM_Start+0x1d8>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d101      	bne.n	80089cc <HAL_TIM_PWM_Start+0x124>
 80089c8:	2301      	movs	r3, #1
 80089ca:	e000      	b.n	80089ce <HAL_TIM_PWM_Start+0x126>
 80089cc:	2300      	movs	r3, #0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d007      	beq.n	80089e2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80089e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a25      	ldr	r2, [pc, #148]	@ (8008a7c <HAL_TIM_PWM_Start+0x1d4>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d022      	beq.n	8008a32 <HAL_TIM_PWM_Start+0x18a>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089f4:	d01d      	beq.n	8008a32 <HAL_TIM_PWM_Start+0x18a>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a22      	ldr	r2, [pc, #136]	@ (8008a84 <HAL_TIM_PWM_Start+0x1dc>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d018      	beq.n	8008a32 <HAL_TIM_PWM_Start+0x18a>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a20      	ldr	r2, [pc, #128]	@ (8008a88 <HAL_TIM_PWM_Start+0x1e0>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d013      	beq.n	8008a32 <HAL_TIM_PWM_Start+0x18a>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a1f      	ldr	r2, [pc, #124]	@ (8008a8c <HAL_TIM_PWM_Start+0x1e4>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d00e      	beq.n	8008a32 <HAL_TIM_PWM_Start+0x18a>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a19      	ldr	r2, [pc, #100]	@ (8008a80 <HAL_TIM_PWM_Start+0x1d8>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d009      	beq.n	8008a32 <HAL_TIM_PWM_Start+0x18a>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a1b      	ldr	r2, [pc, #108]	@ (8008a90 <HAL_TIM_PWM_Start+0x1e8>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d004      	beq.n	8008a32 <HAL_TIM_PWM_Start+0x18a>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a19      	ldr	r2, [pc, #100]	@ (8008a94 <HAL_TIM_PWM_Start+0x1ec>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d115      	bne.n	8008a5e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	689a      	ldr	r2, [r3, #8]
 8008a38:	4b17      	ldr	r3, [pc, #92]	@ (8008a98 <HAL_TIM_PWM_Start+0x1f0>)
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2b06      	cmp	r3, #6
 8008a42:	d015      	beq.n	8008a70 <HAL_TIM_PWM_Start+0x1c8>
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a4a:	d011      	beq.n	8008a70 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f042 0201 	orr.w	r2, r2, #1
 8008a5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a5c:	e008      	b.n	8008a70 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f042 0201 	orr.w	r2, r2, #1
 8008a6c:	601a      	str	r2, [r3, #0]
 8008a6e:	e000      	b.n	8008a72 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a70:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008a72:	2300      	movs	r3, #0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3710      	adds	r7, #16
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}
 8008a7c:	40010000 	.word	0x40010000
 8008a80:	40010400 	.word	0x40010400
 8008a84:	40000400 	.word	0x40000400
 8008a88:	40000800 	.word	0x40000800
 8008a8c:	40000c00 	.word	0x40000c00
 8008a90:	40014000 	.word	0x40014000
 8008a94:	40001800 	.word	0x40001800
 8008a98:	00010007 	.word	0x00010007

08008a9c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d101      	bne.n	8008ab0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	e041      	b.n	8008b34 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d106      	bne.n	8008aca <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f839 	bl	8008b3c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2202      	movs	r2, #2
 8008ace:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	3304      	adds	r3, #4
 8008ada:	4619      	mov	r1, r3
 8008adc:	4610      	mov	r0, r2
 8008ade:	f000 fc67 	bl	80093b0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f022 0208 	bic.w	r2, r2, #8
 8008af0:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	6819      	ldr	r1, [r3, #0]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	683a      	ldr	r2, [r7, #0]
 8008afe:	430a      	orrs	r2, r1
 8008b00:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2201      	movs	r2, #1
 8008b06:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2201      	movs	r2, #1
 8008b16:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2201      	movs	r2, #1
 8008b26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3708      	adds	r7, #8
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008b44:	bf00      	nop
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <HAL_TIM_OnePulse_Start>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008b60:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008b68:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b70:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b78:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b7a:	7bfb      	ldrb	r3, [r7, #15]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d108      	bne.n	8008b92 <HAL_TIM_OnePulse_Start+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b80:	7bbb      	ldrb	r3, [r7, #14]
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d105      	bne.n	8008b92 <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b86:	7b7b      	ldrb	r3, [r7, #13]
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d102      	bne.n	8008b92 <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008b8c:	7b3b      	ldrb	r3, [r7, #12]
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d001      	beq.n	8008b96 <HAL_TIM_OnePulse_Start+0x46>
  {
    return HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	e035      	b.n	8008c02 <HAL_TIM_OnePulse_Start+0xb2>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2202      	movs	r2, #2
 8008b9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2202      	movs	r2, #2
 8008ba2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2202      	movs	r2, #2
 8008baa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2202      	movs	r2, #2
 8008bb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f001 f822 	bl	8009c08 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	2104      	movs	r1, #4
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f001 f81b 	bl	8009c08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a0d      	ldr	r2, [pc, #52]	@ (8008c0c <HAL_TIM_OnePulse_Start+0xbc>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d004      	beq.n	8008be6 <HAL_TIM_OnePulse_Start+0x96>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a0b      	ldr	r2, [pc, #44]	@ (8008c10 <HAL_TIM_OnePulse_Start+0xc0>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d101      	bne.n	8008bea <HAL_TIM_OnePulse_Start+0x9a>
 8008be6:	2301      	movs	r3, #1
 8008be8:	e000      	b.n	8008bec <HAL_TIM_OnePulse_Start+0x9c>
 8008bea:	2300      	movs	r3, #0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d007      	beq.n	8008c00 <HAL_TIM_OnePulse_Start+0xb0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008bfe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	40010000 	.word	0x40010000
 8008c10:	40010400 	.word	0x40010400

08008c14 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b086      	sub	sp, #24
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d101      	bne.n	8008c28 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e08f      	b.n	8008d48 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d106      	bne.n	8008c42 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f7fb f87d 	bl	8003d3c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2202      	movs	r2, #2
 8008c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	6899      	ldr	r1, [r3, #8]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	4b3e      	ldr	r3, [pc, #248]	@ (8008d50 <HAL_TIM_Encoder_Init+0x13c>)
 8008c56:	400b      	ands	r3, r1
 8008c58:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	3304      	adds	r3, #4
 8008c62:	4619      	mov	r1, r3
 8008c64:	4610      	mov	r0, r2
 8008c66:	f000 fba3 	bl	80093b0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	699b      	ldr	r3, [r3, #24]
 8008c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	6a1b      	ldr	r3, [r3, #32]
 8008c80:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	697a      	ldr	r2, [r7, #20]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	4b31      	ldr	r3, [pc, #196]	@ (8008d54 <HAL_TIM_Encoder_Init+0x140>)
 8008c90:	4013      	ands	r3, r2
 8008c92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	689a      	ldr	r2, [r3, #8]
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	699b      	ldr	r3, [r3, #24]
 8008c9c:	021b      	lsls	r3, r3, #8
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	693a      	ldr	r2, [r7, #16]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008ca6:	693a      	ldr	r2, [r7, #16]
 8008ca8:	4b2b      	ldr	r3, [pc, #172]	@ (8008d58 <HAL_TIM_Encoder_Init+0x144>)
 8008caa:	4013      	ands	r3, r2
 8008cac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008cae:	693a      	ldr	r2, [r7, #16]
 8008cb0:	4b2a      	ldr	r3, [pc, #168]	@ (8008d5c <HAL_TIM_Encoder_Init+0x148>)
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	68da      	ldr	r2, [r3, #12]
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	69db      	ldr	r3, [r3, #28]
 8008cbe:	021b      	lsls	r3, r3, #8
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	693a      	ldr	r2, [r7, #16]
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	011a      	lsls	r2, r3, #4
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	031b      	lsls	r3, r3, #12
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	693a      	ldr	r2, [r7, #16]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008ce2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008cea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	685a      	ldr	r2, [r3, #4]
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	695b      	ldr	r3, [r3, #20]
 8008cf4:	011b      	lsls	r3, r3, #4
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	697a      	ldr	r2, [r7, #20]
 8008d04:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	693a      	ldr	r2, [r7, #16]
 8008d0c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2201      	movs	r2, #1
 8008d22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2201      	movs	r2, #1
 8008d2a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2201      	movs	r2, #1
 8008d32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2201      	movs	r2, #1
 8008d42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3718      	adds	r7, #24
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	fffebff8 	.word	0xfffebff8
 8008d54:	fffffcfc 	.word	0xfffffcfc
 8008d58:	fffff3f3 	.word	0xfffff3f3
 8008d5c:	ffff0f0f 	.word	0xffff0f0f

08008d60 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008d70:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008d78:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d80:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d88:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d110      	bne.n	8008db2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d90:	7bfb      	ldrb	r3, [r7, #15]
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d102      	bne.n	8008d9c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008d96:	7b7b      	ldrb	r3, [r7, #13]
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d001      	beq.n	8008da0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e069      	b.n	8008e74 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2202      	movs	r2, #2
 8008da4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2202      	movs	r2, #2
 8008dac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008db0:	e031      	b.n	8008e16 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	2b04      	cmp	r3, #4
 8008db6:	d110      	bne.n	8008dda <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008db8:	7bbb      	ldrb	r3, [r7, #14]
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d102      	bne.n	8008dc4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008dbe:	7b3b      	ldrb	r3, [r7, #12]
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d001      	beq.n	8008dc8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e055      	b.n	8008e74 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2202      	movs	r2, #2
 8008dcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2202      	movs	r2, #2
 8008dd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008dd8:	e01d      	b.n	8008e16 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008dda:	7bfb      	ldrb	r3, [r7, #15]
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d108      	bne.n	8008df2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008de0:	7bbb      	ldrb	r3, [r7, #14]
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d105      	bne.n	8008df2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008de6:	7b7b      	ldrb	r3, [r7, #13]
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d102      	bne.n	8008df2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008dec:	7b3b      	ldrb	r3, [r7, #12]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d001      	beq.n	8008df6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	e03e      	b.n	8008e74 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2202      	movs	r2, #2
 8008dfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2202      	movs	r2, #2
 8008e02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2202      	movs	r2, #2
 8008e0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2202      	movs	r2, #2
 8008e12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d003      	beq.n	8008e24 <HAL_TIM_Encoder_Start+0xc4>
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	2b04      	cmp	r3, #4
 8008e20:	d008      	beq.n	8008e34 <HAL_TIM_Encoder_Start+0xd4>
 8008e22:	e00f      	b.n	8008e44 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	2100      	movs	r1, #0
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f000 feeb 	bl	8009c08 <TIM_CCxChannelCmd>
      break;
 8008e32:	e016      	b.n	8008e62 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	2104      	movs	r1, #4
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f000 fee3 	bl	8009c08 <TIM_CCxChannelCmd>
      break;
 8008e42:	e00e      	b.n	8008e62 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	2100      	movs	r1, #0
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f000 fedb 	bl	8009c08 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2201      	movs	r2, #1
 8008e58:	2104      	movs	r1, #4
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f000 fed4 	bl	8009c08 <TIM_CCxChannelCmd>
      break;
 8008e60:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f042 0201 	orr.w	r2, r2, #1
 8008e70:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3710      	adds	r7, #16
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b086      	sub	sp, #24
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d101      	bne.n	8008e9a <HAL_TIM_OC_ConfigChannel+0x1e>
 8008e96:	2302      	movs	r3, #2
 8008e98:	e066      	b.n	8008f68 <HAL_TIM_OC_ConfigChannel+0xec>
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2b14      	cmp	r3, #20
 8008ea6:	d857      	bhi.n	8008f58 <HAL_TIM_OC_ConfigChannel+0xdc>
 8008ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8008eb0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8008eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eae:	bf00      	nop
 8008eb0:	08008f05 	.word	0x08008f05
 8008eb4:	08008f59 	.word	0x08008f59
 8008eb8:	08008f59 	.word	0x08008f59
 8008ebc:	08008f59 	.word	0x08008f59
 8008ec0:	08008f13 	.word	0x08008f13
 8008ec4:	08008f59 	.word	0x08008f59
 8008ec8:	08008f59 	.word	0x08008f59
 8008ecc:	08008f59 	.word	0x08008f59
 8008ed0:	08008f21 	.word	0x08008f21
 8008ed4:	08008f59 	.word	0x08008f59
 8008ed8:	08008f59 	.word	0x08008f59
 8008edc:	08008f59 	.word	0x08008f59
 8008ee0:	08008f2f 	.word	0x08008f2f
 8008ee4:	08008f59 	.word	0x08008f59
 8008ee8:	08008f59 	.word	0x08008f59
 8008eec:	08008f59 	.word	0x08008f59
 8008ef0:	08008f3d 	.word	0x08008f3d
 8008ef4:	08008f59 	.word	0x08008f59
 8008ef8:	08008f59 	.word	0x08008f59
 8008efc:	08008f59 	.word	0x08008f59
 8008f00:	08008f4b 	.word	0x08008f4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68b9      	ldr	r1, [r7, #8]
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f000 faf0 	bl	80094f0 <TIM_OC1_SetConfig>
      break;
 8008f10:	e025      	b.n	8008f5e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	68b9      	ldr	r1, [r7, #8]
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f000 fb5b 	bl	80095d4 <TIM_OC2_SetConfig>
      break;
 8008f1e:	e01e      	b.n	8008f5e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68b9      	ldr	r1, [r7, #8]
 8008f26:	4618      	mov	r0, r3
 8008f28:	f000 fbcc 	bl	80096c4 <TIM_OC3_SetConfig>
      break;
 8008f2c:	e017      	b.n	8008f5e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	68b9      	ldr	r1, [r7, #8]
 8008f34:	4618      	mov	r0, r3
 8008f36:	f000 fc3b 	bl	80097b0 <TIM_OC4_SetConfig>
      break;
 8008f3a:	e010      	b.n	8008f5e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68b9      	ldr	r1, [r7, #8]
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 fc8c 	bl	8009860 <TIM_OC5_SetConfig>
      break;
 8008f48:	e009      	b.n	8008f5e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	68b9      	ldr	r1, [r7, #8]
 8008f50:	4618      	mov	r0, r3
 8008f52:	f000 fcd7 	bl	8009904 <TIM_OC6_SetConfig>
      break;
 8008f56:	e002      	b.n	8008f5e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	75fb      	strb	r3, [r7, #23]
      break;
 8008f5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3718      	adds	r7, #24
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b086      	sub	sp, #24
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	60f8      	str	r0, [r7, #12]
 8008f78:	60b9      	str	r1, [r7, #8]
 8008f7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d101      	bne.n	8008f8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008f8a:	2302      	movs	r3, #2
 8008f8c:	e0ff      	b.n	800918e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2201      	movs	r2, #1
 8008f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2b14      	cmp	r3, #20
 8008f9a:	f200 80f0 	bhi.w	800917e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8008fa4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa4:	08008ff9 	.word	0x08008ff9
 8008fa8:	0800917f 	.word	0x0800917f
 8008fac:	0800917f 	.word	0x0800917f
 8008fb0:	0800917f 	.word	0x0800917f
 8008fb4:	08009039 	.word	0x08009039
 8008fb8:	0800917f 	.word	0x0800917f
 8008fbc:	0800917f 	.word	0x0800917f
 8008fc0:	0800917f 	.word	0x0800917f
 8008fc4:	0800907b 	.word	0x0800907b
 8008fc8:	0800917f 	.word	0x0800917f
 8008fcc:	0800917f 	.word	0x0800917f
 8008fd0:	0800917f 	.word	0x0800917f
 8008fd4:	080090bb 	.word	0x080090bb
 8008fd8:	0800917f 	.word	0x0800917f
 8008fdc:	0800917f 	.word	0x0800917f
 8008fe0:	0800917f 	.word	0x0800917f
 8008fe4:	080090fd 	.word	0x080090fd
 8008fe8:	0800917f 	.word	0x0800917f
 8008fec:	0800917f 	.word	0x0800917f
 8008ff0:	0800917f 	.word	0x0800917f
 8008ff4:	0800913d 	.word	0x0800913d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	68b9      	ldr	r1, [r7, #8]
 8008ffe:	4618      	mov	r0, r3
 8009000:	f000 fa76 	bl	80094f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	699a      	ldr	r2, [r3, #24]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f042 0208 	orr.w	r2, r2, #8
 8009012:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	699a      	ldr	r2, [r3, #24]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f022 0204 	bic.w	r2, r2, #4
 8009022:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	6999      	ldr	r1, [r3, #24]
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	691a      	ldr	r2, [r3, #16]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	430a      	orrs	r2, r1
 8009034:	619a      	str	r2, [r3, #24]
      break;
 8009036:	e0a5      	b.n	8009184 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	68b9      	ldr	r1, [r7, #8]
 800903e:	4618      	mov	r0, r3
 8009040:	f000 fac8 	bl	80095d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	699a      	ldr	r2, [r3, #24]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009052:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	699a      	ldr	r2, [r3, #24]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009062:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	6999      	ldr	r1, [r3, #24]
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	021a      	lsls	r2, r3, #8
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	430a      	orrs	r2, r1
 8009076:	619a      	str	r2, [r3, #24]
      break;
 8009078:	e084      	b.n	8009184 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	68b9      	ldr	r1, [r7, #8]
 8009080:	4618      	mov	r0, r3
 8009082:	f000 fb1f 	bl	80096c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	69da      	ldr	r2, [r3, #28]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f042 0208 	orr.w	r2, r2, #8
 8009094:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	69da      	ldr	r2, [r3, #28]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f022 0204 	bic.w	r2, r2, #4
 80090a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	69d9      	ldr	r1, [r3, #28]
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	691a      	ldr	r2, [r3, #16]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	430a      	orrs	r2, r1
 80090b6:	61da      	str	r2, [r3, #28]
      break;
 80090b8:	e064      	b.n	8009184 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	68b9      	ldr	r1, [r7, #8]
 80090c0:	4618      	mov	r0, r3
 80090c2:	f000 fb75 	bl	80097b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	69da      	ldr	r2, [r3, #28]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80090d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	69da      	ldr	r2, [r3, #28]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80090e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	69d9      	ldr	r1, [r3, #28]
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	691b      	ldr	r3, [r3, #16]
 80090f0:	021a      	lsls	r2, r3, #8
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	430a      	orrs	r2, r1
 80090f8:	61da      	str	r2, [r3, #28]
      break;
 80090fa:	e043      	b.n	8009184 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	68b9      	ldr	r1, [r7, #8]
 8009102:	4618      	mov	r0, r3
 8009104:	f000 fbac 	bl	8009860 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f042 0208 	orr.w	r2, r2, #8
 8009116:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f022 0204 	bic.w	r2, r2, #4
 8009126:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	691a      	ldr	r2, [r3, #16]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	430a      	orrs	r2, r1
 8009138:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800913a:	e023      	b.n	8009184 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	68b9      	ldr	r1, [r7, #8]
 8009142:	4618      	mov	r0, r3
 8009144:	f000 fbde 	bl	8009904 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009156:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009166:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	691b      	ldr	r3, [r3, #16]
 8009172:	021a      	lsls	r2, r3, #8
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	430a      	orrs	r2, r1
 800917a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800917c:	e002      	b.n	8009184 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800917e:	2301      	movs	r3, #1
 8009180:	75fb      	strb	r3, [r7, #23]
      break;
 8009182:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2200      	movs	r2, #0
 8009188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800918c:	7dfb      	ldrb	r3, [r7, #23]
}
 800918e:	4618      	mov	r0, r3
 8009190:	3718      	adds	r7, #24
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop

08009198 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80091a2:	2300      	movs	r3, #0
 80091a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d101      	bne.n	80091b4 <HAL_TIM_ConfigClockSource+0x1c>
 80091b0:	2302      	movs	r3, #2
 80091b2:	e0b4      	b.n	800931e <HAL_TIM_ConfigClockSource+0x186>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2202      	movs	r2, #2
 80091c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80091cc:	68ba      	ldr	r2, [r7, #8]
 80091ce:	4b56      	ldr	r3, [pc, #344]	@ (8009328 <HAL_TIM_ConfigClockSource+0x190>)
 80091d0:	4013      	ands	r3, r2
 80091d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80091da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	68ba      	ldr	r2, [r7, #8]
 80091e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091ec:	d03e      	beq.n	800926c <HAL_TIM_ConfigClockSource+0xd4>
 80091ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091f2:	f200 8087 	bhi.w	8009304 <HAL_TIM_ConfigClockSource+0x16c>
 80091f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091fa:	f000 8086 	beq.w	800930a <HAL_TIM_ConfigClockSource+0x172>
 80091fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009202:	d87f      	bhi.n	8009304 <HAL_TIM_ConfigClockSource+0x16c>
 8009204:	2b70      	cmp	r3, #112	@ 0x70
 8009206:	d01a      	beq.n	800923e <HAL_TIM_ConfigClockSource+0xa6>
 8009208:	2b70      	cmp	r3, #112	@ 0x70
 800920a:	d87b      	bhi.n	8009304 <HAL_TIM_ConfigClockSource+0x16c>
 800920c:	2b60      	cmp	r3, #96	@ 0x60
 800920e:	d050      	beq.n	80092b2 <HAL_TIM_ConfigClockSource+0x11a>
 8009210:	2b60      	cmp	r3, #96	@ 0x60
 8009212:	d877      	bhi.n	8009304 <HAL_TIM_ConfigClockSource+0x16c>
 8009214:	2b50      	cmp	r3, #80	@ 0x50
 8009216:	d03c      	beq.n	8009292 <HAL_TIM_ConfigClockSource+0xfa>
 8009218:	2b50      	cmp	r3, #80	@ 0x50
 800921a:	d873      	bhi.n	8009304 <HAL_TIM_ConfigClockSource+0x16c>
 800921c:	2b40      	cmp	r3, #64	@ 0x40
 800921e:	d058      	beq.n	80092d2 <HAL_TIM_ConfigClockSource+0x13a>
 8009220:	2b40      	cmp	r3, #64	@ 0x40
 8009222:	d86f      	bhi.n	8009304 <HAL_TIM_ConfigClockSource+0x16c>
 8009224:	2b30      	cmp	r3, #48	@ 0x30
 8009226:	d064      	beq.n	80092f2 <HAL_TIM_ConfigClockSource+0x15a>
 8009228:	2b30      	cmp	r3, #48	@ 0x30
 800922a:	d86b      	bhi.n	8009304 <HAL_TIM_ConfigClockSource+0x16c>
 800922c:	2b20      	cmp	r3, #32
 800922e:	d060      	beq.n	80092f2 <HAL_TIM_ConfigClockSource+0x15a>
 8009230:	2b20      	cmp	r3, #32
 8009232:	d867      	bhi.n	8009304 <HAL_TIM_ConfigClockSource+0x16c>
 8009234:	2b00      	cmp	r3, #0
 8009236:	d05c      	beq.n	80092f2 <HAL_TIM_ConfigClockSource+0x15a>
 8009238:	2b10      	cmp	r3, #16
 800923a:	d05a      	beq.n	80092f2 <HAL_TIM_ConfigClockSource+0x15a>
 800923c:	e062      	b.n	8009304 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800924e:	f000 fcbb 	bl	8009bc8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009260:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	68ba      	ldr	r2, [r7, #8]
 8009268:	609a      	str	r2, [r3, #8]
      break;
 800926a:	e04f      	b.n	800930c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800927c:	f000 fca4 	bl	8009bc8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	689a      	ldr	r2, [r3, #8]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800928e:	609a      	str	r2, [r3, #8]
      break;
 8009290:	e03c      	b.n	800930c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800929e:	461a      	mov	r2, r3
 80092a0:	f000 fc18 	bl	8009ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2150      	movs	r1, #80	@ 0x50
 80092aa:	4618      	mov	r0, r3
 80092ac:	f000 fc71 	bl	8009b92 <TIM_ITRx_SetConfig>
      break;
 80092b0:	e02c      	b.n	800930c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80092be:	461a      	mov	r2, r3
 80092c0:	f000 fc37 	bl	8009b32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2160      	movs	r1, #96	@ 0x60
 80092ca:	4618      	mov	r0, r3
 80092cc:	f000 fc61 	bl	8009b92 <TIM_ITRx_SetConfig>
      break;
 80092d0:	e01c      	b.n	800930c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092de:	461a      	mov	r2, r3
 80092e0:	f000 fbf8 	bl	8009ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2140      	movs	r1, #64	@ 0x40
 80092ea:	4618      	mov	r0, r3
 80092ec:	f000 fc51 	bl	8009b92 <TIM_ITRx_SetConfig>
      break;
 80092f0:	e00c      	b.n	800930c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4619      	mov	r1, r3
 80092fc:	4610      	mov	r0, r2
 80092fe:	f000 fc48 	bl	8009b92 <TIM_ITRx_SetConfig>
      break;
 8009302:	e003      	b.n	800930c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009304:	2301      	movs	r3, #1
 8009306:	73fb      	strb	r3, [r7, #15]
      break;
 8009308:	e000      	b.n	800930c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800930a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2201      	movs	r2, #1
 8009310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800931c:	7bfb      	ldrb	r3, [r7, #15]
}
 800931e:	4618      	mov	r0, r3
 8009320:	3710      	adds	r7, #16
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	fffeff88 	.word	0xfffeff88

0800932c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800933c:	2b01      	cmp	r3, #1
 800933e:	d101      	bne.n	8009344 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009340:	2302      	movs	r3, #2
 8009342:	e031      	b.n	80093a8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2201      	movs	r2, #1
 8009348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2202      	movs	r2, #2
 8009350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009354:	6839      	ldr	r1, [r7, #0]
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fb28 	bl	80099ac <TIM_SlaveTimer_SetConfig>
 800935c:	4603      	mov	r3, r0
 800935e:	2b00      	cmp	r3, #0
 8009360:	d009      	beq.n	8009376 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2201      	movs	r2, #1
 8009366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8009372:	2301      	movs	r3, #1
 8009374:	e018      	b.n	80093a8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	68da      	ldr	r2, [r3, #12]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009384:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	68da      	ldr	r2, [r3, #12]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009394:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2201      	movs	r2, #1
 800939a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3708      	adds	r7, #8
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b085      	sub	sp, #20
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	4a40      	ldr	r2, [pc, #256]	@ (80094c4 <TIM_Base_SetConfig+0x114>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d013      	beq.n	80093f0 <TIM_Base_SetConfig+0x40>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093ce:	d00f      	beq.n	80093f0 <TIM_Base_SetConfig+0x40>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4a3d      	ldr	r2, [pc, #244]	@ (80094c8 <TIM_Base_SetConfig+0x118>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d00b      	beq.n	80093f0 <TIM_Base_SetConfig+0x40>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	4a3c      	ldr	r2, [pc, #240]	@ (80094cc <TIM_Base_SetConfig+0x11c>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d007      	beq.n	80093f0 <TIM_Base_SetConfig+0x40>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4a3b      	ldr	r2, [pc, #236]	@ (80094d0 <TIM_Base_SetConfig+0x120>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d003      	beq.n	80093f0 <TIM_Base_SetConfig+0x40>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	4a3a      	ldr	r2, [pc, #232]	@ (80094d4 <TIM_Base_SetConfig+0x124>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d108      	bne.n	8009402 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	4313      	orrs	r3, r2
 8009400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	4a2f      	ldr	r2, [pc, #188]	@ (80094c4 <TIM_Base_SetConfig+0x114>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d02b      	beq.n	8009462 <TIM_Base_SetConfig+0xb2>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009410:	d027      	beq.n	8009462 <TIM_Base_SetConfig+0xb2>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a2c      	ldr	r2, [pc, #176]	@ (80094c8 <TIM_Base_SetConfig+0x118>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d023      	beq.n	8009462 <TIM_Base_SetConfig+0xb2>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a2b      	ldr	r2, [pc, #172]	@ (80094cc <TIM_Base_SetConfig+0x11c>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d01f      	beq.n	8009462 <TIM_Base_SetConfig+0xb2>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a2a      	ldr	r2, [pc, #168]	@ (80094d0 <TIM_Base_SetConfig+0x120>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d01b      	beq.n	8009462 <TIM_Base_SetConfig+0xb2>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4a29      	ldr	r2, [pc, #164]	@ (80094d4 <TIM_Base_SetConfig+0x124>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d017      	beq.n	8009462 <TIM_Base_SetConfig+0xb2>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a28      	ldr	r2, [pc, #160]	@ (80094d8 <TIM_Base_SetConfig+0x128>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d013      	beq.n	8009462 <TIM_Base_SetConfig+0xb2>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a27      	ldr	r2, [pc, #156]	@ (80094dc <TIM_Base_SetConfig+0x12c>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d00f      	beq.n	8009462 <TIM_Base_SetConfig+0xb2>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a26      	ldr	r2, [pc, #152]	@ (80094e0 <TIM_Base_SetConfig+0x130>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d00b      	beq.n	8009462 <TIM_Base_SetConfig+0xb2>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4a25      	ldr	r2, [pc, #148]	@ (80094e4 <TIM_Base_SetConfig+0x134>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d007      	beq.n	8009462 <TIM_Base_SetConfig+0xb2>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4a24      	ldr	r2, [pc, #144]	@ (80094e8 <TIM_Base_SetConfig+0x138>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d003      	beq.n	8009462 <TIM_Base_SetConfig+0xb2>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4a23      	ldr	r2, [pc, #140]	@ (80094ec <TIM_Base_SetConfig+0x13c>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d108      	bne.n	8009474 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009468:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	68fa      	ldr	r2, [r7, #12]
 8009470:	4313      	orrs	r3, r2
 8009472:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	695b      	ldr	r3, [r3, #20]
 800947e:	4313      	orrs	r3, r2
 8009480:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	689a      	ldr	r2, [r3, #8]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a0a      	ldr	r2, [pc, #40]	@ (80094c4 <TIM_Base_SetConfig+0x114>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d003      	beq.n	80094a8 <TIM_Base_SetConfig+0xf8>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4a0c      	ldr	r2, [pc, #48]	@ (80094d4 <TIM_Base_SetConfig+0x124>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d103      	bne.n	80094b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	691a      	ldr	r2, [r3, #16]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	615a      	str	r2, [r3, #20]
}
 80094b6:	bf00      	nop
 80094b8:	3714      	adds	r7, #20
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop
 80094c4:	40010000 	.word	0x40010000
 80094c8:	40000400 	.word	0x40000400
 80094cc:	40000800 	.word	0x40000800
 80094d0:	40000c00 	.word	0x40000c00
 80094d4:	40010400 	.word	0x40010400
 80094d8:	40014000 	.word	0x40014000
 80094dc:	40014400 	.word	0x40014400
 80094e0:	40014800 	.word	0x40014800
 80094e4:	40001800 	.word	0x40001800
 80094e8:	40001c00 	.word	0x40001c00
 80094ec:	40002000 	.word	0x40002000

080094f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b087      	sub	sp, #28
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6a1b      	ldr	r3, [r3, #32]
 80094fe:	f023 0201 	bic.w	r2, r3, #1
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6a1b      	ldr	r3, [r3, #32]
 800950a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	699b      	ldr	r3, [r3, #24]
 8009516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	4b2b      	ldr	r3, [pc, #172]	@ (80095c8 <TIM_OC1_SetConfig+0xd8>)
 800951c:	4013      	ands	r3, r2
 800951e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f023 0303 	bic.w	r3, r3, #3
 8009526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	68fa      	ldr	r2, [r7, #12]
 800952e:	4313      	orrs	r3, r2
 8009530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	f023 0302 	bic.w	r3, r3, #2
 8009538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	697a      	ldr	r2, [r7, #20]
 8009540:	4313      	orrs	r3, r2
 8009542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4a21      	ldr	r2, [pc, #132]	@ (80095cc <TIM_OC1_SetConfig+0xdc>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d003      	beq.n	8009554 <TIM_OC1_SetConfig+0x64>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a20      	ldr	r2, [pc, #128]	@ (80095d0 <TIM_OC1_SetConfig+0xe0>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d10c      	bne.n	800956e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	f023 0308 	bic.w	r3, r3, #8
 800955a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	697a      	ldr	r2, [r7, #20]
 8009562:	4313      	orrs	r3, r2
 8009564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	f023 0304 	bic.w	r3, r3, #4
 800956c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	4a16      	ldr	r2, [pc, #88]	@ (80095cc <TIM_OC1_SetConfig+0xdc>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d003      	beq.n	800957e <TIM_OC1_SetConfig+0x8e>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	4a15      	ldr	r2, [pc, #84]	@ (80095d0 <TIM_OC1_SetConfig+0xe0>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d111      	bne.n	80095a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800958c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	695b      	ldr	r3, [r3, #20]
 8009592:	693a      	ldr	r2, [r7, #16]
 8009594:	4313      	orrs	r3, r2
 8009596:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	699b      	ldr	r3, [r3, #24]
 800959c:	693a      	ldr	r2, [r7, #16]
 800959e:	4313      	orrs	r3, r2
 80095a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	693a      	ldr	r2, [r7, #16]
 80095a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	68fa      	ldr	r2, [r7, #12]
 80095ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	685a      	ldr	r2, [r3, #4]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	697a      	ldr	r2, [r7, #20]
 80095ba:	621a      	str	r2, [r3, #32]
}
 80095bc:	bf00      	nop
 80095be:	371c      	adds	r7, #28
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr
 80095c8:	fffeff8f 	.word	0xfffeff8f
 80095cc:	40010000 	.word	0x40010000
 80095d0:	40010400 	.word	0x40010400

080095d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b087      	sub	sp, #28
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6a1b      	ldr	r3, [r3, #32]
 80095e2:	f023 0210 	bic.w	r2, r3, #16
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a1b      	ldr	r3, [r3, #32]
 80095ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	699b      	ldr	r3, [r3, #24]
 80095fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	4b2e      	ldr	r3, [pc, #184]	@ (80096b8 <TIM_OC2_SetConfig+0xe4>)
 8009600:	4013      	ands	r3, r2
 8009602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800960a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	021b      	lsls	r3, r3, #8
 8009612:	68fa      	ldr	r2, [r7, #12]
 8009614:	4313      	orrs	r3, r2
 8009616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	f023 0320 	bic.w	r3, r3, #32
 800961e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	011b      	lsls	r3, r3, #4
 8009626:	697a      	ldr	r2, [r7, #20]
 8009628:	4313      	orrs	r3, r2
 800962a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	4a23      	ldr	r2, [pc, #140]	@ (80096bc <TIM_OC2_SetConfig+0xe8>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d003      	beq.n	800963c <TIM_OC2_SetConfig+0x68>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4a22      	ldr	r2, [pc, #136]	@ (80096c0 <TIM_OC2_SetConfig+0xec>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d10d      	bne.n	8009658 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009642:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	011b      	lsls	r3, r3, #4
 800964a:	697a      	ldr	r2, [r7, #20]
 800964c:	4313      	orrs	r3, r2
 800964e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009656:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4a18      	ldr	r2, [pc, #96]	@ (80096bc <TIM_OC2_SetConfig+0xe8>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d003      	beq.n	8009668 <TIM_OC2_SetConfig+0x94>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4a17      	ldr	r2, [pc, #92]	@ (80096c0 <TIM_OC2_SetConfig+0xec>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d113      	bne.n	8009690 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800966e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009676:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	695b      	ldr	r3, [r3, #20]
 800967c:	009b      	lsls	r3, r3, #2
 800967e:	693a      	ldr	r2, [r7, #16]
 8009680:	4313      	orrs	r3, r2
 8009682:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	699b      	ldr	r3, [r3, #24]
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	693a      	ldr	r2, [r7, #16]
 800968c:	4313      	orrs	r3, r2
 800968e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	693a      	ldr	r2, [r7, #16]
 8009694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	68fa      	ldr	r2, [r7, #12]
 800969a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	685a      	ldr	r2, [r3, #4]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	697a      	ldr	r2, [r7, #20]
 80096a8:	621a      	str	r2, [r3, #32]
}
 80096aa:	bf00      	nop
 80096ac:	371c      	adds	r7, #28
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr
 80096b6:	bf00      	nop
 80096b8:	feff8fff 	.word	0xfeff8fff
 80096bc:	40010000 	.word	0x40010000
 80096c0:	40010400 	.word	0x40010400

080096c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b087      	sub	sp, #28
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6a1b      	ldr	r3, [r3, #32]
 80096d2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6a1b      	ldr	r3, [r3, #32]
 80096de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	69db      	ldr	r3, [r3, #28]
 80096ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80096ec:	68fa      	ldr	r2, [r7, #12]
 80096ee:	4b2d      	ldr	r3, [pc, #180]	@ (80097a4 <TIM_OC3_SetConfig+0xe0>)
 80096f0:	4013      	ands	r3, r2
 80096f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f023 0303 	bic.w	r3, r3, #3
 80096fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	68fa      	ldr	r2, [r7, #12]
 8009702:	4313      	orrs	r3, r2
 8009704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800970c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	689b      	ldr	r3, [r3, #8]
 8009712:	021b      	lsls	r3, r3, #8
 8009714:	697a      	ldr	r2, [r7, #20]
 8009716:	4313      	orrs	r3, r2
 8009718:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4a22      	ldr	r2, [pc, #136]	@ (80097a8 <TIM_OC3_SetConfig+0xe4>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d003      	beq.n	800972a <TIM_OC3_SetConfig+0x66>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4a21      	ldr	r2, [pc, #132]	@ (80097ac <TIM_OC3_SetConfig+0xe8>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d10d      	bne.n	8009746 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009730:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	021b      	lsls	r3, r3, #8
 8009738:	697a      	ldr	r2, [r7, #20]
 800973a:	4313      	orrs	r3, r2
 800973c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009744:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4a17      	ldr	r2, [pc, #92]	@ (80097a8 <TIM_OC3_SetConfig+0xe4>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d003      	beq.n	8009756 <TIM_OC3_SetConfig+0x92>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	4a16      	ldr	r2, [pc, #88]	@ (80097ac <TIM_OC3_SetConfig+0xe8>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d113      	bne.n	800977e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800975c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009764:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	695b      	ldr	r3, [r3, #20]
 800976a:	011b      	lsls	r3, r3, #4
 800976c:	693a      	ldr	r2, [r7, #16]
 800976e:	4313      	orrs	r3, r2
 8009770:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	699b      	ldr	r3, [r3, #24]
 8009776:	011b      	lsls	r3, r3, #4
 8009778:	693a      	ldr	r2, [r7, #16]
 800977a:	4313      	orrs	r3, r2
 800977c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	693a      	ldr	r2, [r7, #16]
 8009782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	68fa      	ldr	r2, [r7, #12]
 8009788:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	685a      	ldr	r2, [r3, #4]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	697a      	ldr	r2, [r7, #20]
 8009796:	621a      	str	r2, [r3, #32]
}
 8009798:	bf00      	nop
 800979a:	371c      	adds	r7, #28
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr
 80097a4:	fffeff8f 	.word	0xfffeff8f
 80097a8:	40010000 	.word	0x40010000
 80097ac:	40010400 	.word	0x40010400

080097b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b087      	sub	sp, #28
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6a1b      	ldr	r3, [r3, #32]
 80097be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6a1b      	ldr	r3, [r3, #32]
 80097ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	69db      	ldr	r3, [r3, #28]
 80097d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80097d8:	68fa      	ldr	r2, [r7, #12]
 80097da:	4b1e      	ldr	r3, [pc, #120]	@ (8009854 <TIM_OC4_SetConfig+0xa4>)
 80097dc:	4013      	ands	r3, r2
 80097de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80097e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	021b      	lsls	r3, r3, #8
 80097ee:	68fa      	ldr	r2, [r7, #12]
 80097f0:	4313      	orrs	r3, r2
 80097f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80097fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	031b      	lsls	r3, r3, #12
 8009802:	693a      	ldr	r2, [r7, #16]
 8009804:	4313      	orrs	r3, r2
 8009806:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	4a13      	ldr	r2, [pc, #76]	@ (8009858 <TIM_OC4_SetConfig+0xa8>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d003      	beq.n	8009818 <TIM_OC4_SetConfig+0x68>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a12      	ldr	r2, [pc, #72]	@ (800985c <TIM_OC4_SetConfig+0xac>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d109      	bne.n	800982c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800981e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	695b      	ldr	r3, [r3, #20]
 8009824:	019b      	lsls	r3, r3, #6
 8009826:	697a      	ldr	r2, [r7, #20]
 8009828:	4313      	orrs	r3, r2
 800982a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	697a      	ldr	r2, [r7, #20]
 8009830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	68fa      	ldr	r2, [r7, #12]
 8009836:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	685a      	ldr	r2, [r3, #4]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	693a      	ldr	r2, [r7, #16]
 8009844:	621a      	str	r2, [r3, #32]
}
 8009846:	bf00      	nop
 8009848:	371c      	adds	r7, #28
 800984a:	46bd      	mov	sp, r7
 800984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009850:	4770      	bx	lr
 8009852:	bf00      	nop
 8009854:	feff8fff 	.word	0xfeff8fff
 8009858:	40010000 	.word	0x40010000
 800985c:	40010400 	.word	0x40010400

08009860 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009860:	b480      	push	{r7}
 8009862:	b087      	sub	sp, #28
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a1b      	ldr	r3, [r3, #32]
 800986e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6a1b      	ldr	r3, [r3, #32]
 800987a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	4b1b      	ldr	r3, [pc, #108]	@ (80098f8 <TIM_OC5_SetConfig+0x98>)
 800988c:	4013      	ands	r3, r2
 800988e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	68fa      	ldr	r2, [r7, #12]
 8009896:	4313      	orrs	r3, r2
 8009898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80098a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	689b      	ldr	r3, [r3, #8]
 80098a6:	041b      	lsls	r3, r3, #16
 80098a8:	693a      	ldr	r2, [r7, #16]
 80098aa:	4313      	orrs	r3, r2
 80098ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	4a12      	ldr	r2, [pc, #72]	@ (80098fc <TIM_OC5_SetConfig+0x9c>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d003      	beq.n	80098be <TIM_OC5_SetConfig+0x5e>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4a11      	ldr	r2, [pc, #68]	@ (8009900 <TIM_OC5_SetConfig+0xa0>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d109      	bne.n	80098d2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	695b      	ldr	r3, [r3, #20]
 80098ca:	021b      	lsls	r3, r3, #8
 80098cc:	697a      	ldr	r2, [r7, #20]
 80098ce:	4313      	orrs	r3, r2
 80098d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	697a      	ldr	r2, [r7, #20]
 80098d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	68fa      	ldr	r2, [r7, #12]
 80098dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	685a      	ldr	r2, [r3, #4]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	693a      	ldr	r2, [r7, #16]
 80098ea:	621a      	str	r2, [r3, #32]
}
 80098ec:	bf00      	nop
 80098ee:	371c      	adds	r7, #28
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr
 80098f8:	fffeff8f 	.word	0xfffeff8f
 80098fc:	40010000 	.word	0x40010000
 8009900:	40010400 	.word	0x40010400

08009904 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009904:	b480      	push	{r7}
 8009906:	b087      	sub	sp, #28
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a1b      	ldr	r3, [r3, #32]
 8009912:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a1b      	ldr	r3, [r3, #32]
 800991e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800992a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	4b1c      	ldr	r3, [pc, #112]	@ (80099a0 <TIM_OC6_SetConfig+0x9c>)
 8009930:	4013      	ands	r3, r2
 8009932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	021b      	lsls	r3, r3, #8
 800993a:	68fa      	ldr	r2, [r7, #12]
 800993c:	4313      	orrs	r3, r2
 800993e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009946:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	051b      	lsls	r3, r3, #20
 800994e:	693a      	ldr	r2, [r7, #16]
 8009950:	4313      	orrs	r3, r2
 8009952:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	4a13      	ldr	r2, [pc, #76]	@ (80099a4 <TIM_OC6_SetConfig+0xa0>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d003      	beq.n	8009964 <TIM_OC6_SetConfig+0x60>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	4a12      	ldr	r2, [pc, #72]	@ (80099a8 <TIM_OC6_SetConfig+0xa4>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d109      	bne.n	8009978 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800996a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	695b      	ldr	r3, [r3, #20]
 8009970:	029b      	lsls	r3, r3, #10
 8009972:	697a      	ldr	r2, [r7, #20]
 8009974:	4313      	orrs	r3, r2
 8009976:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	697a      	ldr	r2, [r7, #20]
 800997c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	68fa      	ldr	r2, [r7, #12]
 8009982:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	685a      	ldr	r2, [r3, #4]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	693a      	ldr	r2, [r7, #16]
 8009990:	621a      	str	r2, [r3, #32]
}
 8009992:	bf00      	nop
 8009994:	371c      	adds	r7, #28
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr
 800999e:	bf00      	nop
 80099a0:	feff8fff 	.word	0xfeff8fff
 80099a4:	40010000 	.word	0x40010000
 80099a8:	40010400 	.word	0x40010400

080099ac <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b086      	sub	sp, #24
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80099b6:	2300      	movs	r3, #0
 80099b8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099c8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	693a      	ldr	r2, [r7, #16]
 80099d0:	4313      	orrs	r3, r2
 80099d2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80099d4:	693a      	ldr	r2, [r7, #16]
 80099d6:	4b3e      	ldr	r3, [pc, #248]	@ (8009ad0 <TIM_SlaveTimer_SetConfig+0x124>)
 80099d8:	4013      	ands	r3, r2
 80099da:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	693a      	ldr	r2, [r7, #16]
 80099e2:	4313      	orrs	r3, r2
 80099e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	693a      	ldr	r2, [r7, #16]
 80099ec:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	2b70      	cmp	r3, #112	@ 0x70
 80099f4:	d01a      	beq.n	8009a2c <TIM_SlaveTimer_SetConfig+0x80>
 80099f6:	2b70      	cmp	r3, #112	@ 0x70
 80099f8:	d860      	bhi.n	8009abc <TIM_SlaveTimer_SetConfig+0x110>
 80099fa:	2b60      	cmp	r3, #96	@ 0x60
 80099fc:	d054      	beq.n	8009aa8 <TIM_SlaveTimer_SetConfig+0xfc>
 80099fe:	2b60      	cmp	r3, #96	@ 0x60
 8009a00:	d85c      	bhi.n	8009abc <TIM_SlaveTimer_SetConfig+0x110>
 8009a02:	2b50      	cmp	r3, #80	@ 0x50
 8009a04:	d046      	beq.n	8009a94 <TIM_SlaveTimer_SetConfig+0xe8>
 8009a06:	2b50      	cmp	r3, #80	@ 0x50
 8009a08:	d858      	bhi.n	8009abc <TIM_SlaveTimer_SetConfig+0x110>
 8009a0a:	2b40      	cmp	r3, #64	@ 0x40
 8009a0c:	d019      	beq.n	8009a42 <TIM_SlaveTimer_SetConfig+0x96>
 8009a0e:	2b40      	cmp	r3, #64	@ 0x40
 8009a10:	d854      	bhi.n	8009abc <TIM_SlaveTimer_SetConfig+0x110>
 8009a12:	2b30      	cmp	r3, #48	@ 0x30
 8009a14:	d055      	beq.n	8009ac2 <TIM_SlaveTimer_SetConfig+0x116>
 8009a16:	2b30      	cmp	r3, #48	@ 0x30
 8009a18:	d850      	bhi.n	8009abc <TIM_SlaveTimer_SetConfig+0x110>
 8009a1a:	2b20      	cmp	r3, #32
 8009a1c:	d051      	beq.n	8009ac2 <TIM_SlaveTimer_SetConfig+0x116>
 8009a1e:	2b20      	cmp	r3, #32
 8009a20:	d84c      	bhi.n	8009abc <TIM_SlaveTimer_SetConfig+0x110>
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d04d      	beq.n	8009ac2 <TIM_SlaveTimer_SetConfig+0x116>
 8009a26:	2b10      	cmp	r3, #16
 8009a28:	d04b      	beq.n	8009ac2 <TIM_SlaveTimer_SetConfig+0x116>
 8009a2a:	e047      	b.n	8009abc <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8009a3c:	f000 f8c4 	bl	8009bc8 <TIM_ETR_SetConfig>
      break;
 8009a40:	e040      	b.n	8009ac4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2b05      	cmp	r3, #5
 8009a48:	d101      	bne.n	8009a4e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e03b      	b.n	8009ac6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	6a1b      	ldr	r3, [r3, #32]
 8009a54:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	6a1a      	ldr	r2, [r3, #32]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f022 0201 	bic.w	r2, r2, #1
 8009a64:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	699b      	ldr	r3, [r3, #24]
 8009a6c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009a74:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	691b      	ldr	r3, [r3, #16]
 8009a7a:	011b      	lsls	r3, r3, #4
 8009a7c:	68ba      	ldr	r2, [r7, #8]
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	68ba      	ldr	r2, [r7, #8]
 8009a88:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	68fa      	ldr	r2, [r7, #12]
 8009a90:	621a      	str	r2, [r3, #32]
      break;
 8009a92:	e017      	b.n	8009ac4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	f000 f817 	bl	8009ad4 <TIM_TI1_ConfigInputStage>
      break;
 8009aa6:	e00d      	b.n	8009ac4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	f000 f83c 	bl	8009b32 <TIM_TI2_ConfigInputStage>
      break;
 8009aba:	e003      	b.n	8009ac4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	75fb      	strb	r3, [r7, #23]
      break;
 8009ac0:	e000      	b.n	8009ac4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8009ac2:	bf00      	nop
  }

  return status;
 8009ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3718      	adds	r7, #24
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	fffefff8 	.word	0xfffefff8

08009ad4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b087      	sub	sp, #28
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	60f8      	str	r0, [r7, #12]
 8009adc:	60b9      	str	r1, [r7, #8]
 8009ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6a1b      	ldr	r3, [r3, #32]
 8009ae4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	6a1b      	ldr	r3, [r3, #32]
 8009aea:	f023 0201 	bic.w	r2, r3, #1
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	699b      	ldr	r3, [r3, #24]
 8009af6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	011b      	lsls	r3, r3, #4
 8009b04:	693a      	ldr	r2, [r7, #16]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	f023 030a 	bic.w	r3, r3, #10
 8009b10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b12:	697a      	ldr	r2, [r7, #20]
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	4313      	orrs	r3, r2
 8009b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	693a      	ldr	r2, [r7, #16]
 8009b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	697a      	ldr	r2, [r7, #20]
 8009b24:	621a      	str	r2, [r3, #32]
}
 8009b26:	bf00      	nop
 8009b28:	371c      	adds	r7, #28
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr

08009b32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b32:	b480      	push	{r7}
 8009b34:	b087      	sub	sp, #28
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	60f8      	str	r0, [r7, #12]
 8009b3a:	60b9      	str	r1, [r7, #8]
 8009b3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	6a1b      	ldr	r3, [r3, #32]
 8009b42:	f023 0210 	bic.w	r2, r3, #16
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	699b      	ldr	r3, [r3, #24]
 8009b4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	6a1b      	ldr	r3, [r3, #32]
 8009b54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009b5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	031b      	lsls	r3, r3, #12
 8009b62:	697a      	ldr	r2, [r7, #20]
 8009b64:	4313      	orrs	r3, r2
 8009b66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009b6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	011b      	lsls	r3, r3, #4
 8009b74:	693a      	ldr	r2, [r7, #16]
 8009b76:	4313      	orrs	r3, r2
 8009b78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	697a      	ldr	r2, [r7, #20]
 8009b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	693a      	ldr	r2, [r7, #16]
 8009b84:	621a      	str	r2, [r3, #32]
}
 8009b86:	bf00      	nop
 8009b88:	371c      	adds	r7, #28
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr

08009b92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009b92:	b480      	push	{r7}
 8009b94:	b085      	sub	sp, #20
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
 8009b9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ba8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009baa:	683a      	ldr	r2, [r7, #0]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	f043 0307 	orr.w	r3, r3, #7
 8009bb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	68fa      	ldr	r2, [r7, #12]
 8009bba:	609a      	str	r2, [r3, #8]
}
 8009bbc:	bf00      	nop
 8009bbe:	3714      	adds	r7, #20
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b087      	sub	sp, #28
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	60f8      	str	r0, [r7, #12]
 8009bd0:	60b9      	str	r1, [r7, #8]
 8009bd2:	607a      	str	r2, [r7, #4]
 8009bd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009be2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	021a      	lsls	r2, r3, #8
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	431a      	orrs	r2, r3
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	697a      	ldr	r2, [r7, #20]
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	697a      	ldr	r2, [r7, #20]
 8009bfa:	609a      	str	r2, [r3, #8]
}
 8009bfc:	bf00      	nop
 8009bfe:	371c      	adds	r7, #28
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b087      	sub	sp, #28
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	f003 031f 	and.w	r3, r3, #31
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	6a1a      	ldr	r2, [r3, #32]
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	43db      	mvns	r3, r3
 8009c2a:	401a      	ands	r2, r3
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	6a1a      	ldr	r2, [r3, #32]
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	f003 031f 	and.w	r3, r3, #31
 8009c3a:	6879      	ldr	r1, [r7, #4]
 8009c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8009c40:	431a      	orrs	r2, r3
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	621a      	str	r2, [r3, #32]
}
 8009c46:	bf00      	nop
 8009c48:	371c      	adds	r7, #28
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr
	...

08009c54 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d109      	bne.n	8009c78 <HAL_TIMEx_PWMN_Start+0x24>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009c6a:	b2db      	uxtb	r3, r3
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	bf14      	ite	ne
 8009c70:	2301      	movne	r3, #1
 8009c72:	2300      	moveq	r3, #0
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	e022      	b.n	8009cbe <HAL_TIMEx_PWMN_Start+0x6a>
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	2b04      	cmp	r3, #4
 8009c7c:	d109      	bne.n	8009c92 <HAL_TIMEx_PWMN_Start+0x3e>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	bf14      	ite	ne
 8009c8a:	2301      	movne	r3, #1
 8009c8c:	2300      	moveq	r3, #0
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	e015      	b.n	8009cbe <HAL_TIMEx_PWMN_Start+0x6a>
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	2b08      	cmp	r3, #8
 8009c96:	d109      	bne.n	8009cac <HAL_TIMEx_PWMN_Start+0x58>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	bf14      	ite	ne
 8009ca4:	2301      	movne	r3, #1
 8009ca6:	2300      	moveq	r3, #0
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	e008      	b.n	8009cbe <HAL_TIMEx_PWMN_Start+0x6a>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	bf14      	ite	ne
 8009cb8:	2301      	movne	r3, #1
 8009cba:	2300      	moveq	r3, #0
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d001      	beq.n	8009cc6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e073      	b.n	8009dae <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d104      	bne.n	8009cd6 <HAL_TIMEx_PWMN_Start+0x82>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2202      	movs	r2, #2
 8009cd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009cd4:	e013      	b.n	8009cfe <HAL_TIMEx_PWMN_Start+0xaa>
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	2b04      	cmp	r3, #4
 8009cda:	d104      	bne.n	8009ce6 <HAL_TIMEx_PWMN_Start+0x92>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2202      	movs	r2, #2
 8009ce0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009ce4:	e00b      	b.n	8009cfe <HAL_TIMEx_PWMN_Start+0xaa>
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	2b08      	cmp	r3, #8
 8009cea:	d104      	bne.n	8009cf6 <HAL_TIMEx_PWMN_Start+0xa2>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2202      	movs	r2, #2
 8009cf0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009cf4:	e003      	b.n	8009cfe <HAL_TIMEx_PWMN_Start+0xaa>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2202      	movs	r2, #2
 8009cfa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	2204      	movs	r2, #4
 8009d04:	6839      	ldr	r1, [r7, #0]
 8009d06:	4618      	mov	r0, r3
 8009d08:	f000 f972 	bl	8009ff0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009d1a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a25      	ldr	r2, [pc, #148]	@ (8009db8 <HAL_TIMEx_PWMN_Start+0x164>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d022      	beq.n	8009d6c <HAL_TIMEx_PWMN_Start+0x118>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d2e:	d01d      	beq.n	8009d6c <HAL_TIMEx_PWMN_Start+0x118>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a21      	ldr	r2, [pc, #132]	@ (8009dbc <HAL_TIMEx_PWMN_Start+0x168>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d018      	beq.n	8009d6c <HAL_TIMEx_PWMN_Start+0x118>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a20      	ldr	r2, [pc, #128]	@ (8009dc0 <HAL_TIMEx_PWMN_Start+0x16c>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d013      	beq.n	8009d6c <HAL_TIMEx_PWMN_Start+0x118>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a1e      	ldr	r2, [pc, #120]	@ (8009dc4 <HAL_TIMEx_PWMN_Start+0x170>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d00e      	beq.n	8009d6c <HAL_TIMEx_PWMN_Start+0x118>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a1d      	ldr	r2, [pc, #116]	@ (8009dc8 <HAL_TIMEx_PWMN_Start+0x174>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d009      	beq.n	8009d6c <HAL_TIMEx_PWMN_Start+0x118>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a1b      	ldr	r2, [pc, #108]	@ (8009dcc <HAL_TIMEx_PWMN_Start+0x178>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d004      	beq.n	8009d6c <HAL_TIMEx_PWMN_Start+0x118>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a1a      	ldr	r2, [pc, #104]	@ (8009dd0 <HAL_TIMEx_PWMN_Start+0x17c>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d115      	bne.n	8009d98 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	689a      	ldr	r2, [r3, #8]
 8009d72:	4b18      	ldr	r3, [pc, #96]	@ (8009dd4 <HAL_TIMEx_PWMN_Start+0x180>)
 8009d74:	4013      	ands	r3, r2
 8009d76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2b06      	cmp	r3, #6
 8009d7c:	d015      	beq.n	8009daa <HAL_TIMEx_PWMN_Start+0x156>
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d84:	d011      	beq.n	8009daa <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f042 0201 	orr.w	r2, r2, #1
 8009d94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d96:	e008      	b.n	8009daa <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f042 0201 	orr.w	r2, r2, #1
 8009da6:	601a      	str	r2, [r3, #0]
 8009da8:	e000      	b.n	8009dac <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009daa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009dac:	2300      	movs	r3, #0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	40010000 	.word	0x40010000
 8009dbc:	40000400 	.word	0x40000400
 8009dc0:	40000800 	.word	0x40000800
 8009dc4:	40000c00 	.word	0x40000c00
 8009dc8:	40010400 	.word	0x40010400
 8009dcc:	40014000 	.word	0x40014000
 8009dd0:	40001800 	.word	0x40001800
 8009dd4:	00010007 	.word	0x00010007

08009dd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b085      	sub	sp, #20
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d101      	bne.n	8009df0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009dec:	2302      	movs	r3, #2
 8009dee:	e06d      	b.n	8009ecc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2201      	movs	r2, #1
 8009df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2202      	movs	r2, #2
 8009dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a30      	ldr	r2, [pc, #192]	@ (8009ed8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d004      	beq.n	8009e24 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a2f      	ldr	r2, [pc, #188]	@ (8009edc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d108      	bne.n	8009e36 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009e2a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	68fa      	ldr	r2, [r7, #12]
 8009e32:	4313      	orrs	r3, r2
 8009e34:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e3c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	68fa      	ldr	r2, [r7, #12]
 8009e44:	4313      	orrs	r3, r2
 8009e46:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a20      	ldr	r2, [pc, #128]	@ (8009ed8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d022      	beq.n	8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e62:	d01d      	beq.n	8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a1d      	ldr	r2, [pc, #116]	@ (8009ee0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d018      	beq.n	8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a1c      	ldr	r2, [pc, #112]	@ (8009ee4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d013      	beq.n	8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a1a      	ldr	r2, [pc, #104]	@ (8009ee8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d00e      	beq.n	8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a15      	ldr	r2, [pc, #84]	@ (8009edc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d009      	beq.n	8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a16      	ldr	r2, [pc, #88]	@ (8009eec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d004      	beq.n	8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a15      	ldr	r2, [pc, #84]	@ (8009ef0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d10c      	bne.n	8009eba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ea6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	68ba      	ldr	r2, [r7, #8]
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	68ba      	ldr	r2, [r7, #8]
 8009eb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009eca:	2300      	movs	r3, #0
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3714      	adds	r7, #20
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr
 8009ed8:	40010000 	.word	0x40010000
 8009edc:	40010400 	.word	0x40010400
 8009ee0:	40000400 	.word	0x40000400
 8009ee4:	40000800 	.word	0x40000800
 8009ee8:	40000c00 	.word	0x40000c00
 8009eec:	40014000 	.word	0x40014000
 8009ef0:	40001800 	.word	0x40001800

08009ef4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b085      	sub	sp, #20
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009efe:	2300      	movs	r3, #0
 8009f00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d101      	bne.n	8009f10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009f0c:	2302      	movs	r3, #2
 8009f0e:	e065      	b.n	8009fdc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2201      	movs	r2, #1
 8009f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	68db      	ldr	r3, [r3, #12]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	4313      	orrs	r3, r2
 8009f32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	691b      	ldr	r3, [r3, #16]
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	695b      	ldr	r3, [r3, #20]
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f76:	4313      	orrs	r3, r2
 8009f78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	699b      	ldr	r3, [r3, #24]
 8009f84:	041b      	lsls	r3, r3, #16
 8009f86:	4313      	orrs	r3, r2
 8009f88:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a16      	ldr	r2, [pc, #88]	@ (8009fe8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d004      	beq.n	8009f9e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a14      	ldr	r2, [pc, #80]	@ (8009fec <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d115      	bne.n	8009fca <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fa8:	051b      	lsls	r3, r3, #20
 8009faa:	4313      	orrs	r3, r2
 8009fac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	69db      	ldr	r3, [r3, #28]
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	6a1b      	ldr	r3, [r3, #32]
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3714      	adds	r7, #20
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr
 8009fe8:	40010000 	.word	0x40010000
 8009fec:	40010400 	.word	0x40010400

08009ff0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b087      	sub	sp, #28
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	f003 031f 	and.w	r3, r3, #31
 800a002:	2204      	movs	r2, #4
 800a004:	fa02 f303 	lsl.w	r3, r2, r3
 800a008:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	6a1a      	ldr	r2, [r3, #32]
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	43db      	mvns	r3, r3
 800a012:	401a      	ands	r2, r3
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6a1a      	ldr	r2, [r3, #32]
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	f003 031f 	and.w	r3, r3, #31
 800a022:	6879      	ldr	r1, [r7, #4]
 800a024:	fa01 f303 	lsl.w	r3, r1, r3
 800a028:	431a      	orrs	r2, r3
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	621a      	str	r2, [r3, #32]
}
 800a02e:	bf00      	nop
 800a030:	371c      	adds	r7, #28
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr

0800a03a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b082      	sub	sp, #8
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d101      	bne.n	800a04c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a048:	2301      	movs	r3, #1
 800a04a:	e040      	b.n	800a0ce <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a050:	2b00      	cmp	r3, #0
 800a052:	d106      	bne.n	800a062 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f7fa f821 	bl	80040a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2224      	movs	r2, #36	@ 0x24
 800a066:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	681a      	ldr	r2, [r3, #0]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f022 0201 	bic.w	r2, r2, #1
 800a076:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 f82d 	bl	800a0d8 <UART_SetConfig>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b01      	cmp	r3, #1
 800a082:	d101      	bne.n	800a088 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a084:	2301      	movs	r3, #1
 800a086:	e022      	b.n	800a0ce <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d002      	beq.n	800a096 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 fa85 	bl	800a5a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	685a      	ldr	r2, [r3, #4]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a0a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	689a      	ldr	r2, [r3, #8]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a0b4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f042 0201 	orr.w	r2, r2, #1
 800a0c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f000 fb0c 	bl	800a6e4 <UART_CheckIdleState>
 800a0cc:	4603      	mov	r3, r0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3708      	adds	r7, #8
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
	...

0800a0d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b088      	sub	sp, #32
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	689a      	ldr	r2, [r3, #8]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	691b      	ldr	r3, [r3, #16]
 800a0ec:	431a      	orrs	r2, r3
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	695b      	ldr	r3, [r3, #20]
 800a0f2:	431a      	orrs	r2, r3
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	69db      	ldr	r3, [r3, #28]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	4ba6      	ldr	r3, [pc, #664]	@ (800a39c <UART_SetConfig+0x2c4>)
 800a104:	4013      	ands	r3, r2
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	6812      	ldr	r2, [r2, #0]
 800a10a:	6979      	ldr	r1, [r7, #20]
 800a10c:	430b      	orrs	r3, r1
 800a10e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	68da      	ldr	r2, [r3, #12]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	430a      	orrs	r2, r1
 800a124:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	699b      	ldr	r3, [r3, #24]
 800a12a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6a1b      	ldr	r3, [r3, #32]
 800a130:	697a      	ldr	r2, [r7, #20]
 800a132:	4313      	orrs	r3, r2
 800a134:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	697a      	ldr	r2, [r7, #20]
 800a146:	430a      	orrs	r2, r1
 800a148:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a94      	ldr	r2, [pc, #592]	@ (800a3a0 <UART_SetConfig+0x2c8>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d120      	bne.n	800a196 <UART_SetConfig+0xbe>
 800a154:	4b93      	ldr	r3, [pc, #588]	@ (800a3a4 <UART_SetConfig+0x2cc>)
 800a156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a15a:	f003 0303 	and.w	r3, r3, #3
 800a15e:	2b03      	cmp	r3, #3
 800a160:	d816      	bhi.n	800a190 <UART_SetConfig+0xb8>
 800a162:	a201      	add	r2, pc, #4	@ (adr r2, 800a168 <UART_SetConfig+0x90>)
 800a164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a168:	0800a179 	.word	0x0800a179
 800a16c:	0800a185 	.word	0x0800a185
 800a170:	0800a17f 	.word	0x0800a17f
 800a174:	0800a18b 	.word	0x0800a18b
 800a178:	2301      	movs	r3, #1
 800a17a:	77fb      	strb	r3, [r7, #31]
 800a17c:	e150      	b.n	800a420 <UART_SetConfig+0x348>
 800a17e:	2302      	movs	r3, #2
 800a180:	77fb      	strb	r3, [r7, #31]
 800a182:	e14d      	b.n	800a420 <UART_SetConfig+0x348>
 800a184:	2304      	movs	r3, #4
 800a186:	77fb      	strb	r3, [r7, #31]
 800a188:	e14a      	b.n	800a420 <UART_SetConfig+0x348>
 800a18a:	2308      	movs	r3, #8
 800a18c:	77fb      	strb	r3, [r7, #31]
 800a18e:	e147      	b.n	800a420 <UART_SetConfig+0x348>
 800a190:	2310      	movs	r3, #16
 800a192:	77fb      	strb	r3, [r7, #31]
 800a194:	e144      	b.n	800a420 <UART_SetConfig+0x348>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a83      	ldr	r2, [pc, #524]	@ (800a3a8 <UART_SetConfig+0x2d0>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d132      	bne.n	800a206 <UART_SetConfig+0x12e>
 800a1a0:	4b80      	ldr	r3, [pc, #512]	@ (800a3a4 <UART_SetConfig+0x2cc>)
 800a1a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1a6:	f003 030c 	and.w	r3, r3, #12
 800a1aa:	2b0c      	cmp	r3, #12
 800a1ac:	d828      	bhi.n	800a200 <UART_SetConfig+0x128>
 800a1ae:	a201      	add	r2, pc, #4	@ (adr r2, 800a1b4 <UART_SetConfig+0xdc>)
 800a1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1b4:	0800a1e9 	.word	0x0800a1e9
 800a1b8:	0800a201 	.word	0x0800a201
 800a1bc:	0800a201 	.word	0x0800a201
 800a1c0:	0800a201 	.word	0x0800a201
 800a1c4:	0800a1f5 	.word	0x0800a1f5
 800a1c8:	0800a201 	.word	0x0800a201
 800a1cc:	0800a201 	.word	0x0800a201
 800a1d0:	0800a201 	.word	0x0800a201
 800a1d4:	0800a1ef 	.word	0x0800a1ef
 800a1d8:	0800a201 	.word	0x0800a201
 800a1dc:	0800a201 	.word	0x0800a201
 800a1e0:	0800a201 	.word	0x0800a201
 800a1e4:	0800a1fb 	.word	0x0800a1fb
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	77fb      	strb	r3, [r7, #31]
 800a1ec:	e118      	b.n	800a420 <UART_SetConfig+0x348>
 800a1ee:	2302      	movs	r3, #2
 800a1f0:	77fb      	strb	r3, [r7, #31]
 800a1f2:	e115      	b.n	800a420 <UART_SetConfig+0x348>
 800a1f4:	2304      	movs	r3, #4
 800a1f6:	77fb      	strb	r3, [r7, #31]
 800a1f8:	e112      	b.n	800a420 <UART_SetConfig+0x348>
 800a1fa:	2308      	movs	r3, #8
 800a1fc:	77fb      	strb	r3, [r7, #31]
 800a1fe:	e10f      	b.n	800a420 <UART_SetConfig+0x348>
 800a200:	2310      	movs	r3, #16
 800a202:	77fb      	strb	r3, [r7, #31]
 800a204:	e10c      	b.n	800a420 <UART_SetConfig+0x348>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a68      	ldr	r2, [pc, #416]	@ (800a3ac <UART_SetConfig+0x2d4>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d120      	bne.n	800a252 <UART_SetConfig+0x17a>
 800a210:	4b64      	ldr	r3, [pc, #400]	@ (800a3a4 <UART_SetConfig+0x2cc>)
 800a212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a216:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a21a:	2b30      	cmp	r3, #48	@ 0x30
 800a21c:	d013      	beq.n	800a246 <UART_SetConfig+0x16e>
 800a21e:	2b30      	cmp	r3, #48	@ 0x30
 800a220:	d814      	bhi.n	800a24c <UART_SetConfig+0x174>
 800a222:	2b20      	cmp	r3, #32
 800a224:	d009      	beq.n	800a23a <UART_SetConfig+0x162>
 800a226:	2b20      	cmp	r3, #32
 800a228:	d810      	bhi.n	800a24c <UART_SetConfig+0x174>
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d002      	beq.n	800a234 <UART_SetConfig+0x15c>
 800a22e:	2b10      	cmp	r3, #16
 800a230:	d006      	beq.n	800a240 <UART_SetConfig+0x168>
 800a232:	e00b      	b.n	800a24c <UART_SetConfig+0x174>
 800a234:	2300      	movs	r3, #0
 800a236:	77fb      	strb	r3, [r7, #31]
 800a238:	e0f2      	b.n	800a420 <UART_SetConfig+0x348>
 800a23a:	2302      	movs	r3, #2
 800a23c:	77fb      	strb	r3, [r7, #31]
 800a23e:	e0ef      	b.n	800a420 <UART_SetConfig+0x348>
 800a240:	2304      	movs	r3, #4
 800a242:	77fb      	strb	r3, [r7, #31]
 800a244:	e0ec      	b.n	800a420 <UART_SetConfig+0x348>
 800a246:	2308      	movs	r3, #8
 800a248:	77fb      	strb	r3, [r7, #31]
 800a24a:	e0e9      	b.n	800a420 <UART_SetConfig+0x348>
 800a24c:	2310      	movs	r3, #16
 800a24e:	77fb      	strb	r3, [r7, #31]
 800a250:	e0e6      	b.n	800a420 <UART_SetConfig+0x348>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4a56      	ldr	r2, [pc, #344]	@ (800a3b0 <UART_SetConfig+0x2d8>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d120      	bne.n	800a29e <UART_SetConfig+0x1c6>
 800a25c:	4b51      	ldr	r3, [pc, #324]	@ (800a3a4 <UART_SetConfig+0x2cc>)
 800a25e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a262:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a266:	2bc0      	cmp	r3, #192	@ 0xc0
 800a268:	d013      	beq.n	800a292 <UART_SetConfig+0x1ba>
 800a26a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a26c:	d814      	bhi.n	800a298 <UART_SetConfig+0x1c0>
 800a26e:	2b80      	cmp	r3, #128	@ 0x80
 800a270:	d009      	beq.n	800a286 <UART_SetConfig+0x1ae>
 800a272:	2b80      	cmp	r3, #128	@ 0x80
 800a274:	d810      	bhi.n	800a298 <UART_SetConfig+0x1c0>
 800a276:	2b00      	cmp	r3, #0
 800a278:	d002      	beq.n	800a280 <UART_SetConfig+0x1a8>
 800a27a:	2b40      	cmp	r3, #64	@ 0x40
 800a27c:	d006      	beq.n	800a28c <UART_SetConfig+0x1b4>
 800a27e:	e00b      	b.n	800a298 <UART_SetConfig+0x1c0>
 800a280:	2300      	movs	r3, #0
 800a282:	77fb      	strb	r3, [r7, #31]
 800a284:	e0cc      	b.n	800a420 <UART_SetConfig+0x348>
 800a286:	2302      	movs	r3, #2
 800a288:	77fb      	strb	r3, [r7, #31]
 800a28a:	e0c9      	b.n	800a420 <UART_SetConfig+0x348>
 800a28c:	2304      	movs	r3, #4
 800a28e:	77fb      	strb	r3, [r7, #31]
 800a290:	e0c6      	b.n	800a420 <UART_SetConfig+0x348>
 800a292:	2308      	movs	r3, #8
 800a294:	77fb      	strb	r3, [r7, #31]
 800a296:	e0c3      	b.n	800a420 <UART_SetConfig+0x348>
 800a298:	2310      	movs	r3, #16
 800a29a:	77fb      	strb	r3, [r7, #31]
 800a29c:	e0c0      	b.n	800a420 <UART_SetConfig+0x348>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4a44      	ldr	r2, [pc, #272]	@ (800a3b4 <UART_SetConfig+0x2dc>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d125      	bne.n	800a2f4 <UART_SetConfig+0x21c>
 800a2a8:	4b3e      	ldr	r3, [pc, #248]	@ (800a3a4 <UART_SetConfig+0x2cc>)
 800a2aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a2b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a2b6:	d017      	beq.n	800a2e8 <UART_SetConfig+0x210>
 800a2b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a2bc:	d817      	bhi.n	800a2ee <UART_SetConfig+0x216>
 800a2be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2c2:	d00b      	beq.n	800a2dc <UART_SetConfig+0x204>
 800a2c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2c8:	d811      	bhi.n	800a2ee <UART_SetConfig+0x216>
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d003      	beq.n	800a2d6 <UART_SetConfig+0x1fe>
 800a2ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2d2:	d006      	beq.n	800a2e2 <UART_SetConfig+0x20a>
 800a2d4:	e00b      	b.n	800a2ee <UART_SetConfig+0x216>
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	77fb      	strb	r3, [r7, #31]
 800a2da:	e0a1      	b.n	800a420 <UART_SetConfig+0x348>
 800a2dc:	2302      	movs	r3, #2
 800a2de:	77fb      	strb	r3, [r7, #31]
 800a2e0:	e09e      	b.n	800a420 <UART_SetConfig+0x348>
 800a2e2:	2304      	movs	r3, #4
 800a2e4:	77fb      	strb	r3, [r7, #31]
 800a2e6:	e09b      	b.n	800a420 <UART_SetConfig+0x348>
 800a2e8:	2308      	movs	r3, #8
 800a2ea:	77fb      	strb	r3, [r7, #31]
 800a2ec:	e098      	b.n	800a420 <UART_SetConfig+0x348>
 800a2ee:	2310      	movs	r3, #16
 800a2f0:	77fb      	strb	r3, [r7, #31]
 800a2f2:	e095      	b.n	800a420 <UART_SetConfig+0x348>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a2f      	ldr	r2, [pc, #188]	@ (800a3b8 <UART_SetConfig+0x2e0>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d125      	bne.n	800a34a <UART_SetConfig+0x272>
 800a2fe:	4b29      	ldr	r3, [pc, #164]	@ (800a3a4 <UART_SetConfig+0x2cc>)
 800a300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a304:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a308:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a30c:	d017      	beq.n	800a33e <UART_SetConfig+0x266>
 800a30e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a312:	d817      	bhi.n	800a344 <UART_SetConfig+0x26c>
 800a314:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a318:	d00b      	beq.n	800a332 <UART_SetConfig+0x25a>
 800a31a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a31e:	d811      	bhi.n	800a344 <UART_SetConfig+0x26c>
 800a320:	2b00      	cmp	r3, #0
 800a322:	d003      	beq.n	800a32c <UART_SetConfig+0x254>
 800a324:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a328:	d006      	beq.n	800a338 <UART_SetConfig+0x260>
 800a32a:	e00b      	b.n	800a344 <UART_SetConfig+0x26c>
 800a32c:	2301      	movs	r3, #1
 800a32e:	77fb      	strb	r3, [r7, #31]
 800a330:	e076      	b.n	800a420 <UART_SetConfig+0x348>
 800a332:	2302      	movs	r3, #2
 800a334:	77fb      	strb	r3, [r7, #31]
 800a336:	e073      	b.n	800a420 <UART_SetConfig+0x348>
 800a338:	2304      	movs	r3, #4
 800a33a:	77fb      	strb	r3, [r7, #31]
 800a33c:	e070      	b.n	800a420 <UART_SetConfig+0x348>
 800a33e:	2308      	movs	r3, #8
 800a340:	77fb      	strb	r3, [r7, #31]
 800a342:	e06d      	b.n	800a420 <UART_SetConfig+0x348>
 800a344:	2310      	movs	r3, #16
 800a346:	77fb      	strb	r3, [r7, #31]
 800a348:	e06a      	b.n	800a420 <UART_SetConfig+0x348>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a1b      	ldr	r2, [pc, #108]	@ (800a3bc <UART_SetConfig+0x2e4>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d138      	bne.n	800a3c6 <UART_SetConfig+0x2ee>
 800a354:	4b13      	ldr	r3, [pc, #76]	@ (800a3a4 <UART_SetConfig+0x2cc>)
 800a356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a35a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a35e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a362:	d017      	beq.n	800a394 <UART_SetConfig+0x2bc>
 800a364:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a368:	d82a      	bhi.n	800a3c0 <UART_SetConfig+0x2e8>
 800a36a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a36e:	d00b      	beq.n	800a388 <UART_SetConfig+0x2b0>
 800a370:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a374:	d824      	bhi.n	800a3c0 <UART_SetConfig+0x2e8>
 800a376:	2b00      	cmp	r3, #0
 800a378:	d003      	beq.n	800a382 <UART_SetConfig+0x2aa>
 800a37a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a37e:	d006      	beq.n	800a38e <UART_SetConfig+0x2b6>
 800a380:	e01e      	b.n	800a3c0 <UART_SetConfig+0x2e8>
 800a382:	2300      	movs	r3, #0
 800a384:	77fb      	strb	r3, [r7, #31]
 800a386:	e04b      	b.n	800a420 <UART_SetConfig+0x348>
 800a388:	2302      	movs	r3, #2
 800a38a:	77fb      	strb	r3, [r7, #31]
 800a38c:	e048      	b.n	800a420 <UART_SetConfig+0x348>
 800a38e:	2304      	movs	r3, #4
 800a390:	77fb      	strb	r3, [r7, #31]
 800a392:	e045      	b.n	800a420 <UART_SetConfig+0x348>
 800a394:	2308      	movs	r3, #8
 800a396:	77fb      	strb	r3, [r7, #31]
 800a398:	e042      	b.n	800a420 <UART_SetConfig+0x348>
 800a39a:	bf00      	nop
 800a39c:	efff69f3 	.word	0xefff69f3
 800a3a0:	40011000 	.word	0x40011000
 800a3a4:	40023800 	.word	0x40023800
 800a3a8:	40004400 	.word	0x40004400
 800a3ac:	40004800 	.word	0x40004800
 800a3b0:	40004c00 	.word	0x40004c00
 800a3b4:	40005000 	.word	0x40005000
 800a3b8:	40011400 	.word	0x40011400
 800a3bc:	40007800 	.word	0x40007800
 800a3c0:	2310      	movs	r3, #16
 800a3c2:	77fb      	strb	r3, [r7, #31]
 800a3c4:	e02c      	b.n	800a420 <UART_SetConfig+0x348>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a72      	ldr	r2, [pc, #456]	@ (800a594 <UART_SetConfig+0x4bc>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d125      	bne.n	800a41c <UART_SetConfig+0x344>
 800a3d0:	4b71      	ldr	r3, [pc, #452]	@ (800a598 <UART_SetConfig+0x4c0>)
 800a3d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3d6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a3da:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a3de:	d017      	beq.n	800a410 <UART_SetConfig+0x338>
 800a3e0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a3e4:	d817      	bhi.n	800a416 <UART_SetConfig+0x33e>
 800a3e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a3ea:	d00b      	beq.n	800a404 <UART_SetConfig+0x32c>
 800a3ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a3f0:	d811      	bhi.n	800a416 <UART_SetConfig+0x33e>
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d003      	beq.n	800a3fe <UART_SetConfig+0x326>
 800a3f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a3fa:	d006      	beq.n	800a40a <UART_SetConfig+0x332>
 800a3fc:	e00b      	b.n	800a416 <UART_SetConfig+0x33e>
 800a3fe:	2300      	movs	r3, #0
 800a400:	77fb      	strb	r3, [r7, #31]
 800a402:	e00d      	b.n	800a420 <UART_SetConfig+0x348>
 800a404:	2302      	movs	r3, #2
 800a406:	77fb      	strb	r3, [r7, #31]
 800a408:	e00a      	b.n	800a420 <UART_SetConfig+0x348>
 800a40a:	2304      	movs	r3, #4
 800a40c:	77fb      	strb	r3, [r7, #31]
 800a40e:	e007      	b.n	800a420 <UART_SetConfig+0x348>
 800a410:	2308      	movs	r3, #8
 800a412:	77fb      	strb	r3, [r7, #31]
 800a414:	e004      	b.n	800a420 <UART_SetConfig+0x348>
 800a416:	2310      	movs	r3, #16
 800a418:	77fb      	strb	r3, [r7, #31]
 800a41a:	e001      	b.n	800a420 <UART_SetConfig+0x348>
 800a41c:	2310      	movs	r3, #16
 800a41e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	69db      	ldr	r3, [r3, #28]
 800a424:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a428:	d15b      	bne.n	800a4e2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a42a:	7ffb      	ldrb	r3, [r7, #31]
 800a42c:	2b08      	cmp	r3, #8
 800a42e:	d828      	bhi.n	800a482 <UART_SetConfig+0x3aa>
 800a430:	a201      	add	r2, pc, #4	@ (adr r2, 800a438 <UART_SetConfig+0x360>)
 800a432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a436:	bf00      	nop
 800a438:	0800a45d 	.word	0x0800a45d
 800a43c:	0800a465 	.word	0x0800a465
 800a440:	0800a46d 	.word	0x0800a46d
 800a444:	0800a483 	.word	0x0800a483
 800a448:	0800a473 	.word	0x0800a473
 800a44c:	0800a483 	.word	0x0800a483
 800a450:	0800a483 	.word	0x0800a483
 800a454:	0800a483 	.word	0x0800a483
 800a458:	0800a47b 	.word	0x0800a47b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a45c:	f7fd fb82 	bl	8007b64 <HAL_RCC_GetPCLK1Freq>
 800a460:	61b8      	str	r0, [r7, #24]
        break;
 800a462:	e013      	b.n	800a48c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a464:	f7fd fb92 	bl	8007b8c <HAL_RCC_GetPCLK2Freq>
 800a468:	61b8      	str	r0, [r7, #24]
        break;
 800a46a:	e00f      	b.n	800a48c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a46c:	4b4b      	ldr	r3, [pc, #300]	@ (800a59c <UART_SetConfig+0x4c4>)
 800a46e:	61bb      	str	r3, [r7, #24]
        break;
 800a470:	e00c      	b.n	800a48c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a472:	f7fd fa65 	bl	8007940 <HAL_RCC_GetSysClockFreq>
 800a476:	61b8      	str	r0, [r7, #24]
        break;
 800a478:	e008      	b.n	800a48c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a47a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a47e:	61bb      	str	r3, [r7, #24]
        break;
 800a480:	e004      	b.n	800a48c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a482:	2300      	movs	r3, #0
 800a484:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	77bb      	strb	r3, [r7, #30]
        break;
 800a48a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a48c:	69bb      	ldr	r3, [r7, #24]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d074      	beq.n	800a57c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a492:	69bb      	ldr	r3, [r7, #24]
 800a494:	005a      	lsls	r2, r3, #1
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	085b      	lsrs	r3, r3, #1
 800a49c:	441a      	add	r2, r3
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	2b0f      	cmp	r3, #15
 800a4ac:	d916      	bls.n	800a4dc <UART_SetConfig+0x404>
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4b4:	d212      	bcs.n	800a4dc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	f023 030f 	bic.w	r3, r3, #15
 800a4be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	085b      	lsrs	r3, r3, #1
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	f003 0307 	and.w	r3, r3, #7
 800a4ca:	b29a      	uxth	r2, r3
 800a4cc:	89fb      	ldrh	r3, [r7, #14]
 800a4ce:	4313      	orrs	r3, r2
 800a4d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	89fa      	ldrh	r2, [r7, #14]
 800a4d8:	60da      	str	r2, [r3, #12]
 800a4da:	e04f      	b.n	800a57c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	77bb      	strb	r3, [r7, #30]
 800a4e0:	e04c      	b.n	800a57c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a4e2:	7ffb      	ldrb	r3, [r7, #31]
 800a4e4:	2b08      	cmp	r3, #8
 800a4e6:	d828      	bhi.n	800a53a <UART_SetConfig+0x462>
 800a4e8:	a201      	add	r2, pc, #4	@ (adr r2, 800a4f0 <UART_SetConfig+0x418>)
 800a4ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ee:	bf00      	nop
 800a4f0:	0800a515 	.word	0x0800a515
 800a4f4:	0800a51d 	.word	0x0800a51d
 800a4f8:	0800a525 	.word	0x0800a525
 800a4fc:	0800a53b 	.word	0x0800a53b
 800a500:	0800a52b 	.word	0x0800a52b
 800a504:	0800a53b 	.word	0x0800a53b
 800a508:	0800a53b 	.word	0x0800a53b
 800a50c:	0800a53b 	.word	0x0800a53b
 800a510:	0800a533 	.word	0x0800a533
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a514:	f7fd fb26 	bl	8007b64 <HAL_RCC_GetPCLK1Freq>
 800a518:	61b8      	str	r0, [r7, #24]
        break;
 800a51a:	e013      	b.n	800a544 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a51c:	f7fd fb36 	bl	8007b8c <HAL_RCC_GetPCLK2Freq>
 800a520:	61b8      	str	r0, [r7, #24]
        break;
 800a522:	e00f      	b.n	800a544 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a524:	4b1d      	ldr	r3, [pc, #116]	@ (800a59c <UART_SetConfig+0x4c4>)
 800a526:	61bb      	str	r3, [r7, #24]
        break;
 800a528:	e00c      	b.n	800a544 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a52a:	f7fd fa09 	bl	8007940 <HAL_RCC_GetSysClockFreq>
 800a52e:	61b8      	str	r0, [r7, #24]
        break;
 800a530:	e008      	b.n	800a544 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a532:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a536:	61bb      	str	r3, [r7, #24]
        break;
 800a538:	e004      	b.n	800a544 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a53a:	2300      	movs	r3, #0
 800a53c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a53e:	2301      	movs	r3, #1
 800a540:	77bb      	strb	r3, [r7, #30]
        break;
 800a542:	bf00      	nop
    }

    if (pclk != 0U)
 800a544:	69bb      	ldr	r3, [r7, #24]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d018      	beq.n	800a57c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	085a      	lsrs	r2, r3, #1
 800a550:	69bb      	ldr	r3, [r7, #24]
 800a552:	441a      	add	r2, r3
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	fbb2 f3f3 	udiv	r3, r2, r3
 800a55c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	2b0f      	cmp	r3, #15
 800a562:	d909      	bls.n	800a578 <UART_SetConfig+0x4a0>
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a56a:	d205      	bcs.n	800a578 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	b29a      	uxth	r2, r3
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	60da      	str	r2, [r3, #12]
 800a576:	e001      	b.n	800a57c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a578:	2301      	movs	r3, #1
 800a57a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2200      	movs	r2, #0
 800a586:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a588:	7fbb      	ldrb	r3, [r7, #30]
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3720      	adds	r7, #32
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	40007c00 	.word	0x40007c00
 800a598:	40023800 	.word	0x40023800
 800a59c:	00f42400 	.word	0x00f42400

0800a5a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b083      	sub	sp, #12
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5ac:	f003 0301 	and.w	r3, r3, #1
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d00a      	beq.n	800a5ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	430a      	orrs	r2, r1
 800a5c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5ce:	f003 0302 	and.w	r3, r3, #2
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d00a      	beq.n	800a5ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	430a      	orrs	r2, r1
 800a5ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5f0:	f003 0304 	and.w	r3, r3, #4
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d00a      	beq.n	800a60e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	430a      	orrs	r2, r1
 800a60c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a612:	f003 0308 	and.w	r3, r3, #8
 800a616:	2b00      	cmp	r3, #0
 800a618:	d00a      	beq.n	800a630 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	430a      	orrs	r2, r1
 800a62e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a634:	f003 0310 	and.w	r3, r3, #16
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d00a      	beq.n	800a652 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	689b      	ldr	r3, [r3, #8]
 800a642:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	430a      	orrs	r2, r1
 800a650:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a656:	f003 0320 	and.w	r3, r3, #32
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d00a      	beq.n	800a674 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	430a      	orrs	r2, r1
 800a672:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d01a      	beq.n	800a6b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	430a      	orrs	r2, r1
 800a694:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a69a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a69e:	d10a      	bne.n	800a6b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	685b      	ldr	r3, [r3, #4]
 800a6a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	430a      	orrs	r2, r1
 800a6b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d00a      	beq.n	800a6d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	430a      	orrs	r2, r1
 800a6d6:	605a      	str	r2, [r3, #4]
  }
}
 800a6d8:	bf00      	nop
 800a6da:	370c      	adds	r7, #12
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b086      	sub	sp, #24
 800a6e8:	af02      	add	r7, sp, #8
 800a6ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a6f4:	f7f9 fe3c 	bl	8004370 <HAL_GetTick>
 800a6f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f003 0308 	and.w	r3, r3, #8
 800a704:	2b08      	cmp	r3, #8
 800a706:	d10e      	bne.n	800a726 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a708:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a70c:	9300      	str	r3, [sp, #0]
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2200      	movs	r2, #0
 800a712:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 f81b 	bl	800a752 <UART_WaitOnFlagUntilTimeout>
 800a71c:	4603      	mov	r3, r0
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d001      	beq.n	800a726 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a722:	2303      	movs	r3, #3
 800a724:	e011      	b.n	800a74a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2220      	movs	r2, #32
 800a72a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2220      	movs	r2, #32
 800a730:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2200      	movs	r2, #0
 800a738:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2200      	movs	r2, #0
 800a73e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2200      	movs	r2, #0
 800a744:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a748:	2300      	movs	r3, #0
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a752:	b580      	push	{r7, lr}
 800a754:	b09c      	sub	sp, #112	@ 0x70
 800a756:	af00      	add	r7, sp, #0
 800a758:	60f8      	str	r0, [r7, #12]
 800a75a:	60b9      	str	r1, [r7, #8]
 800a75c:	603b      	str	r3, [r7, #0]
 800a75e:	4613      	mov	r3, r2
 800a760:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a762:	e0a7      	b.n	800a8b4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a764:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a766:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a76a:	f000 80a3 	beq.w	800a8b4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a76e:	f7f9 fdff 	bl	8004370 <HAL_GetTick>
 800a772:	4602      	mov	r2, r0
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	1ad3      	subs	r3, r2, r3
 800a778:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d302      	bcc.n	800a784 <UART_WaitOnFlagUntilTimeout+0x32>
 800a77e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a780:	2b00      	cmp	r3, #0
 800a782:	d13f      	bne.n	800a804 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a78a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a78c:	e853 3f00 	ldrex	r3, [r3]
 800a790:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a792:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a794:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a798:	667b      	str	r3, [r7, #100]	@ 0x64
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	461a      	mov	r2, r3
 800a7a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a7a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a7a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a7a8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a7aa:	e841 2300 	strex	r3, r2, [r1]
 800a7ae:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a7b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d1e6      	bne.n	800a784 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	3308      	adds	r3, #8
 800a7bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7c0:	e853 3f00 	ldrex	r3, [r3]
 800a7c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a7c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c8:	f023 0301 	bic.w	r3, r3, #1
 800a7cc:	663b      	str	r3, [r7, #96]	@ 0x60
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	3308      	adds	r3, #8
 800a7d4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a7d6:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a7d8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a7dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a7de:	e841 2300 	strex	r3, r2, [r1]
 800a7e2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a7e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d1e5      	bne.n	800a7b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2220      	movs	r2, #32
 800a7ee:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2220      	movs	r2, #32
 800a7f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800a800:	2303      	movs	r3, #3
 800a802:	e068      	b.n	800a8d6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f003 0304 	and.w	r3, r3, #4
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d050      	beq.n	800a8b4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	69db      	ldr	r3, [r3, #28]
 800a818:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a81c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a820:	d148      	bne.n	800a8b4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a82a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a834:	e853 3f00 	ldrex	r3, [r3]
 800a838:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a83c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a840:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	461a      	mov	r2, r3
 800a848:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a84a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a84c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a84e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a850:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a852:	e841 2300 	strex	r3, r2, [r1]
 800a856:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d1e6      	bne.n	800a82c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	3308      	adds	r3, #8
 800a864:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	e853 3f00 	ldrex	r3, [r3]
 800a86c:	613b      	str	r3, [r7, #16]
   return(result);
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	f023 0301 	bic.w	r3, r3, #1
 800a874:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	3308      	adds	r3, #8
 800a87c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a87e:	623a      	str	r2, [r7, #32]
 800a880:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a882:	69f9      	ldr	r1, [r7, #28]
 800a884:	6a3a      	ldr	r2, [r7, #32]
 800a886:	e841 2300 	strex	r3, r2, [r1]
 800a88a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a88c:	69bb      	ldr	r3, [r7, #24]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d1e5      	bne.n	800a85e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2220      	movs	r2, #32
 800a896:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2220      	movs	r2, #32
 800a89c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2220      	movs	r2, #32
 800a8a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a8b0:	2303      	movs	r3, #3
 800a8b2:	e010      	b.n	800a8d6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	69da      	ldr	r2, [r3, #28]
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	4013      	ands	r3, r2
 800a8be:	68ba      	ldr	r2, [r7, #8]
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	bf0c      	ite	eq
 800a8c4:	2301      	moveq	r3, #1
 800a8c6:	2300      	movne	r3, #0
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	79fb      	ldrb	r3, [r7, #7]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	f43f af48 	beq.w	800a764 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3770      	adds	r7, #112	@ 0x70
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b082      	sub	sp, #8
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d101      	bne.n	800a8f0 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e03c      	b.n	800a96a <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d106      	bne.n	800a90a <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f7f9 fb6f 	bl	8003fe8 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2202      	movs	r2, #2
 800a90e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f022 0201 	bic.w	r2, r2, #1
 800a920:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 f85c 	bl	800a9e0 <USART_SetConfig>
 800a928:	4603      	mov	r3, r0
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	d101      	bne.n	800a932 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800a92e:	2301      	movs	r3, #1
 800a930:	e01b      	b.n	800a96a <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	685a      	ldr	r2, [r3, #4]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a940:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	689a      	ldr	r2, [r3, #8]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a950:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f042 0201 	orr.w	r2, r2, #1
 800a960:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 f9be 	bl	800ace4 <USART_CheckIdleState>
 800a968:	4603      	mov	r3, r0
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3708      	adds	r7, #8
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}

0800a972 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800a972:	b580      	push	{r7, lr}
 800a974:	b084      	sub	sp, #16
 800a976:	af00      	add	r7, sp, #0
 800a978:	60f8      	str	r0, [r7, #12]
 800a97a:	60b9      	str	r1, [r7, #8]
 800a97c:	603b      	str	r3, [r7, #0]
 800a97e:	4613      	mov	r3, r2
 800a980:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800a982:	e018      	b.n	800a9b6 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a984:	69bb      	ldr	r3, [r7, #24]
 800a986:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a98a:	d014      	beq.n	800a9b6 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a98c:	f7f9 fcf0 	bl	8004370 <HAL_GetTick>
 800a990:	4602      	mov	r2, r0
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	1ad3      	subs	r3, r2, r3
 800a996:	69ba      	ldr	r2, [r7, #24]
 800a998:	429a      	cmp	r2, r3
 800a99a:	d302      	bcc.n	800a9a2 <USART_WaitOnFlagUntilTimeout+0x30>
 800a99c:	69bb      	ldr	r3, [r7, #24]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d109      	bne.n	800a9b6 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        return HAL_TIMEOUT;
 800a9b2:	2303      	movs	r3, #3
 800a9b4:	e00f      	b.n	800a9d6 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	69da      	ldr	r2, [r3, #28]
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	4013      	ands	r3, r2
 800a9c0:	68ba      	ldr	r2, [r7, #8]
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	bf0c      	ite	eq
 800a9c6:	2301      	moveq	r3, #1
 800a9c8:	2300      	movne	r3, #0
 800a9ca:	b2db      	uxtb	r3, r3
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	79fb      	ldrb	r3, [r7, #7]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d0d7      	beq.n	800a984 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a9d4:	2300      	movs	r3, #0
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3710      	adds	r7, #16
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}
	...

0800a9e0 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b088      	sub	sp, #32
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	689a      	ldr	r2, [r3, #8]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	691b      	ldr	r3, [r3, #16]
 800a9f8:	431a      	orrs	r2, r3
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	695b      	ldr	r3, [r3, #20]
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	4ba7      	ldr	r3, [pc, #668]	@ (800acac <USART_SetConfig+0x2cc>)
 800aa0e:	4013      	ands	r3, r2
 800aa10:	687a      	ldr	r2, [r7, #4]
 800aa12:	6812      	ldr	r2, [r2, #0]
 800aa14:	6979      	ldr	r1, [r7, #20]
 800aa16:	430b      	orrs	r3, r1
 800aa18:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL and STOP bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800aa1a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800aa1e:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6a1b      	ldr	r3, [r3, #32]
 800aa24:	697a      	ldr	r2, [r7, #20]
 800aa26:	4313      	orrs	r3, r2
 800aa28:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	699a      	ldr	r2, [r3, #24]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	69db      	ldr	r3, [r3, #28]
 800aa32:	4313      	orrs	r3, r2
 800aa34:	697a      	ldr	r2, [r7, #20]
 800aa36:	4313      	orrs	r3, r2
 800aa38:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	68db      	ldr	r3, [r3, #12]
 800aa3e:	697a      	ldr	r2, [r7, #20]
 800aa40:	4313      	orrs	r3, r2
 800aa42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	697a      	ldr	r2, [r7, #20]
 800aa54:	430a      	orrs	r2, r1
 800aa56:	605a      	str	r2, [r3, #4]


  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a94      	ldr	r2, [pc, #592]	@ (800acb0 <USART_SetConfig+0x2d0>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d121      	bne.n	800aaa6 <USART_SetConfig+0xc6>
 800aa62:	4b94      	ldr	r3, [pc, #592]	@ (800acb4 <USART_SetConfig+0x2d4>)
 800aa64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa68:	f003 0303 	and.w	r3, r3, #3
 800aa6c:	2b03      	cmp	r3, #3
 800aa6e:	d817      	bhi.n	800aaa0 <USART_SetConfig+0xc0>
 800aa70:	a201      	add	r2, pc, #4	@ (adr r2, 800aa78 <USART_SetConfig+0x98>)
 800aa72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa76:	bf00      	nop
 800aa78:	0800aa89 	.word	0x0800aa89
 800aa7c:	0800aa95 	.word	0x0800aa95
 800aa80:	0800aa8f 	.word	0x0800aa8f
 800aa84:	0800aa9b 	.word	0x0800aa9b
 800aa88:	2301      	movs	r3, #1
 800aa8a:	77fb      	strb	r3, [r7, #31]
 800aa8c:	e096      	b.n	800abbc <USART_SetConfig+0x1dc>
 800aa8e:	2302      	movs	r3, #2
 800aa90:	77fb      	strb	r3, [r7, #31]
 800aa92:	e093      	b.n	800abbc <USART_SetConfig+0x1dc>
 800aa94:	2304      	movs	r3, #4
 800aa96:	77fb      	strb	r3, [r7, #31]
 800aa98:	e090      	b.n	800abbc <USART_SetConfig+0x1dc>
 800aa9a:	2308      	movs	r3, #8
 800aa9c:	77fb      	strb	r3, [r7, #31]
 800aa9e:	e08d      	b.n	800abbc <USART_SetConfig+0x1dc>
 800aaa0:	2310      	movs	r3, #16
 800aaa2:	77fb      	strb	r3, [r7, #31]
 800aaa4:	e08a      	b.n	800abbc <USART_SetConfig+0x1dc>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a83      	ldr	r2, [pc, #524]	@ (800acb8 <USART_SetConfig+0x2d8>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d132      	bne.n	800ab16 <USART_SetConfig+0x136>
 800aab0:	4b80      	ldr	r3, [pc, #512]	@ (800acb4 <USART_SetConfig+0x2d4>)
 800aab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aab6:	f003 030c 	and.w	r3, r3, #12
 800aaba:	2b0c      	cmp	r3, #12
 800aabc:	d828      	bhi.n	800ab10 <USART_SetConfig+0x130>
 800aabe:	a201      	add	r2, pc, #4	@ (adr r2, 800aac4 <USART_SetConfig+0xe4>)
 800aac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac4:	0800aaf9 	.word	0x0800aaf9
 800aac8:	0800ab11 	.word	0x0800ab11
 800aacc:	0800ab11 	.word	0x0800ab11
 800aad0:	0800ab11 	.word	0x0800ab11
 800aad4:	0800ab05 	.word	0x0800ab05
 800aad8:	0800ab11 	.word	0x0800ab11
 800aadc:	0800ab11 	.word	0x0800ab11
 800aae0:	0800ab11 	.word	0x0800ab11
 800aae4:	0800aaff 	.word	0x0800aaff
 800aae8:	0800ab11 	.word	0x0800ab11
 800aaec:	0800ab11 	.word	0x0800ab11
 800aaf0:	0800ab11 	.word	0x0800ab11
 800aaf4:	0800ab0b 	.word	0x0800ab0b
 800aaf8:	2300      	movs	r3, #0
 800aafa:	77fb      	strb	r3, [r7, #31]
 800aafc:	e05e      	b.n	800abbc <USART_SetConfig+0x1dc>
 800aafe:	2302      	movs	r3, #2
 800ab00:	77fb      	strb	r3, [r7, #31]
 800ab02:	e05b      	b.n	800abbc <USART_SetConfig+0x1dc>
 800ab04:	2304      	movs	r3, #4
 800ab06:	77fb      	strb	r3, [r7, #31]
 800ab08:	e058      	b.n	800abbc <USART_SetConfig+0x1dc>
 800ab0a:	2308      	movs	r3, #8
 800ab0c:	77fb      	strb	r3, [r7, #31]
 800ab0e:	e055      	b.n	800abbc <USART_SetConfig+0x1dc>
 800ab10:	2310      	movs	r3, #16
 800ab12:	77fb      	strb	r3, [r7, #31]
 800ab14:	e052      	b.n	800abbc <USART_SetConfig+0x1dc>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4a68      	ldr	r2, [pc, #416]	@ (800acbc <USART_SetConfig+0x2dc>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d120      	bne.n	800ab62 <USART_SetConfig+0x182>
 800ab20:	4b64      	ldr	r3, [pc, #400]	@ (800acb4 <USART_SetConfig+0x2d4>)
 800ab22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab26:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ab2a:	2b30      	cmp	r3, #48	@ 0x30
 800ab2c:	d013      	beq.n	800ab56 <USART_SetConfig+0x176>
 800ab2e:	2b30      	cmp	r3, #48	@ 0x30
 800ab30:	d814      	bhi.n	800ab5c <USART_SetConfig+0x17c>
 800ab32:	2b20      	cmp	r3, #32
 800ab34:	d009      	beq.n	800ab4a <USART_SetConfig+0x16a>
 800ab36:	2b20      	cmp	r3, #32
 800ab38:	d810      	bhi.n	800ab5c <USART_SetConfig+0x17c>
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d002      	beq.n	800ab44 <USART_SetConfig+0x164>
 800ab3e:	2b10      	cmp	r3, #16
 800ab40:	d006      	beq.n	800ab50 <USART_SetConfig+0x170>
 800ab42:	e00b      	b.n	800ab5c <USART_SetConfig+0x17c>
 800ab44:	2300      	movs	r3, #0
 800ab46:	77fb      	strb	r3, [r7, #31]
 800ab48:	e038      	b.n	800abbc <USART_SetConfig+0x1dc>
 800ab4a:	2302      	movs	r3, #2
 800ab4c:	77fb      	strb	r3, [r7, #31]
 800ab4e:	e035      	b.n	800abbc <USART_SetConfig+0x1dc>
 800ab50:	2304      	movs	r3, #4
 800ab52:	77fb      	strb	r3, [r7, #31]
 800ab54:	e032      	b.n	800abbc <USART_SetConfig+0x1dc>
 800ab56:	2308      	movs	r3, #8
 800ab58:	77fb      	strb	r3, [r7, #31]
 800ab5a:	e02f      	b.n	800abbc <USART_SetConfig+0x1dc>
 800ab5c:	2310      	movs	r3, #16
 800ab5e:	77fb      	strb	r3, [r7, #31]
 800ab60:	e02c      	b.n	800abbc <USART_SetConfig+0x1dc>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4a56      	ldr	r2, [pc, #344]	@ (800acc0 <USART_SetConfig+0x2e0>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d125      	bne.n	800abb8 <USART_SetConfig+0x1d8>
 800ab6c:	4b51      	ldr	r3, [pc, #324]	@ (800acb4 <USART_SetConfig+0x2d4>)
 800ab6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab72:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ab76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ab7a:	d017      	beq.n	800abac <USART_SetConfig+0x1cc>
 800ab7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ab80:	d817      	bhi.n	800abb2 <USART_SetConfig+0x1d2>
 800ab82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab86:	d00b      	beq.n	800aba0 <USART_SetConfig+0x1c0>
 800ab88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab8c:	d811      	bhi.n	800abb2 <USART_SetConfig+0x1d2>
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d003      	beq.n	800ab9a <USART_SetConfig+0x1ba>
 800ab92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab96:	d006      	beq.n	800aba6 <USART_SetConfig+0x1c6>
 800ab98:	e00b      	b.n	800abb2 <USART_SetConfig+0x1d2>
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	77fb      	strb	r3, [r7, #31]
 800ab9e:	e00d      	b.n	800abbc <USART_SetConfig+0x1dc>
 800aba0:	2302      	movs	r3, #2
 800aba2:	77fb      	strb	r3, [r7, #31]
 800aba4:	e00a      	b.n	800abbc <USART_SetConfig+0x1dc>
 800aba6:	2304      	movs	r3, #4
 800aba8:	77fb      	strb	r3, [r7, #31]
 800abaa:	e007      	b.n	800abbc <USART_SetConfig+0x1dc>
 800abac:	2308      	movs	r3, #8
 800abae:	77fb      	strb	r3, [r7, #31]
 800abb0:	e004      	b.n	800abbc <USART_SetConfig+0x1dc>
 800abb2:	2310      	movs	r3, #16
 800abb4:	77fb      	strb	r3, [r7, #31]
 800abb6:	e001      	b.n	800abbc <USART_SetConfig+0x1dc>
 800abb8:	2310      	movs	r3, #16
 800abba:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 800abbc:	7ffb      	ldrb	r3, [r7, #31]
 800abbe:	2b08      	cmp	r3, #8
 800abc0:	d857      	bhi.n	800ac72 <USART_SetConfig+0x292>
 800abc2:	a201      	add	r2, pc, #4	@ (adr r2, 800abc8 <USART_SetConfig+0x1e8>)
 800abc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abc8:	0800abed 	.word	0x0800abed
 800abcc:	0800ac0b 	.word	0x0800ac0b
 800abd0:	0800ac29 	.word	0x0800ac29
 800abd4:	0800ac73 	.word	0x0800ac73
 800abd8:	0800ac3f 	.word	0x0800ac3f
 800abdc:	0800ac73 	.word	0x0800ac73
 800abe0:	0800ac73 	.word	0x0800ac73
 800abe4:	0800ac73 	.word	0x0800ac73
 800abe8:	0800ac5d 	.word	0x0800ac5d
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800abec:	f7fc ffba 	bl	8007b64 <HAL_RCC_GetPCLK1Freq>
 800abf0:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	005a      	lsls	r2, r3, #1
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	085b      	lsrs	r3, r3, #1
 800abfc:	441a      	add	r2, r3
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac06:	61bb      	str	r3, [r7, #24]
      break;
 800ac08:	e036      	b.n	800ac78 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800ac0a:	f7fc ffbf 	bl	8007b8c <HAL_RCC_GetPCLK2Freq>
 800ac0e:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	005a      	lsls	r2, r3, #1
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	085b      	lsrs	r3, r3, #1
 800ac1a:	441a      	add	r2, r3
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac24:	61bb      	str	r3, [r7, #24]
      break;
 800ac26:	e027      	b.n	800ac78 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	085a      	lsrs	r2, r3, #1
 800ac2e:	4b25      	ldr	r3, [pc, #148]	@ (800acc4 <USART_SetConfig+0x2e4>)
 800ac30:	4413      	add	r3, r2
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	6852      	ldr	r2, [r2, #4]
 800ac36:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac3a:	61bb      	str	r3, [r7, #24]
      break;
 800ac3c:	e01c      	b.n	800ac78 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800ac3e:	f7fc fe7f 	bl	8007940 <HAL_RCC_GetSysClockFreq>
 800ac42:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	005a      	lsls	r2, r3, #1
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	085b      	lsrs	r3, r3, #1
 800ac4e:	441a      	add	r2, r3
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac58:	61bb      	str	r3, [r7, #24]
      break;
 800ac5a:	e00d      	b.n	800ac78 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	085b      	lsrs	r3, r3, #1
 800ac62:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac6e:	61bb      	str	r3, [r7, #24]
      break;
 800ac70:	e002      	b.n	800ac78 <USART_SetConfig+0x298>
    default:
      ret = HAL_ERROR;
 800ac72:	2301      	movs	r3, #1
 800ac74:	77bb      	strb	r3, [r7, #30]
      break;
 800ac76:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800ac78:	69bb      	ldr	r3, [r7, #24]
 800ac7a:	2b0f      	cmp	r3, #15
 800ac7c:	d924      	bls.n	800acc8 <USART_SetConfig+0x2e8>
 800ac7e:	69bb      	ldr	r3, [r7, #24]
 800ac80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac84:	d220      	bcs.n	800acc8 <USART_SetConfig+0x2e8>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac86:	69bb      	ldr	r3, [r7, #24]
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	f023 030f 	bic.w	r3, r3, #15
 800ac8e:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac90:	69bb      	ldr	r3, [r7, #24]
 800ac92:	085b      	lsrs	r3, r3, #1
 800ac94:	b29b      	uxth	r3, r3
 800ac96:	f003 0307 	and.w	r3, r3, #7
 800ac9a:	b29a      	uxth	r2, r3
 800ac9c:	89fb      	ldrh	r3, [r7, #14]
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	89fa      	ldrh	r2, [r7, #14]
 800aca8:	60da      	str	r2, [r3, #12]
 800acaa:	e00f      	b.n	800accc <USART_SetConfig+0x2ec>
 800acac:	efff69f3 	.word	0xefff69f3
 800acb0:	40011000 	.word	0x40011000
 800acb4:	40023800 	.word	0x40023800
 800acb8:	40004400 	.word	0x40004400
 800acbc:	40004800 	.word	0x40004800
 800acc0:	40011400 	.word	0x40011400
 800acc4:	01e84800 	.word	0x01e84800
  }
  else
  {
    ret = HAL_ERROR;
 800acc8:	2301      	movs	r3, #1
 800acca:	77bb      	strb	r3, [r7, #30]
  }


  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2200      	movs	r2, #0
 800acd0:	639a      	str	r2, [r3, #56]	@ 0x38
  husart->TxISR   = NULL;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2200      	movs	r2, #0
 800acd6:	63da      	str	r2, [r3, #60]	@ 0x3c

  return ret;
 800acd8:	7fbb      	ldrb	r3, [r7, #30]
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3720      	adds	r7, #32
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	bf00      	nop

0800ace4 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b086      	sub	sp, #24
 800ace8:	af02      	add	r7, sp, #8
 800acea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2200      	movs	r2, #0
 800acf0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800acf2:	f7f9 fb3d 	bl	8004370 <HAL_GetTick>
 800acf6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f003 0308 	and.w	r3, r3, #8
 800ad02:	2b08      	cmp	r3, #8
 800ad04:	d10e      	bne.n	800ad24 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800ad06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ad0a:	9300      	str	r3, [sp, #0]
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f7ff fe2c 	bl	800a972 <USART_WaitOnFlagUntilTimeout>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d001      	beq.n	800ad24 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad20:	2303      	movs	r3, #3
 800ad22:	e008      	b.n	800ad36 <USART_CheckIdleState+0x52>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2201      	movs	r2, #1
 800ad28:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  return HAL_OK;
 800ad34:	2300      	movs	r3, #0
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3710      	adds	r7, #16
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
	...

0800ad40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ad40:	b084      	sub	sp, #16
 800ad42:	b580      	push	{r7, lr}
 800ad44:	b084      	sub	sp, #16
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6078      	str	r0, [r7, #4]
 800ad4a:	f107 001c 	add.w	r0, r7, #28
 800ad4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ad52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d120      	bne.n	800ad9a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad5c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	68da      	ldr	r2, [r3, #12]
 800ad68:	4b20      	ldr	r3, [pc, #128]	@ (800adec <USB_CoreInit+0xac>)
 800ad6a:	4013      	ands	r3, r2
 800ad6c:	687a      	ldr	r2, [r7, #4]
 800ad6e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ad7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad7e:	2b01      	cmp	r3, #1
 800ad80:	d105      	bne.n	800ad8e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	68db      	ldr	r3, [r3, #12]
 800ad86:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f001 fbee 	bl	800c570 <USB_CoreReset>
 800ad94:	4603      	mov	r3, r0
 800ad96:	73fb      	strb	r3, [r7, #15]
 800ad98:	e010      	b.n	800adbc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f001 fbe2 	bl	800c570 <USB_CoreReset>
 800adac:	4603      	mov	r3, r0
 800adae:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adb4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800adbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d10b      	bne.n	800adda <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	689b      	ldr	r3, [r3, #8]
 800adc6:	f043 0206 	orr.w	r2, r3, #6
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	f043 0220 	orr.w	r2, r3, #32
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800adda:	7bfb      	ldrb	r3, [r7, #15]
}
 800addc:	4618      	mov	r0, r3
 800adde:	3710      	adds	r7, #16
 800ade0:	46bd      	mov	sp, r7
 800ade2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ade6:	b004      	add	sp, #16
 800ade8:	4770      	bx	lr
 800adea:	bf00      	nop
 800adec:	ffbdffbf 	.word	0xffbdffbf

0800adf0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b087      	sub	sp, #28
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	60f8      	str	r0, [r7, #12]
 800adf8:	60b9      	str	r1, [r7, #8]
 800adfa:	4613      	mov	r3, r2
 800adfc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800adfe:	79fb      	ldrb	r3, [r7, #7]
 800ae00:	2b02      	cmp	r3, #2
 800ae02:	d165      	bne.n	800aed0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	4a41      	ldr	r2, [pc, #260]	@ (800af0c <USB_SetTurnaroundTime+0x11c>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d906      	bls.n	800ae1a <USB_SetTurnaroundTime+0x2a>
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	4a40      	ldr	r2, [pc, #256]	@ (800af10 <USB_SetTurnaroundTime+0x120>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d202      	bcs.n	800ae1a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ae14:	230f      	movs	r3, #15
 800ae16:	617b      	str	r3, [r7, #20]
 800ae18:	e062      	b.n	800aee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	4a3c      	ldr	r2, [pc, #240]	@ (800af10 <USB_SetTurnaroundTime+0x120>)
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	d306      	bcc.n	800ae30 <USB_SetTurnaroundTime+0x40>
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	4a3b      	ldr	r2, [pc, #236]	@ (800af14 <USB_SetTurnaroundTime+0x124>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d202      	bcs.n	800ae30 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ae2a:	230e      	movs	r3, #14
 800ae2c:	617b      	str	r3, [r7, #20]
 800ae2e:	e057      	b.n	800aee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	4a38      	ldr	r2, [pc, #224]	@ (800af14 <USB_SetTurnaroundTime+0x124>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d306      	bcc.n	800ae46 <USB_SetTurnaroundTime+0x56>
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	4a37      	ldr	r2, [pc, #220]	@ (800af18 <USB_SetTurnaroundTime+0x128>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d202      	bcs.n	800ae46 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ae40:	230d      	movs	r3, #13
 800ae42:	617b      	str	r3, [r7, #20]
 800ae44:	e04c      	b.n	800aee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	4a33      	ldr	r2, [pc, #204]	@ (800af18 <USB_SetTurnaroundTime+0x128>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d306      	bcc.n	800ae5c <USB_SetTurnaroundTime+0x6c>
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	4a32      	ldr	r2, [pc, #200]	@ (800af1c <USB_SetTurnaroundTime+0x12c>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d802      	bhi.n	800ae5c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ae56:	230c      	movs	r3, #12
 800ae58:	617b      	str	r3, [r7, #20]
 800ae5a:	e041      	b.n	800aee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	4a2f      	ldr	r2, [pc, #188]	@ (800af1c <USB_SetTurnaroundTime+0x12c>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d906      	bls.n	800ae72 <USB_SetTurnaroundTime+0x82>
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	4a2e      	ldr	r2, [pc, #184]	@ (800af20 <USB_SetTurnaroundTime+0x130>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d802      	bhi.n	800ae72 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ae6c:	230b      	movs	r3, #11
 800ae6e:	617b      	str	r3, [r7, #20]
 800ae70:	e036      	b.n	800aee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	4a2a      	ldr	r2, [pc, #168]	@ (800af20 <USB_SetTurnaroundTime+0x130>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d906      	bls.n	800ae88 <USB_SetTurnaroundTime+0x98>
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	4a29      	ldr	r2, [pc, #164]	@ (800af24 <USB_SetTurnaroundTime+0x134>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d802      	bhi.n	800ae88 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ae82:	230a      	movs	r3, #10
 800ae84:	617b      	str	r3, [r7, #20]
 800ae86:	e02b      	b.n	800aee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	4a26      	ldr	r2, [pc, #152]	@ (800af24 <USB_SetTurnaroundTime+0x134>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d906      	bls.n	800ae9e <USB_SetTurnaroundTime+0xae>
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	4a25      	ldr	r2, [pc, #148]	@ (800af28 <USB_SetTurnaroundTime+0x138>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d202      	bcs.n	800ae9e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ae98:	2309      	movs	r3, #9
 800ae9a:	617b      	str	r3, [r7, #20]
 800ae9c:	e020      	b.n	800aee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	4a21      	ldr	r2, [pc, #132]	@ (800af28 <USB_SetTurnaroundTime+0x138>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d306      	bcc.n	800aeb4 <USB_SetTurnaroundTime+0xc4>
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	4a20      	ldr	r2, [pc, #128]	@ (800af2c <USB_SetTurnaroundTime+0x13c>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d802      	bhi.n	800aeb4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800aeae:	2308      	movs	r3, #8
 800aeb0:	617b      	str	r3, [r7, #20]
 800aeb2:	e015      	b.n	800aee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	4a1d      	ldr	r2, [pc, #116]	@ (800af2c <USB_SetTurnaroundTime+0x13c>)
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	d906      	bls.n	800aeca <USB_SetTurnaroundTime+0xda>
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	4a1c      	ldr	r2, [pc, #112]	@ (800af30 <USB_SetTurnaroundTime+0x140>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d202      	bcs.n	800aeca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800aec4:	2307      	movs	r3, #7
 800aec6:	617b      	str	r3, [r7, #20]
 800aec8:	e00a      	b.n	800aee0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800aeca:	2306      	movs	r3, #6
 800aecc:	617b      	str	r3, [r7, #20]
 800aece:	e007      	b.n	800aee0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800aed0:	79fb      	ldrb	r3, [r7, #7]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d102      	bne.n	800aedc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800aed6:	2309      	movs	r3, #9
 800aed8:	617b      	str	r3, [r7, #20]
 800aeda:	e001      	b.n	800aee0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800aedc:	2309      	movs	r3, #9
 800aede:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	68db      	ldr	r3, [r3, #12]
 800aee4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	68da      	ldr	r2, [r3, #12]
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	029b      	lsls	r3, r3, #10
 800aef4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800aef8:	431a      	orrs	r2, r3
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800aefe:	2300      	movs	r3, #0
}
 800af00:	4618      	mov	r0, r3
 800af02:	371c      	adds	r7, #28
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr
 800af0c:	00d8acbf 	.word	0x00d8acbf
 800af10:	00e4e1c0 	.word	0x00e4e1c0
 800af14:	00f42400 	.word	0x00f42400
 800af18:	01067380 	.word	0x01067380
 800af1c:	011a499f 	.word	0x011a499f
 800af20:	01312cff 	.word	0x01312cff
 800af24:	014ca43f 	.word	0x014ca43f
 800af28:	016e3600 	.word	0x016e3600
 800af2c:	01a6ab1f 	.word	0x01a6ab1f
 800af30:	01e84800 	.word	0x01e84800

0800af34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	689b      	ldr	r3, [r3, #8]
 800af40:	f043 0201 	orr.w	r2, r3, #1
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800af48:	2300      	movs	r3, #0
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	370c      	adds	r7, #12
 800af4e:	46bd      	mov	sp, r7
 800af50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af54:	4770      	bx	lr

0800af56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800af56:	b480      	push	{r7}
 800af58:	b083      	sub	sp, #12
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	f023 0201 	bic.w	r2, r3, #1
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800af6a:	2300      	movs	r3, #0
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	370c      	adds	r7, #12
 800af70:	46bd      	mov	sp, r7
 800af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af76:	4770      	bx	lr

0800af78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b084      	sub	sp, #16
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	460b      	mov	r3, r1
 800af82:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800af84:	2300      	movs	r3, #0
 800af86:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	68db      	ldr	r3, [r3, #12]
 800af8c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800af94:	78fb      	ldrb	r3, [r7, #3]
 800af96:	2b01      	cmp	r3, #1
 800af98:	d115      	bne.n	800afc6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	68db      	ldr	r3, [r3, #12]
 800af9e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800afa6:	2001      	movs	r0, #1
 800afa8:	f7f9 f9ee 	bl	8004388 <HAL_Delay>
      ms++;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	3301      	adds	r3, #1
 800afb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f001 fa4b 	bl	800c44e <USB_GetMode>
 800afb8:	4603      	mov	r3, r0
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d01e      	beq.n	800affc <USB_SetCurrentMode+0x84>
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2b31      	cmp	r3, #49	@ 0x31
 800afc2:	d9f0      	bls.n	800afa6 <USB_SetCurrentMode+0x2e>
 800afc4:	e01a      	b.n	800affc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800afc6:	78fb      	ldrb	r3, [r7, #3]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d115      	bne.n	800aff8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	68db      	ldr	r3, [r3, #12]
 800afd0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800afd8:	2001      	movs	r0, #1
 800afda:	f7f9 f9d5 	bl	8004388 <HAL_Delay>
      ms++;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	3301      	adds	r3, #1
 800afe2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f001 fa32 	bl	800c44e <USB_GetMode>
 800afea:	4603      	mov	r3, r0
 800afec:	2b00      	cmp	r3, #0
 800afee:	d005      	beq.n	800affc <USB_SetCurrentMode+0x84>
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2b31      	cmp	r3, #49	@ 0x31
 800aff4:	d9f0      	bls.n	800afd8 <USB_SetCurrentMode+0x60>
 800aff6:	e001      	b.n	800affc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800aff8:	2301      	movs	r3, #1
 800affa:	e005      	b.n	800b008 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2b32      	cmp	r3, #50	@ 0x32
 800b000:	d101      	bne.n	800b006 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b002:	2301      	movs	r3, #1
 800b004:	e000      	b.n	800b008 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b006:	2300      	movs	r3, #0
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3710      	adds	r7, #16
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b010:	b084      	sub	sp, #16
 800b012:	b580      	push	{r7, lr}
 800b014:	b086      	sub	sp, #24
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
 800b01a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b01e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b022:	2300      	movs	r3, #0
 800b024:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b02a:	2300      	movs	r3, #0
 800b02c:	613b      	str	r3, [r7, #16]
 800b02e:	e009      	b.n	800b044 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b030:	687a      	ldr	r2, [r7, #4]
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	3340      	adds	r3, #64	@ 0x40
 800b036:	009b      	lsls	r3, r3, #2
 800b038:	4413      	add	r3, r2
 800b03a:	2200      	movs	r2, #0
 800b03c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	3301      	adds	r3, #1
 800b042:	613b      	str	r3, [r7, #16]
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	2b0e      	cmp	r3, #14
 800b048:	d9f2      	bls.n	800b030 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b04a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d11c      	bne.n	800b08a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	68fa      	ldr	r2, [r7, #12]
 800b05a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b05e:	f043 0302 	orr.w	r3, r3, #2
 800b062:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b068:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	601a      	str	r2, [r3, #0]
 800b088:	e005      	b.n	800b096 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b08e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b09c:	461a      	mov	r2, r3
 800b09e:	2300      	movs	r3, #0
 800b0a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	680b      	ldr	r3, [r1, #0]
 800b0b4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b0b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d10c      	bne.n	800b0d6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b0bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d104      	bne.n	800b0cc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b0c2:	2100      	movs	r1, #0
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f000 f965 	bl	800b394 <USB_SetDevSpeed>
 800b0ca:	e008      	b.n	800b0de <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b0cc:	2101      	movs	r1, #1
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 f960 	bl	800b394 <USB_SetDevSpeed>
 800b0d4:	e003      	b.n	800b0de <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b0d6:	2103      	movs	r1, #3
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 f95b 	bl	800b394 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b0de:	2110      	movs	r1, #16
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 f8f3 	bl	800b2cc <USB_FlushTxFifo>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d001      	beq.n	800b0f0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f000 f91f 	bl	800b334 <USB_FlushRxFifo>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d001      	beq.n	800b100 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b106:	461a      	mov	r2, r3
 800b108:	2300      	movs	r3, #0
 800b10a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b112:	461a      	mov	r2, r3
 800b114:	2300      	movs	r3, #0
 800b116:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b11e:	461a      	mov	r2, r3
 800b120:	2300      	movs	r3, #0
 800b122:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b124:	2300      	movs	r3, #0
 800b126:	613b      	str	r3, [r7, #16]
 800b128:	e043      	b.n	800b1b2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	015a      	lsls	r2, r3, #5
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	4413      	add	r3, r2
 800b132:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b13c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b140:	d118      	bne.n	800b174 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d10a      	bne.n	800b15e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	015a      	lsls	r2, r3, #5
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	4413      	add	r3, r2
 800b150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b154:	461a      	mov	r2, r3
 800b156:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b15a:	6013      	str	r3, [r2, #0]
 800b15c:	e013      	b.n	800b186 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	015a      	lsls	r2, r3, #5
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	4413      	add	r3, r2
 800b166:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b16a:	461a      	mov	r2, r3
 800b16c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b170:	6013      	str	r3, [r2, #0]
 800b172:	e008      	b.n	800b186 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	015a      	lsls	r2, r3, #5
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	4413      	add	r3, r2
 800b17c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b180:	461a      	mov	r2, r3
 800b182:	2300      	movs	r3, #0
 800b184:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	015a      	lsls	r2, r3, #5
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	4413      	add	r3, r2
 800b18e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b192:	461a      	mov	r2, r3
 800b194:	2300      	movs	r3, #0
 800b196:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	015a      	lsls	r2, r3, #5
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	4413      	add	r3, r2
 800b1a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b1aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	613b      	str	r3, [r7, #16]
 800b1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b4:	693a      	ldr	r2, [r7, #16]
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d3b7      	bcc.n	800b12a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	613b      	str	r3, [r7, #16]
 800b1be:	e043      	b.n	800b248 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	015a      	lsls	r2, r3, #5
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	4413      	add	r3, r2
 800b1c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b1d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b1d6:	d118      	bne.n	800b20a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d10a      	bne.n	800b1f4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	015a      	lsls	r2, r3, #5
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	4413      	add	r3, r2
 800b1e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b1f0:	6013      	str	r3, [r2, #0]
 800b1f2:	e013      	b.n	800b21c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	015a      	lsls	r2, r3, #5
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	4413      	add	r3, r2
 800b1fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b200:	461a      	mov	r2, r3
 800b202:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b206:	6013      	str	r3, [r2, #0]
 800b208:	e008      	b.n	800b21c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	015a      	lsls	r2, r3, #5
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	4413      	add	r3, r2
 800b212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b216:	461a      	mov	r2, r3
 800b218:	2300      	movs	r3, #0
 800b21a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	015a      	lsls	r2, r3, #5
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	4413      	add	r3, r2
 800b224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b228:	461a      	mov	r2, r3
 800b22a:	2300      	movs	r3, #0
 800b22c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	015a      	lsls	r2, r3, #5
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	4413      	add	r3, r2
 800b236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b23a:	461a      	mov	r2, r3
 800b23c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b240:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	3301      	adds	r3, #1
 800b246:	613b      	str	r3, [r7, #16]
 800b248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b24a:	693a      	ldr	r2, [r7, #16]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d3b7      	bcc.n	800b1c0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b256:	691b      	ldr	r3, [r3, #16]
 800b258:	68fa      	ldr	r2, [r7, #12]
 800b25a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b25e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b262:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2200      	movs	r2, #0
 800b268:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b270:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b274:	2b00      	cmp	r3, #0
 800b276:	d105      	bne.n	800b284 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	699b      	ldr	r3, [r3, #24]
 800b27c:	f043 0210 	orr.w	r2, r3, #16
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	699a      	ldr	r2, [r3, #24]
 800b288:	4b0e      	ldr	r3, [pc, #56]	@ (800b2c4 <USB_DevInit+0x2b4>)
 800b28a:	4313      	orrs	r3, r2
 800b28c:	687a      	ldr	r2, [r7, #4]
 800b28e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b292:	2b00      	cmp	r3, #0
 800b294:	d005      	beq.n	800b2a2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	699b      	ldr	r3, [r3, #24]
 800b29a:	f043 0208 	orr.w	r2, r3, #8
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b2a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d105      	bne.n	800b2b4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	699a      	ldr	r2, [r3, #24]
 800b2ac:	4b06      	ldr	r3, [pc, #24]	@ (800b2c8 <USB_DevInit+0x2b8>)
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b2b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3718      	adds	r7, #24
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b2c0:	b004      	add	sp, #16
 800b2c2:	4770      	bx	lr
 800b2c4:	803c3800 	.word	0x803c3800
 800b2c8:	40000004 	.word	0x40000004

0800b2cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b085      	sub	sp, #20
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	3301      	adds	r3, #1
 800b2de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	4a13      	ldr	r2, [pc, #76]	@ (800b330 <USB_FlushTxFifo+0x64>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d901      	bls.n	800b2ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b2e8:	2303      	movs	r3, #3
 800b2ea:	e01b      	b.n	800b324 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	691b      	ldr	r3, [r3, #16]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	daf2      	bge.n	800b2da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	019b      	lsls	r3, r3, #6
 800b2fc:	f043 0220 	orr.w	r2, r3, #32
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	3301      	adds	r3, #1
 800b308:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	4a08      	ldr	r2, [pc, #32]	@ (800b330 <USB_FlushTxFifo+0x64>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d901      	bls.n	800b316 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b312:	2303      	movs	r3, #3
 800b314:	e006      	b.n	800b324 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	691b      	ldr	r3, [r3, #16]
 800b31a:	f003 0320 	and.w	r3, r3, #32
 800b31e:	2b20      	cmp	r3, #32
 800b320:	d0f0      	beq.n	800b304 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b322:	2300      	movs	r3, #0
}
 800b324:	4618      	mov	r0, r3
 800b326:	3714      	adds	r7, #20
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr
 800b330:	00030d40 	.word	0x00030d40

0800b334 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b334:	b480      	push	{r7}
 800b336:	b085      	sub	sp, #20
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b33c:	2300      	movs	r3, #0
 800b33e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	3301      	adds	r3, #1
 800b344:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	4a11      	ldr	r2, [pc, #68]	@ (800b390 <USB_FlushRxFifo+0x5c>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d901      	bls.n	800b352 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b34e:	2303      	movs	r3, #3
 800b350:	e018      	b.n	800b384 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	691b      	ldr	r3, [r3, #16]
 800b356:	2b00      	cmp	r3, #0
 800b358:	daf2      	bge.n	800b340 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b35a:	2300      	movs	r3, #0
 800b35c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2210      	movs	r2, #16
 800b362:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	3301      	adds	r3, #1
 800b368:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	4a08      	ldr	r2, [pc, #32]	@ (800b390 <USB_FlushRxFifo+0x5c>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d901      	bls.n	800b376 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b372:	2303      	movs	r3, #3
 800b374:	e006      	b.n	800b384 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	691b      	ldr	r3, [r3, #16]
 800b37a:	f003 0310 	and.w	r3, r3, #16
 800b37e:	2b10      	cmp	r3, #16
 800b380:	d0f0      	beq.n	800b364 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b382:	2300      	movs	r3, #0
}
 800b384:	4618      	mov	r0, r3
 800b386:	3714      	adds	r7, #20
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr
 800b390:	00030d40 	.word	0x00030d40

0800b394 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b394:	b480      	push	{r7}
 800b396:	b085      	sub	sp, #20
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	460b      	mov	r3, r1
 800b39e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3aa:	681a      	ldr	r2, [r3, #0]
 800b3ac:	78fb      	ldrb	r3, [r7, #3]
 800b3ae:	68f9      	ldr	r1, [r7, #12]
 800b3b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b3b8:	2300      	movs	r3, #0
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3714      	adds	r7, #20
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c4:	4770      	bx	lr

0800b3c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b3c6:	b480      	push	{r7}
 800b3c8:	b087      	sub	sp, #28
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3d8:	689b      	ldr	r3, [r3, #8]
 800b3da:	f003 0306 	and.w	r3, r3, #6
 800b3de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d102      	bne.n	800b3ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	75fb      	strb	r3, [r7, #23]
 800b3ea:	e00a      	b.n	800b402 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2b02      	cmp	r3, #2
 800b3f0:	d002      	beq.n	800b3f8 <USB_GetDevSpeed+0x32>
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2b06      	cmp	r3, #6
 800b3f6:	d102      	bne.n	800b3fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b3f8:	2302      	movs	r3, #2
 800b3fa:	75fb      	strb	r3, [r7, #23]
 800b3fc:	e001      	b.n	800b402 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b3fe:	230f      	movs	r3, #15
 800b400:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b402:	7dfb      	ldrb	r3, [r7, #23]
}
 800b404:	4618      	mov	r0, r3
 800b406:	371c      	adds	r7, #28
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr

0800b410 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b410:	b480      	push	{r7}
 800b412:	b085      	sub	sp, #20
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	785b      	ldrb	r3, [r3, #1]
 800b428:	2b01      	cmp	r3, #1
 800b42a:	d139      	bne.n	800b4a0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b432:	69da      	ldr	r2, [r3, #28]
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	f003 030f 	and.w	r3, r3, #15
 800b43c:	2101      	movs	r1, #1
 800b43e:	fa01 f303 	lsl.w	r3, r1, r3
 800b442:	b29b      	uxth	r3, r3
 800b444:	68f9      	ldr	r1, [r7, #12]
 800b446:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b44a:	4313      	orrs	r3, r2
 800b44c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	015a      	lsls	r2, r3, #5
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	4413      	add	r3, r2
 800b456:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b460:	2b00      	cmp	r3, #0
 800b462:	d153      	bne.n	800b50c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	015a      	lsls	r2, r3, #5
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	4413      	add	r3, r2
 800b46c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b470:	681a      	ldr	r2, [r3, #0]
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	68db      	ldr	r3, [r3, #12]
 800b476:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	791b      	ldrb	r3, [r3, #4]
 800b47e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b480:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	059b      	lsls	r3, r3, #22
 800b486:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b488:	431a      	orrs	r2, r3
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	0159      	lsls	r1, r3, #5
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	440b      	add	r3, r1
 800b492:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b496:	4619      	mov	r1, r3
 800b498:	4b20      	ldr	r3, [pc, #128]	@ (800b51c <USB_ActivateEndpoint+0x10c>)
 800b49a:	4313      	orrs	r3, r2
 800b49c:	600b      	str	r3, [r1, #0]
 800b49e:	e035      	b.n	800b50c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4a6:	69da      	ldr	r2, [r3, #28]
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	f003 030f 	and.w	r3, r3, #15
 800b4b0:	2101      	movs	r1, #1
 800b4b2:	fa01 f303 	lsl.w	r3, r1, r3
 800b4b6:	041b      	lsls	r3, r3, #16
 800b4b8:	68f9      	ldr	r1, [r7, #12]
 800b4ba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	015a      	lsls	r2, r3, #5
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	4413      	add	r3, r2
 800b4ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d119      	bne.n	800b50c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	015a      	lsls	r2, r3, #5
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	4413      	add	r3, r2
 800b4e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4e4:	681a      	ldr	r2, [r3, #0]
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	68db      	ldr	r3, [r3, #12]
 800b4ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	791b      	ldrb	r3, [r3, #4]
 800b4f2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b4f4:	430b      	orrs	r3, r1
 800b4f6:	431a      	orrs	r2, r3
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	0159      	lsls	r1, r3, #5
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	440b      	add	r3, r1
 800b500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b504:	4619      	mov	r1, r3
 800b506:	4b05      	ldr	r3, [pc, #20]	@ (800b51c <USB_ActivateEndpoint+0x10c>)
 800b508:	4313      	orrs	r3, r2
 800b50a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b50c:	2300      	movs	r3, #0
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3714      	adds	r7, #20
 800b512:	46bd      	mov	sp, r7
 800b514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b518:	4770      	bx	lr
 800b51a:	bf00      	nop
 800b51c:	10008000 	.word	0x10008000

0800b520 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b520:	b480      	push	{r7}
 800b522:	b085      	sub	sp, #20
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	781b      	ldrb	r3, [r3, #0]
 800b532:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	785b      	ldrb	r3, [r3, #1]
 800b538:	2b01      	cmp	r3, #1
 800b53a:	d161      	bne.n	800b600 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	015a      	lsls	r2, r3, #5
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	4413      	add	r3, r2
 800b544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b54e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b552:	d11f      	bne.n	800b594 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	015a      	lsls	r2, r3, #5
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	4413      	add	r3, r2
 800b55c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	68ba      	ldr	r2, [r7, #8]
 800b564:	0151      	lsls	r1, r2, #5
 800b566:	68fa      	ldr	r2, [r7, #12]
 800b568:	440a      	add	r2, r1
 800b56a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b56e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b572:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	015a      	lsls	r2, r3, #5
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	4413      	add	r3, r2
 800b57c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	68ba      	ldr	r2, [r7, #8]
 800b584:	0151      	lsls	r1, r2, #5
 800b586:	68fa      	ldr	r2, [r7, #12]
 800b588:	440a      	add	r2, r1
 800b58a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b58e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b592:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b59a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	f003 030f 	and.w	r3, r3, #15
 800b5a4:	2101      	movs	r1, #1
 800b5a6:	fa01 f303 	lsl.w	r3, r1, r3
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	43db      	mvns	r3, r3
 800b5ae:	68f9      	ldr	r1, [r7, #12]
 800b5b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b5b4:	4013      	ands	r3, r2
 800b5b6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5be:	69da      	ldr	r2, [r3, #28]
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	781b      	ldrb	r3, [r3, #0]
 800b5c4:	f003 030f 	and.w	r3, r3, #15
 800b5c8:	2101      	movs	r1, #1
 800b5ca:	fa01 f303 	lsl.w	r3, r1, r3
 800b5ce:	b29b      	uxth	r3, r3
 800b5d0:	43db      	mvns	r3, r3
 800b5d2:	68f9      	ldr	r1, [r7, #12]
 800b5d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b5d8:	4013      	ands	r3, r2
 800b5da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	015a      	lsls	r2, r3, #5
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	4413      	add	r3, r2
 800b5e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5e8:	681a      	ldr	r2, [r3, #0]
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	0159      	lsls	r1, r3, #5
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	440b      	add	r3, r1
 800b5f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	4b35      	ldr	r3, [pc, #212]	@ (800b6d0 <USB_DeactivateEndpoint+0x1b0>)
 800b5fa:	4013      	ands	r3, r2
 800b5fc:	600b      	str	r3, [r1, #0]
 800b5fe:	e060      	b.n	800b6c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	015a      	lsls	r2, r3, #5
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	4413      	add	r3, r2
 800b608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b612:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b616:	d11f      	bne.n	800b658 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	015a      	lsls	r2, r3, #5
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	4413      	add	r3, r2
 800b620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	68ba      	ldr	r2, [r7, #8]
 800b628:	0151      	lsls	r1, r2, #5
 800b62a:	68fa      	ldr	r2, [r7, #12]
 800b62c:	440a      	add	r2, r1
 800b62e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b632:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b636:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	015a      	lsls	r2, r3, #5
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	4413      	add	r3, r2
 800b640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	68ba      	ldr	r2, [r7, #8]
 800b648:	0151      	lsls	r1, r2, #5
 800b64a:	68fa      	ldr	r2, [r7, #12]
 800b64c:	440a      	add	r2, r1
 800b64e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b652:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b656:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b65e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	781b      	ldrb	r3, [r3, #0]
 800b664:	f003 030f 	and.w	r3, r3, #15
 800b668:	2101      	movs	r1, #1
 800b66a:	fa01 f303 	lsl.w	r3, r1, r3
 800b66e:	041b      	lsls	r3, r3, #16
 800b670:	43db      	mvns	r3, r3
 800b672:	68f9      	ldr	r1, [r7, #12]
 800b674:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b678:	4013      	ands	r3, r2
 800b67a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b682:	69da      	ldr	r2, [r3, #28]
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	f003 030f 	and.w	r3, r3, #15
 800b68c:	2101      	movs	r1, #1
 800b68e:	fa01 f303 	lsl.w	r3, r1, r3
 800b692:	041b      	lsls	r3, r3, #16
 800b694:	43db      	mvns	r3, r3
 800b696:	68f9      	ldr	r1, [r7, #12]
 800b698:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b69c:	4013      	ands	r3, r2
 800b69e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	015a      	lsls	r2, r3, #5
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	4413      	add	r3, r2
 800b6a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6ac:	681a      	ldr	r2, [r3, #0]
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	0159      	lsls	r1, r3, #5
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	440b      	add	r3, r1
 800b6b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	4b05      	ldr	r3, [pc, #20]	@ (800b6d4 <USB_DeactivateEndpoint+0x1b4>)
 800b6be:	4013      	ands	r3, r2
 800b6c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b6c2:	2300      	movs	r3, #0
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3714      	adds	r7, #20
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr
 800b6d0:	ec337800 	.word	0xec337800
 800b6d4:	eff37800 	.word	0xeff37800

0800b6d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b08a      	sub	sp, #40	@ 0x28
 800b6dc:	af02      	add	r7, sp, #8
 800b6de:	60f8      	str	r0, [r7, #12]
 800b6e0:	60b9      	str	r1, [r7, #8]
 800b6e2:	4613      	mov	r3, r2
 800b6e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	785b      	ldrb	r3, [r3, #1]
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	f040 8163 	bne.w	800b9c0 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	699b      	ldr	r3, [r3, #24]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d132      	bne.n	800b768 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b702:	69bb      	ldr	r3, [r7, #24]
 800b704:	015a      	lsls	r2, r3, #5
 800b706:	69fb      	ldr	r3, [r7, #28]
 800b708:	4413      	add	r3, r2
 800b70a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b70e:	691a      	ldr	r2, [r3, #16]
 800b710:	69bb      	ldr	r3, [r7, #24]
 800b712:	0159      	lsls	r1, r3, #5
 800b714:	69fb      	ldr	r3, [r7, #28]
 800b716:	440b      	add	r3, r1
 800b718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b71c:	4619      	mov	r1, r3
 800b71e:	4ba5      	ldr	r3, [pc, #660]	@ (800b9b4 <USB_EPStartXfer+0x2dc>)
 800b720:	4013      	ands	r3, r2
 800b722:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b724:	69bb      	ldr	r3, [r7, #24]
 800b726:	015a      	lsls	r2, r3, #5
 800b728:	69fb      	ldr	r3, [r7, #28]
 800b72a:	4413      	add	r3, r2
 800b72c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b730:	691b      	ldr	r3, [r3, #16]
 800b732:	69ba      	ldr	r2, [r7, #24]
 800b734:	0151      	lsls	r1, r2, #5
 800b736:	69fa      	ldr	r2, [r7, #28]
 800b738:	440a      	add	r2, r1
 800b73a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b73e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b742:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b744:	69bb      	ldr	r3, [r7, #24]
 800b746:	015a      	lsls	r2, r3, #5
 800b748:	69fb      	ldr	r3, [r7, #28]
 800b74a:	4413      	add	r3, r2
 800b74c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b750:	691a      	ldr	r2, [r3, #16]
 800b752:	69bb      	ldr	r3, [r7, #24]
 800b754:	0159      	lsls	r1, r3, #5
 800b756:	69fb      	ldr	r3, [r7, #28]
 800b758:	440b      	add	r3, r1
 800b75a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b75e:	4619      	mov	r1, r3
 800b760:	4b95      	ldr	r3, [pc, #596]	@ (800b9b8 <USB_EPStartXfer+0x2e0>)
 800b762:	4013      	ands	r3, r2
 800b764:	610b      	str	r3, [r1, #16]
 800b766:	e074      	b.n	800b852 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b768:	69bb      	ldr	r3, [r7, #24]
 800b76a:	015a      	lsls	r2, r3, #5
 800b76c:	69fb      	ldr	r3, [r7, #28]
 800b76e:	4413      	add	r3, r2
 800b770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b774:	691a      	ldr	r2, [r3, #16]
 800b776:	69bb      	ldr	r3, [r7, #24]
 800b778:	0159      	lsls	r1, r3, #5
 800b77a:	69fb      	ldr	r3, [r7, #28]
 800b77c:	440b      	add	r3, r1
 800b77e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b782:	4619      	mov	r1, r3
 800b784:	4b8c      	ldr	r3, [pc, #560]	@ (800b9b8 <USB_EPStartXfer+0x2e0>)
 800b786:	4013      	ands	r3, r2
 800b788:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	015a      	lsls	r2, r3, #5
 800b78e:	69fb      	ldr	r3, [r7, #28]
 800b790:	4413      	add	r3, r2
 800b792:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b796:	691a      	ldr	r2, [r3, #16]
 800b798:	69bb      	ldr	r3, [r7, #24]
 800b79a:	0159      	lsls	r1, r3, #5
 800b79c:	69fb      	ldr	r3, [r7, #28]
 800b79e:	440b      	add	r3, r1
 800b7a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	4b83      	ldr	r3, [pc, #524]	@ (800b9b4 <USB_EPStartXfer+0x2dc>)
 800b7a8:	4013      	ands	r3, r2
 800b7aa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b7ac:	69bb      	ldr	r3, [r7, #24]
 800b7ae:	015a      	lsls	r2, r3, #5
 800b7b0:	69fb      	ldr	r3, [r7, #28]
 800b7b2:	4413      	add	r3, r2
 800b7b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7b8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	6999      	ldr	r1, [r3, #24]
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	68db      	ldr	r3, [r3, #12]
 800b7c2:	440b      	add	r3, r1
 800b7c4:	1e59      	subs	r1, r3, #1
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	68db      	ldr	r3, [r3, #12]
 800b7ca:	fbb1 f3f3 	udiv	r3, r1, r3
 800b7ce:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b7d0:	4b7a      	ldr	r3, [pc, #488]	@ (800b9bc <USB_EPStartXfer+0x2e4>)
 800b7d2:	400b      	ands	r3, r1
 800b7d4:	69b9      	ldr	r1, [r7, #24]
 800b7d6:	0148      	lsls	r0, r1, #5
 800b7d8:	69f9      	ldr	r1, [r7, #28]
 800b7da:	4401      	add	r1, r0
 800b7dc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b7e4:	69bb      	ldr	r3, [r7, #24]
 800b7e6:	015a      	lsls	r2, r3, #5
 800b7e8:	69fb      	ldr	r3, [r7, #28]
 800b7ea:	4413      	add	r3, r2
 800b7ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7f0:	691a      	ldr	r2, [r3, #16]
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	699b      	ldr	r3, [r3, #24]
 800b7f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b7fa:	69b9      	ldr	r1, [r7, #24]
 800b7fc:	0148      	lsls	r0, r1, #5
 800b7fe:	69f9      	ldr	r1, [r7, #28]
 800b800:	4401      	add	r1, r0
 800b802:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b806:	4313      	orrs	r3, r2
 800b808:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	791b      	ldrb	r3, [r3, #4]
 800b80e:	2b01      	cmp	r3, #1
 800b810:	d11f      	bne.n	800b852 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b812:	69bb      	ldr	r3, [r7, #24]
 800b814:	015a      	lsls	r2, r3, #5
 800b816:	69fb      	ldr	r3, [r7, #28]
 800b818:	4413      	add	r3, r2
 800b81a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b81e:	691b      	ldr	r3, [r3, #16]
 800b820:	69ba      	ldr	r2, [r7, #24]
 800b822:	0151      	lsls	r1, r2, #5
 800b824:	69fa      	ldr	r2, [r7, #28]
 800b826:	440a      	add	r2, r1
 800b828:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b82c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800b830:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b832:	69bb      	ldr	r3, [r7, #24]
 800b834:	015a      	lsls	r2, r3, #5
 800b836:	69fb      	ldr	r3, [r7, #28]
 800b838:	4413      	add	r3, r2
 800b83a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b83e:	691b      	ldr	r3, [r3, #16]
 800b840:	69ba      	ldr	r2, [r7, #24]
 800b842:	0151      	lsls	r1, r2, #5
 800b844:	69fa      	ldr	r2, [r7, #28]
 800b846:	440a      	add	r2, r1
 800b848:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b84c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b850:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b852:	79fb      	ldrb	r3, [r7, #7]
 800b854:	2b01      	cmp	r3, #1
 800b856:	d14b      	bne.n	800b8f0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	695b      	ldr	r3, [r3, #20]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d009      	beq.n	800b874 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b860:	69bb      	ldr	r3, [r7, #24]
 800b862:	015a      	lsls	r2, r3, #5
 800b864:	69fb      	ldr	r3, [r7, #28]
 800b866:	4413      	add	r3, r2
 800b868:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b86c:	461a      	mov	r2, r3
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	695b      	ldr	r3, [r3, #20]
 800b872:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	791b      	ldrb	r3, [r3, #4]
 800b878:	2b01      	cmp	r3, #1
 800b87a:	d128      	bne.n	800b8ce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b87c:	69fb      	ldr	r3, [r7, #28]
 800b87e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b882:	689b      	ldr	r3, [r3, #8]
 800b884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d110      	bne.n	800b8ae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b88c:	69bb      	ldr	r3, [r7, #24]
 800b88e:	015a      	lsls	r2, r3, #5
 800b890:	69fb      	ldr	r3, [r7, #28]
 800b892:	4413      	add	r3, r2
 800b894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	69ba      	ldr	r2, [r7, #24]
 800b89c:	0151      	lsls	r1, r2, #5
 800b89e:	69fa      	ldr	r2, [r7, #28]
 800b8a0:	440a      	add	r2, r1
 800b8a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b8a6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b8aa:	6013      	str	r3, [r2, #0]
 800b8ac:	e00f      	b.n	800b8ce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b8ae:	69bb      	ldr	r3, [r7, #24]
 800b8b0:	015a      	lsls	r2, r3, #5
 800b8b2:	69fb      	ldr	r3, [r7, #28]
 800b8b4:	4413      	add	r3, r2
 800b8b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	69ba      	ldr	r2, [r7, #24]
 800b8be:	0151      	lsls	r1, r2, #5
 800b8c0:	69fa      	ldr	r2, [r7, #28]
 800b8c2:	440a      	add	r2, r1
 800b8c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b8c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b8cc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b8ce:	69bb      	ldr	r3, [r7, #24]
 800b8d0:	015a      	lsls	r2, r3, #5
 800b8d2:	69fb      	ldr	r3, [r7, #28]
 800b8d4:	4413      	add	r3, r2
 800b8d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	69ba      	ldr	r2, [r7, #24]
 800b8de:	0151      	lsls	r1, r2, #5
 800b8e0:	69fa      	ldr	r2, [r7, #28]
 800b8e2:	440a      	add	r2, r1
 800b8e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b8e8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b8ec:	6013      	str	r3, [r2, #0]
 800b8ee:	e137      	b.n	800bb60 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b8f0:	69bb      	ldr	r3, [r7, #24]
 800b8f2:	015a      	lsls	r2, r3, #5
 800b8f4:	69fb      	ldr	r3, [r7, #28]
 800b8f6:	4413      	add	r3, r2
 800b8f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	69ba      	ldr	r2, [r7, #24]
 800b900:	0151      	lsls	r1, r2, #5
 800b902:	69fa      	ldr	r2, [r7, #28]
 800b904:	440a      	add	r2, r1
 800b906:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b90a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b90e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	791b      	ldrb	r3, [r3, #4]
 800b914:	2b01      	cmp	r3, #1
 800b916:	d015      	beq.n	800b944 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	699b      	ldr	r3, [r3, #24]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	f000 811f 	beq.w	800bb60 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b922:	69fb      	ldr	r3, [r7, #28]
 800b924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b928:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	f003 030f 	and.w	r3, r3, #15
 800b932:	2101      	movs	r1, #1
 800b934:	fa01 f303 	lsl.w	r3, r1, r3
 800b938:	69f9      	ldr	r1, [r7, #28]
 800b93a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b93e:	4313      	orrs	r3, r2
 800b940:	634b      	str	r3, [r1, #52]	@ 0x34
 800b942:	e10d      	b.n	800bb60 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b944:	69fb      	ldr	r3, [r7, #28]
 800b946:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b94a:	689b      	ldr	r3, [r3, #8]
 800b94c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b950:	2b00      	cmp	r3, #0
 800b952:	d110      	bne.n	800b976 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b954:	69bb      	ldr	r3, [r7, #24]
 800b956:	015a      	lsls	r2, r3, #5
 800b958:	69fb      	ldr	r3, [r7, #28]
 800b95a:	4413      	add	r3, r2
 800b95c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	69ba      	ldr	r2, [r7, #24]
 800b964:	0151      	lsls	r1, r2, #5
 800b966:	69fa      	ldr	r2, [r7, #28]
 800b968:	440a      	add	r2, r1
 800b96a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b96e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b972:	6013      	str	r3, [r2, #0]
 800b974:	e00f      	b.n	800b996 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b976:	69bb      	ldr	r3, [r7, #24]
 800b978:	015a      	lsls	r2, r3, #5
 800b97a:	69fb      	ldr	r3, [r7, #28]
 800b97c:	4413      	add	r3, r2
 800b97e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	69ba      	ldr	r2, [r7, #24]
 800b986:	0151      	lsls	r1, r2, #5
 800b988:	69fa      	ldr	r2, [r7, #28]
 800b98a:	440a      	add	r2, r1
 800b98c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b994:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	6919      	ldr	r1, [r3, #16]
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	781a      	ldrb	r2, [r3, #0]
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	699b      	ldr	r3, [r3, #24]
 800b9a2:	b298      	uxth	r0, r3
 800b9a4:	79fb      	ldrb	r3, [r7, #7]
 800b9a6:	9300      	str	r3, [sp, #0]
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	68f8      	ldr	r0, [r7, #12]
 800b9ac:	f000 faea 	bl	800bf84 <USB_WritePacket>
 800b9b0:	e0d6      	b.n	800bb60 <USB_EPStartXfer+0x488>
 800b9b2:	bf00      	nop
 800b9b4:	e007ffff 	.word	0xe007ffff
 800b9b8:	fff80000 	.word	0xfff80000
 800b9bc:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b9c0:	69bb      	ldr	r3, [r7, #24]
 800b9c2:	015a      	lsls	r2, r3, #5
 800b9c4:	69fb      	ldr	r3, [r7, #28]
 800b9c6:	4413      	add	r3, r2
 800b9c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9cc:	691a      	ldr	r2, [r3, #16]
 800b9ce:	69bb      	ldr	r3, [r7, #24]
 800b9d0:	0159      	lsls	r1, r3, #5
 800b9d2:	69fb      	ldr	r3, [r7, #28]
 800b9d4:	440b      	add	r3, r1
 800b9d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9da:	4619      	mov	r1, r3
 800b9dc:	4b63      	ldr	r3, [pc, #396]	@ (800bb6c <USB_EPStartXfer+0x494>)
 800b9de:	4013      	ands	r3, r2
 800b9e0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b9e2:	69bb      	ldr	r3, [r7, #24]
 800b9e4:	015a      	lsls	r2, r3, #5
 800b9e6:	69fb      	ldr	r3, [r7, #28]
 800b9e8:	4413      	add	r3, r2
 800b9ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9ee:	691a      	ldr	r2, [r3, #16]
 800b9f0:	69bb      	ldr	r3, [r7, #24]
 800b9f2:	0159      	lsls	r1, r3, #5
 800b9f4:	69fb      	ldr	r3, [r7, #28]
 800b9f6:	440b      	add	r3, r1
 800b9f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	4b5c      	ldr	r3, [pc, #368]	@ (800bb70 <USB_EPStartXfer+0x498>)
 800ba00:	4013      	ands	r3, r2
 800ba02:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	699b      	ldr	r3, [r3, #24]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d123      	bne.n	800ba54 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ba0c:	69bb      	ldr	r3, [r7, #24]
 800ba0e:	015a      	lsls	r2, r3, #5
 800ba10:	69fb      	ldr	r3, [r7, #28]
 800ba12:	4413      	add	r3, r2
 800ba14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba18:	691a      	ldr	r2, [r3, #16]
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba22:	69b9      	ldr	r1, [r7, #24]
 800ba24:	0148      	lsls	r0, r1, #5
 800ba26:	69f9      	ldr	r1, [r7, #28]
 800ba28:	4401      	add	r1, r0
 800ba2a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ba2e:	4313      	orrs	r3, r2
 800ba30:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	015a      	lsls	r2, r3, #5
 800ba36:	69fb      	ldr	r3, [r7, #28]
 800ba38:	4413      	add	r3, r2
 800ba3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba3e:	691b      	ldr	r3, [r3, #16]
 800ba40:	69ba      	ldr	r2, [r7, #24]
 800ba42:	0151      	lsls	r1, r2, #5
 800ba44:	69fa      	ldr	r2, [r7, #28]
 800ba46:	440a      	add	r2, r1
 800ba48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba4c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ba50:	6113      	str	r3, [r2, #16]
 800ba52:	e037      	b.n	800bac4 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	699a      	ldr	r2, [r3, #24]
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	68db      	ldr	r3, [r3, #12]
 800ba5c:	4413      	add	r3, r2
 800ba5e:	1e5a      	subs	r2, r3, #1
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	68db      	ldr	r3, [r3, #12]
 800ba64:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba68:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	68db      	ldr	r3, [r3, #12]
 800ba6e:	8afa      	ldrh	r2, [r7, #22]
 800ba70:	fb03 f202 	mul.w	r2, r3, r2
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ba78:	69bb      	ldr	r3, [r7, #24]
 800ba7a:	015a      	lsls	r2, r3, #5
 800ba7c:	69fb      	ldr	r3, [r7, #28]
 800ba7e:	4413      	add	r3, r2
 800ba80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba84:	691a      	ldr	r2, [r3, #16]
 800ba86:	8afb      	ldrh	r3, [r7, #22]
 800ba88:	04d9      	lsls	r1, r3, #19
 800ba8a:	4b3a      	ldr	r3, [pc, #232]	@ (800bb74 <USB_EPStartXfer+0x49c>)
 800ba8c:	400b      	ands	r3, r1
 800ba8e:	69b9      	ldr	r1, [r7, #24]
 800ba90:	0148      	lsls	r0, r1, #5
 800ba92:	69f9      	ldr	r1, [r7, #28]
 800ba94:	4401      	add	r1, r0
 800ba96:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ba9e:	69bb      	ldr	r3, [r7, #24]
 800baa0:	015a      	lsls	r2, r3, #5
 800baa2:	69fb      	ldr	r3, [r7, #28]
 800baa4:	4413      	add	r3, r2
 800baa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800baaa:	691a      	ldr	r2, [r3, #16]
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	69db      	ldr	r3, [r3, #28]
 800bab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bab4:	69b9      	ldr	r1, [r7, #24]
 800bab6:	0148      	lsls	r0, r1, #5
 800bab8:	69f9      	ldr	r1, [r7, #28]
 800baba:	4401      	add	r1, r0
 800babc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800bac0:	4313      	orrs	r3, r2
 800bac2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bac4:	79fb      	ldrb	r3, [r7, #7]
 800bac6:	2b01      	cmp	r3, #1
 800bac8:	d10d      	bne.n	800bae6 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	691b      	ldr	r3, [r3, #16]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d009      	beq.n	800bae6 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	6919      	ldr	r1, [r3, #16]
 800bad6:	69bb      	ldr	r3, [r7, #24]
 800bad8:	015a      	lsls	r2, r3, #5
 800bada:	69fb      	ldr	r3, [r7, #28]
 800badc:	4413      	add	r3, r2
 800bade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bae2:	460a      	mov	r2, r1
 800bae4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	791b      	ldrb	r3, [r3, #4]
 800baea:	2b01      	cmp	r3, #1
 800baec:	d128      	bne.n	800bb40 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800baee:	69fb      	ldr	r3, [r7, #28]
 800baf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800baf4:	689b      	ldr	r3, [r3, #8]
 800baf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d110      	bne.n	800bb20 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bafe:	69bb      	ldr	r3, [r7, #24]
 800bb00:	015a      	lsls	r2, r3, #5
 800bb02:	69fb      	ldr	r3, [r7, #28]
 800bb04:	4413      	add	r3, r2
 800bb06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	69ba      	ldr	r2, [r7, #24]
 800bb0e:	0151      	lsls	r1, r2, #5
 800bb10:	69fa      	ldr	r2, [r7, #28]
 800bb12:	440a      	add	r2, r1
 800bb14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb18:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800bb1c:	6013      	str	r3, [r2, #0]
 800bb1e:	e00f      	b.n	800bb40 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bb20:	69bb      	ldr	r3, [r7, #24]
 800bb22:	015a      	lsls	r2, r3, #5
 800bb24:	69fb      	ldr	r3, [r7, #28]
 800bb26:	4413      	add	r3, r2
 800bb28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	69ba      	ldr	r2, [r7, #24]
 800bb30:	0151      	lsls	r1, r2, #5
 800bb32:	69fa      	ldr	r2, [r7, #28]
 800bb34:	440a      	add	r2, r1
 800bb36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bb3e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bb40:	69bb      	ldr	r3, [r7, #24]
 800bb42:	015a      	lsls	r2, r3, #5
 800bb44:	69fb      	ldr	r3, [r7, #28]
 800bb46:	4413      	add	r3, r2
 800bb48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	69ba      	ldr	r2, [r7, #24]
 800bb50:	0151      	lsls	r1, r2, #5
 800bb52:	69fa      	ldr	r2, [r7, #28]
 800bb54:	440a      	add	r2, r1
 800bb56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb5a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800bb5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bb60:	2300      	movs	r3, #0
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3720      	adds	r7, #32
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
 800bb6a:	bf00      	nop
 800bb6c:	fff80000 	.word	0xfff80000
 800bb70:	e007ffff 	.word	0xe007ffff
 800bb74:	1ff80000 	.word	0x1ff80000

0800bb78 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b087      	sub	sp, #28
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	60f8      	str	r0, [r7, #12]
 800bb80:	60b9      	str	r1, [r7, #8]
 800bb82:	4613      	mov	r3, r2
 800bb84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	781b      	ldrb	r3, [r3, #0]
 800bb8e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	785b      	ldrb	r3, [r3, #1]
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	f040 80ce 	bne.w	800bd36 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	699b      	ldr	r3, [r3, #24]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d132      	bne.n	800bc08 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	015a      	lsls	r2, r3, #5
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	4413      	add	r3, r2
 800bbaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbae:	691a      	ldr	r2, [r3, #16]
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	0159      	lsls	r1, r3, #5
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	440b      	add	r3, r1
 800bbb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbbc:	4619      	mov	r1, r3
 800bbbe:	4b9a      	ldr	r3, [pc, #616]	@ (800be28 <USB_EP0StartXfer+0x2b0>)
 800bbc0:	4013      	ands	r3, r2
 800bbc2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	015a      	lsls	r2, r3, #5
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	4413      	add	r3, r2
 800bbcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbd0:	691b      	ldr	r3, [r3, #16]
 800bbd2:	693a      	ldr	r2, [r7, #16]
 800bbd4:	0151      	lsls	r1, r2, #5
 800bbd6:	697a      	ldr	r2, [r7, #20]
 800bbd8:	440a      	add	r2, r1
 800bbda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bbde:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bbe2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	015a      	lsls	r2, r3, #5
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	4413      	add	r3, r2
 800bbec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbf0:	691a      	ldr	r2, [r3, #16]
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	0159      	lsls	r1, r3, #5
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	440b      	add	r3, r1
 800bbfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbfe:	4619      	mov	r1, r3
 800bc00:	4b8a      	ldr	r3, [pc, #552]	@ (800be2c <USB_EP0StartXfer+0x2b4>)
 800bc02:	4013      	ands	r3, r2
 800bc04:	610b      	str	r3, [r1, #16]
 800bc06:	e04e      	b.n	800bca6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	015a      	lsls	r2, r3, #5
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	4413      	add	r3, r2
 800bc10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc14:	691a      	ldr	r2, [r3, #16]
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	0159      	lsls	r1, r3, #5
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	440b      	add	r3, r1
 800bc1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc22:	4619      	mov	r1, r3
 800bc24:	4b81      	ldr	r3, [pc, #516]	@ (800be2c <USB_EP0StartXfer+0x2b4>)
 800bc26:	4013      	ands	r3, r2
 800bc28:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	015a      	lsls	r2, r3, #5
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	4413      	add	r3, r2
 800bc32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc36:	691a      	ldr	r2, [r3, #16]
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	0159      	lsls	r1, r3, #5
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	440b      	add	r3, r1
 800bc40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc44:	4619      	mov	r1, r3
 800bc46:	4b78      	ldr	r3, [pc, #480]	@ (800be28 <USB_EP0StartXfer+0x2b0>)
 800bc48:	4013      	ands	r3, r2
 800bc4a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	699a      	ldr	r2, [r3, #24]
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	68db      	ldr	r3, [r3, #12]
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d903      	bls.n	800bc60 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	68da      	ldr	r2, [r3, #12]
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	015a      	lsls	r2, r3, #5
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	4413      	add	r3, r2
 800bc68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc6c:	691b      	ldr	r3, [r3, #16]
 800bc6e:	693a      	ldr	r2, [r7, #16]
 800bc70:	0151      	lsls	r1, r2, #5
 800bc72:	697a      	ldr	r2, [r7, #20]
 800bc74:	440a      	add	r2, r1
 800bc76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bc7a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bc7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	015a      	lsls	r2, r3, #5
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	4413      	add	r3, r2
 800bc88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc8c:	691a      	ldr	r2, [r3, #16]
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	699b      	ldr	r3, [r3, #24]
 800bc92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc96:	6939      	ldr	r1, [r7, #16]
 800bc98:	0148      	lsls	r0, r1, #5
 800bc9a:	6979      	ldr	r1, [r7, #20]
 800bc9c:	4401      	add	r1, r0
 800bc9e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800bca2:	4313      	orrs	r3, r2
 800bca4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bca6:	79fb      	ldrb	r3, [r7, #7]
 800bca8:	2b01      	cmp	r3, #1
 800bcaa:	d11e      	bne.n	800bcea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	695b      	ldr	r3, [r3, #20]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d009      	beq.n	800bcc8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	015a      	lsls	r2, r3, #5
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	4413      	add	r3, r2
 800bcbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	695b      	ldr	r3, [r3, #20]
 800bcc6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	015a      	lsls	r2, r3, #5
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	4413      	add	r3, r2
 800bcd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	693a      	ldr	r2, [r7, #16]
 800bcd8:	0151      	lsls	r1, r2, #5
 800bcda:	697a      	ldr	r2, [r7, #20]
 800bcdc:	440a      	add	r2, r1
 800bcde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bce2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800bce6:	6013      	str	r3, [r2, #0]
 800bce8:	e097      	b.n	800be1a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	015a      	lsls	r2, r3, #5
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	4413      	add	r3, r2
 800bcf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	693a      	ldr	r2, [r7, #16]
 800bcfa:	0151      	lsls	r1, r2, #5
 800bcfc:	697a      	ldr	r2, [r7, #20]
 800bcfe:	440a      	add	r2, r1
 800bd00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bd04:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800bd08:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	699b      	ldr	r3, [r3, #24]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	f000 8083 	beq.w	800be1a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	f003 030f 	and.w	r3, r3, #15
 800bd24:	2101      	movs	r1, #1
 800bd26:	fa01 f303 	lsl.w	r3, r1, r3
 800bd2a:	6979      	ldr	r1, [r7, #20]
 800bd2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bd30:	4313      	orrs	r3, r2
 800bd32:	634b      	str	r3, [r1, #52]	@ 0x34
 800bd34:	e071      	b.n	800be1a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	015a      	lsls	r2, r3, #5
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	4413      	add	r3, r2
 800bd3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd42:	691a      	ldr	r2, [r3, #16]
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	0159      	lsls	r1, r3, #5
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	440b      	add	r3, r1
 800bd4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd50:	4619      	mov	r1, r3
 800bd52:	4b36      	ldr	r3, [pc, #216]	@ (800be2c <USB_EP0StartXfer+0x2b4>)
 800bd54:	4013      	ands	r3, r2
 800bd56:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	015a      	lsls	r2, r3, #5
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	4413      	add	r3, r2
 800bd60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd64:	691a      	ldr	r2, [r3, #16]
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	0159      	lsls	r1, r3, #5
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	440b      	add	r3, r1
 800bd6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd72:	4619      	mov	r1, r3
 800bd74:	4b2c      	ldr	r3, [pc, #176]	@ (800be28 <USB_EP0StartXfer+0x2b0>)
 800bd76:	4013      	ands	r3, r2
 800bd78:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	699b      	ldr	r3, [r3, #24]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d003      	beq.n	800bd8a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	68da      	ldr	r2, [r3, #12]
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	68da      	ldr	r2, [r3, #12]
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	015a      	lsls	r2, r3, #5
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	4413      	add	r3, r2
 800bd9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd9e:	691b      	ldr	r3, [r3, #16]
 800bda0:	693a      	ldr	r2, [r7, #16]
 800bda2:	0151      	lsls	r1, r2, #5
 800bda4:	697a      	ldr	r2, [r7, #20]
 800bda6:	440a      	add	r2, r1
 800bda8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bdac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bdb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	015a      	lsls	r2, r3, #5
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	4413      	add	r3, r2
 800bdba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bdbe:	691a      	ldr	r2, [r3, #16]
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	69db      	ldr	r3, [r3, #28]
 800bdc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bdc8:	6939      	ldr	r1, [r7, #16]
 800bdca:	0148      	lsls	r0, r1, #5
 800bdcc:	6979      	ldr	r1, [r7, #20]
 800bdce:	4401      	add	r1, r0
 800bdd0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800bdd4:	4313      	orrs	r3, r2
 800bdd6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800bdd8:	79fb      	ldrb	r3, [r7, #7]
 800bdda:	2b01      	cmp	r3, #1
 800bddc:	d10d      	bne.n	800bdfa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	691b      	ldr	r3, [r3, #16]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d009      	beq.n	800bdfa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	6919      	ldr	r1, [r3, #16]
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	015a      	lsls	r2, r3, #5
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	4413      	add	r3, r2
 800bdf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bdf6:	460a      	mov	r2, r1
 800bdf8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	015a      	lsls	r2, r3, #5
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	4413      	add	r3, r2
 800be02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	693a      	ldr	r2, [r7, #16]
 800be0a:	0151      	lsls	r1, r2, #5
 800be0c:	697a      	ldr	r2, [r7, #20]
 800be0e:	440a      	add	r2, r1
 800be10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800be14:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800be18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800be1a:	2300      	movs	r3, #0
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	371c      	adds	r7, #28
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr
 800be28:	e007ffff 	.word	0xe007ffff
 800be2c:	fff80000 	.word	0xfff80000

0800be30 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800be30:	b480      	push	{r7}
 800be32:	b087      	sub	sp, #28
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800be3a:	2300      	movs	r3, #0
 800be3c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800be3e:	2300      	movs	r3, #0
 800be40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	785b      	ldrb	r3, [r3, #1]
 800be4a:	2b01      	cmp	r3, #1
 800be4c:	d14a      	bne.n	800bee4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	015a      	lsls	r2, r3, #5
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	4413      	add	r3, r2
 800be58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800be62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800be66:	f040 8086 	bne.w	800bf76 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	015a      	lsls	r2, r3, #5
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	4413      	add	r3, r2
 800be74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	683a      	ldr	r2, [r7, #0]
 800be7c:	7812      	ldrb	r2, [r2, #0]
 800be7e:	0151      	lsls	r1, r2, #5
 800be80:	693a      	ldr	r2, [r7, #16]
 800be82:	440a      	add	r2, r1
 800be84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800be88:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800be8c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	781b      	ldrb	r3, [r3, #0]
 800be92:	015a      	lsls	r2, r3, #5
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	4413      	add	r3, r2
 800be98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	683a      	ldr	r2, [r7, #0]
 800bea0:	7812      	ldrb	r2, [r2, #0]
 800bea2:	0151      	lsls	r1, r2, #5
 800bea4:	693a      	ldr	r2, [r7, #16]
 800bea6:	440a      	add	r2, r1
 800bea8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800beac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800beb0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	3301      	adds	r3, #1
 800beb6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	f242 7210 	movw	r2, #10000	@ 0x2710
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d902      	bls.n	800bec8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800bec2:	2301      	movs	r3, #1
 800bec4:	75fb      	strb	r3, [r7, #23]
          break;
 800bec6:	e056      	b.n	800bf76 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	015a      	lsls	r2, r3, #5
 800bece:	693b      	ldr	r3, [r7, #16]
 800bed0:	4413      	add	r3, r2
 800bed2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bedc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bee0:	d0e7      	beq.n	800beb2 <USB_EPStopXfer+0x82>
 800bee2:	e048      	b.n	800bf76 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	781b      	ldrb	r3, [r3, #0]
 800bee8:	015a      	lsls	r2, r3, #5
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	4413      	add	r3, r2
 800beee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bef8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800befc:	d13b      	bne.n	800bf76 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	781b      	ldrb	r3, [r3, #0]
 800bf02:	015a      	lsls	r2, r3, #5
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	4413      	add	r3, r2
 800bf08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	683a      	ldr	r2, [r7, #0]
 800bf10:	7812      	ldrb	r2, [r2, #0]
 800bf12:	0151      	lsls	r1, r2, #5
 800bf14:	693a      	ldr	r2, [r7, #16]
 800bf16:	440a      	add	r2, r1
 800bf18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bf1c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bf20:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	781b      	ldrb	r3, [r3, #0]
 800bf26:	015a      	lsls	r2, r3, #5
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	4413      	add	r3, r2
 800bf2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	683a      	ldr	r2, [r7, #0]
 800bf34:	7812      	ldrb	r2, [r2, #0]
 800bf36:	0151      	lsls	r1, r2, #5
 800bf38:	693a      	ldr	r2, [r7, #16]
 800bf3a:	440a      	add	r2, r1
 800bf3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bf40:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bf44:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	3301      	adds	r3, #1
 800bf4a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d902      	bls.n	800bf5c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800bf56:	2301      	movs	r3, #1
 800bf58:	75fb      	strb	r3, [r7, #23]
          break;
 800bf5a:	e00c      	b.n	800bf76 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	781b      	ldrb	r3, [r3, #0]
 800bf60:	015a      	lsls	r2, r3, #5
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	4413      	add	r3, r2
 800bf66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bf70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bf74:	d0e7      	beq.n	800bf46 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800bf76:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	371c      	adds	r7, #28
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr

0800bf84 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b089      	sub	sp, #36	@ 0x24
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	60f8      	str	r0, [r7, #12]
 800bf8c:	60b9      	str	r1, [r7, #8]
 800bf8e:	4611      	mov	r1, r2
 800bf90:	461a      	mov	r2, r3
 800bf92:	460b      	mov	r3, r1
 800bf94:	71fb      	strb	r3, [r7, #7]
 800bf96:	4613      	mov	r3, r2
 800bf98:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bfa2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d123      	bne.n	800bff2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bfaa:	88bb      	ldrh	r3, [r7, #4]
 800bfac:	3303      	adds	r3, #3
 800bfae:	089b      	lsrs	r3, r3, #2
 800bfb0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	61bb      	str	r3, [r7, #24]
 800bfb6:	e018      	b.n	800bfea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bfb8:	79fb      	ldrb	r3, [r7, #7]
 800bfba:	031a      	lsls	r2, r3, #12
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	4413      	add	r3, r2
 800bfc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bfc4:	461a      	mov	r2, r3
 800bfc6:	69fb      	ldr	r3, [r7, #28]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bfcc:	69fb      	ldr	r3, [r7, #28]
 800bfce:	3301      	adds	r3, #1
 800bfd0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bfd2:	69fb      	ldr	r3, [r7, #28]
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bfd8:	69fb      	ldr	r3, [r7, #28]
 800bfda:	3301      	adds	r3, #1
 800bfdc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bfde:	69fb      	ldr	r3, [r7, #28]
 800bfe0:	3301      	adds	r3, #1
 800bfe2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bfe4:	69bb      	ldr	r3, [r7, #24]
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	61bb      	str	r3, [r7, #24]
 800bfea:	69ba      	ldr	r2, [r7, #24]
 800bfec:	693b      	ldr	r3, [r7, #16]
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d3e2      	bcc.n	800bfb8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bff2:	2300      	movs	r3, #0
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	3724      	adds	r7, #36	@ 0x24
 800bff8:	46bd      	mov	sp, r7
 800bffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffe:	4770      	bx	lr

0800c000 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c000:	b480      	push	{r7}
 800c002:	b08b      	sub	sp, #44	@ 0x2c
 800c004:	af00      	add	r7, sp, #0
 800c006:	60f8      	str	r0, [r7, #12]
 800c008:	60b9      	str	r1, [r7, #8]
 800c00a:	4613      	mov	r3, r2
 800c00c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c016:	88fb      	ldrh	r3, [r7, #6]
 800c018:	089b      	lsrs	r3, r3, #2
 800c01a:	b29b      	uxth	r3, r3
 800c01c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c01e:	88fb      	ldrh	r3, [r7, #6]
 800c020:	f003 0303 	and.w	r3, r3, #3
 800c024:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c026:	2300      	movs	r3, #0
 800c028:	623b      	str	r3, [r7, #32]
 800c02a:	e014      	b.n	800c056 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c02c:	69bb      	ldr	r3, [r7, #24]
 800c02e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c032:	681a      	ldr	r2, [r3, #0]
 800c034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c036:	601a      	str	r2, [r3, #0]
    pDest++;
 800c038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c03a:	3301      	adds	r3, #1
 800c03c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c040:	3301      	adds	r3, #1
 800c042:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c046:	3301      	adds	r3, #1
 800c048:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c04c:	3301      	adds	r3, #1
 800c04e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800c050:	6a3b      	ldr	r3, [r7, #32]
 800c052:	3301      	adds	r3, #1
 800c054:	623b      	str	r3, [r7, #32]
 800c056:	6a3a      	ldr	r2, [r7, #32]
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d3e6      	bcc.n	800c02c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c05e:	8bfb      	ldrh	r3, [r7, #30]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d01e      	beq.n	800c0a2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c064:	2300      	movs	r3, #0
 800c066:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c068:	69bb      	ldr	r3, [r7, #24]
 800c06a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c06e:	461a      	mov	r2, r3
 800c070:	f107 0310 	add.w	r3, r7, #16
 800c074:	6812      	ldr	r2, [r2, #0]
 800c076:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c078:	693a      	ldr	r2, [r7, #16]
 800c07a:	6a3b      	ldr	r3, [r7, #32]
 800c07c:	b2db      	uxtb	r3, r3
 800c07e:	00db      	lsls	r3, r3, #3
 800c080:	fa22 f303 	lsr.w	r3, r2, r3
 800c084:	b2da      	uxtb	r2, r3
 800c086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c088:	701a      	strb	r2, [r3, #0]
      i++;
 800c08a:	6a3b      	ldr	r3, [r7, #32]
 800c08c:	3301      	adds	r3, #1
 800c08e:	623b      	str	r3, [r7, #32]
      pDest++;
 800c090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c092:	3301      	adds	r3, #1
 800c094:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800c096:	8bfb      	ldrh	r3, [r7, #30]
 800c098:	3b01      	subs	r3, #1
 800c09a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c09c:	8bfb      	ldrh	r3, [r7, #30]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d1ea      	bne.n	800c078 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c0a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	372c      	adds	r7, #44	@ 0x2c
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ae:	4770      	bx	lr

0800c0b0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b085      	sub	sp, #20
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	781b      	ldrb	r3, [r3, #0]
 800c0c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	785b      	ldrb	r3, [r3, #1]
 800c0c8:	2b01      	cmp	r3, #1
 800c0ca:	d12c      	bne.n	800c126 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	015a      	lsls	r2, r3, #5
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	4413      	add	r3, r2
 800c0d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	db12      	blt.n	800c104 <USB_EPSetStall+0x54>
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d00f      	beq.n	800c104 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	015a      	lsls	r2, r3, #5
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	4413      	add	r3, r2
 800c0ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	68ba      	ldr	r2, [r7, #8]
 800c0f4:	0151      	lsls	r1, r2, #5
 800c0f6:	68fa      	ldr	r2, [r7, #12]
 800c0f8:	440a      	add	r2, r1
 800c0fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c0fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c102:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	015a      	lsls	r2, r3, #5
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	4413      	add	r3, r2
 800c10c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	68ba      	ldr	r2, [r7, #8]
 800c114:	0151      	lsls	r1, r2, #5
 800c116:	68fa      	ldr	r2, [r7, #12]
 800c118:	440a      	add	r2, r1
 800c11a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c11e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c122:	6013      	str	r3, [r2, #0]
 800c124:	e02b      	b.n	800c17e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	015a      	lsls	r2, r3, #5
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	4413      	add	r3, r2
 800c12e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	2b00      	cmp	r3, #0
 800c136:	db12      	blt.n	800c15e <USB_EPSetStall+0xae>
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d00f      	beq.n	800c15e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	015a      	lsls	r2, r3, #5
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	4413      	add	r3, r2
 800c146:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	68ba      	ldr	r2, [r7, #8]
 800c14e:	0151      	lsls	r1, r2, #5
 800c150:	68fa      	ldr	r2, [r7, #12]
 800c152:	440a      	add	r2, r1
 800c154:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c158:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c15c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	015a      	lsls	r2, r3, #5
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	4413      	add	r3, r2
 800c166:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	68ba      	ldr	r2, [r7, #8]
 800c16e:	0151      	lsls	r1, r2, #5
 800c170:	68fa      	ldr	r2, [r7, #12]
 800c172:	440a      	add	r2, r1
 800c174:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c178:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c17c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c17e:	2300      	movs	r3, #0
}
 800c180:	4618      	mov	r0, r3
 800c182:	3714      	adds	r7, #20
 800c184:	46bd      	mov	sp, r7
 800c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18a:	4770      	bx	lr

0800c18c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b085      	sub	sp, #20
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	781b      	ldrb	r3, [r3, #0]
 800c19e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	785b      	ldrb	r3, [r3, #1]
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	d128      	bne.n	800c1fa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	015a      	lsls	r2, r3, #5
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	4413      	add	r3, r2
 800c1b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	68ba      	ldr	r2, [r7, #8]
 800c1b8:	0151      	lsls	r1, r2, #5
 800c1ba:	68fa      	ldr	r2, [r7, #12]
 800c1bc:	440a      	add	r2, r1
 800c1be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c1c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c1c6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	791b      	ldrb	r3, [r3, #4]
 800c1cc:	2b03      	cmp	r3, #3
 800c1ce:	d003      	beq.n	800c1d8 <USB_EPClearStall+0x4c>
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	791b      	ldrb	r3, [r3, #4]
 800c1d4:	2b02      	cmp	r3, #2
 800c1d6:	d138      	bne.n	800c24a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	015a      	lsls	r2, r3, #5
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	4413      	add	r3, r2
 800c1e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	68ba      	ldr	r2, [r7, #8]
 800c1e8:	0151      	lsls	r1, r2, #5
 800c1ea:	68fa      	ldr	r2, [r7, #12]
 800c1ec:	440a      	add	r2, r1
 800c1ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c1f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c1f6:	6013      	str	r3, [r2, #0]
 800c1f8:	e027      	b.n	800c24a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	015a      	lsls	r2, r3, #5
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	4413      	add	r3, r2
 800c202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	68ba      	ldr	r2, [r7, #8]
 800c20a:	0151      	lsls	r1, r2, #5
 800c20c:	68fa      	ldr	r2, [r7, #12]
 800c20e:	440a      	add	r2, r1
 800c210:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c214:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c218:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	791b      	ldrb	r3, [r3, #4]
 800c21e:	2b03      	cmp	r3, #3
 800c220:	d003      	beq.n	800c22a <USB_EPClearStall+0x9e>
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	791b      	ldrb	r3, [r3, #4]
 800c226:	2b02      	cmp	r3, #2
 800c228:	d10f      	bne.n	800c24a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	015a      	lsls	r2, r3, #5
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	4413      	add	r3, r2
 800c232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	68ba      	ldr	r2, [r7, #8]
 800c23a:	0151      	lsls	r1, r2, #5
 800c23c:	68fa      	ldr	r2, [r7, #12]
 800c23e:	440a      	add	r2, r1
 800c240:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c244:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c248:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c24a:	2300      	movs	r3, #0
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3714      	adds	r7, #20
 800c250:	46bd      	mov	sp, r7
 800c252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c256:	4770      	bx	lr

0800c258 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c258:	b480      	push	{r7}
 800c25a:	b085      	sub	sp, #20
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	460b      	mov	r3, r1
 800c262:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	68fa      	ldr	r2, [r7, #12]
 800c272:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c276:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c27a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c282:	681a      	ldr	r2, [r3, #0]
 800c284:	78fb      	ldrb	r3, [r7, #3]
 800c286:	011b      	lsls	r3, r3, #4
 800c288:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800c28c:	68f9      	ldr	r1, [r7, #12]
 800c28e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c292:	4313      	orrs	r3, r2
 800c294:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c296:	2300      	movs	r3, #0
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3714      	adds	r7, #20
 800c29c:	46bd      	mov	sp, r7
 800c29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a2:	4770      	bx	lr

0800c2a4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b085      	sub	sp, #20
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	68fa      	ldr	r2, [r7, #12]
 800c2ba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c2be:	f023 0303 	bic.w	r3, r3, #3
 800c2c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	68fa      	ldr	r2, [r7, #12]
 800c2ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c2d2:	f023 0302 	bic.w	r3, r3, #2
 800c2d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c2d8:	2300      	movs	r3, #0
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3714      	adds	r7, #20
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e4:	4770      	bx	lr

0800c2e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c2e6:	b480      	push	{r7}
 800c2e8:	b085      	sub	sp, #20
 800c2ea:	af00      	add	r7, sp, #0
 800c2ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	68fa      	ldr	r2, [r7, #12]
 800c2fc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c300:	f023 0303 	bic.w	r3, r3, #3
 800c304:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c30c:	685b      	ldr	r3, [r3, #4]
 800c30e:	68fa      	ldr	r2, [r7, #12]
 800c310:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c314:	f043 0302 	orr.w	r3, r3, #2
 800c318:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c31a:	2300      	movs	r3, #0
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3714      	adds	r7, #20
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr

0800c328 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c328:	b480      	push	{r7}
 800c32a:	b085      	sub	sp, #20
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	695b      	ldr	r3, [r3, #20]
 800c334:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	699b      	ldr	r3, [r3, #24]
 800c33a:	68fa      	ldr	r2, [r7, #12]
 800c33c:	4013      	ands	r3, r2
 800c33e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c340:	68fb      	ldr	r3, [r7, #12]
}
 800c342:	4618      	mov	r0, r3
 800c344:	3714      	adds	r7, #20
 800c346:	46bd      	mov	sp, r7
 800c348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34c:	4770      	bx	lr

0800c34e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c34e:	b480      	push	{r7}
 800c350:	b085      	sub	sp, #20
 800c352:	af00      	add	r7, sp, #0
 800c354:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c360:	699b      	ldr	r3, [r3, #24]
 800c362:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c36a:	69db      	ldr	r3, [r3, #28]
 800c36c:	68ba      	ldr	r2, [r7, #8]
 800c36e:	4013      	ands	r3, r2
 800c370:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	0c1b      	lsrs	r3, r3, #16
}
 800c376:	4618      	mov	r0, r3
 800c378:	3714      	adds	r7, #20
 800c37a:	46bd      	mov	sp, r7
 800c37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c380:	4770      	bx	lr

0800c382 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c382:	b480      	push	{r7}
 800c384:	b085      	sub	sp, #20
 800c386:	af00      	add	r7, sp, #0
 800c388:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c394:	699b      	ldr	r3, [r3, #24]
 800c396:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c39e:	69db      	ldr	r3, [r3, #28]
 800c3a0:	68ba      	ldr	r2, [r7, #8]
 800c3a2:	4013      	ands	r3, r2
 800c3a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	b29b      	uxth	r3, r3
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3714      	adds	r7, #20
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b4:	4770      	bx	lr

0800c3b6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c3b6:	b480      	push	{r7}
 800c3b8:	b085      	sub	sp, #20
 800c3ba:	af00      	add	r7, sp, #0
 800c3bc:	6078      	str	r0, [r7, #4]
 800c3be:	460b      	mov	r3, r1
 800c3c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c3c6:	78fb      	ldrb	r3, [r7, #3]
 800c3c8:	015a      	lsls	r2, r3, #5
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	4413      	add	r3, r2
 800c3ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3d2:	689b      	ldr	r3, [r3, #8]
 800c3d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3dc:	695b      	ldr	r3, [r3, #20]
 800c3de:	68ba      	ldr	r2, [r7, #8]
 800c3e0:	4013      	ands	r3, r2
 800c3e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c3e4:	68bb      	ldr	r3, [r7, #8]
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3714      	adds	r7, #20
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr

0800c3f2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c3f2:	b480      	push	{r7}
 800c3f4:	b087      	sub	sp, #28
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	6078      	str	r0, [r7, #4]
 800c3fa:	460b      	mov	r3, r1
 800c3fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c408:	691b      	ldr	r3, [r3, #16]
 800c40a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c40c:	697b      	ldr	r3, [r7, #20]
 800c40e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c414:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c416:	78fb      	ldrb	r3, [r7, #3]
 800c418:	f003 030f 	and.w	r3, r3, #15
 800c41c:	68fa      	ldr	r2, [r7, #12]
 800c41e:	fa22 f303 	lsr.w	r3, r2, r3
 800c422:	01db      	lsls	r3, r3, #7
 800c424:	b2db      	uxtb	r3, r3
 800c426:	693a      	ldr	r2, [r7, #16]
 800c428:	4313      	orrs	r3, r2
 800c42a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c42c:	78fb      	ldrb	r3, [r7, #3]
 800c42e:	015a      	lsls	r2, r3, #5
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	4413      	add	r3, r2
 800c434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c438:	689b      	ldr	r3, [r3, #8]
 800c43a:	693a      	ldr	r2, [r7, #16]
 800c43c:	4013      	ands	r3, r2
 800c43e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c440:	68bb      	ldr	r3, [r7, #8]
}
 800c442:	4618      	mov	r0, r3
 800c444:	371c      	adds	r7, #28
 800c446:	46bd      	mov	sp, r7
 800c448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44c:	4770      	bx	lr

0800c44e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c44e:	b480      	push	{r7}
 800c450:	b083      	sub	sp, #12
 800c452:	af00      	add	r7, sp, #0
 800c454:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	695b      	ldr	r3, [r3, #20]
 800c45a:	f003 0301 	and.w	r3, r3, #1
}
 800c45e:	4618      	mov	r0, r3
 800c460:	370c      	adds	r7, #12
 800c462:	46bd      	mov	sp, r7
 800c464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c468:	4770      	bx	lr
	...

0800c46c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c46c:	b480      	push	{r7}
 800c46e:	b085      	sub	sp, #20
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c47e:	681a      	ldr	r2, [r3, #0]
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c486:	4619      	mov	r1, r3
 800c488:	4b09      	ldr	r3, [pc, #36]	@ (800c4b0 <USB_ActivateSetup+0x44>)
 800c48a:	4013      	ands	r3, r2
 800c48c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c494:	685b      	ldr	r3, [r3, #4]
 800c496:	68fa      	ldr	r2, [r7, #12]
 800c498:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c49c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c4a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c4a2:	2300      	movs	r3, #0
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3714      	adds	r7, #20
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr
 800c4b0:	fffff800 	.word	0xfffff800

0800c4b4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b087      	sub	sp, #28
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	60f8      	str	r0, [r7, #12]
 800c4bc:	460b      	mov	r3, r1
 800c4be:	607a      	str	r2, [r7, #4]
 800c4c0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	333c      	adds	r3, #60	@ 0x3c
 800c4ca:	3304      	adds	r3, #4
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	4a26      	ldr	r2, [pc, #152]	@ (800c56c <USB_EP0_OutStart+0xb8>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d90a      	bls.n	800c4ee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c4e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c4e8:	d101      	bne.n	800c4ee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	e037      	b.n	800c55e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4f4:	461a      	mov	r2, r3
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c500:	691b      	ldr	r3, [r3, #16]
 800c502:	697a      	ldr	r2, [r7, #20]
 800c504:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c508:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c50c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c514:	691b      	ldr	r3, [r3, #16]
 800c516:	697a      	ldr	r2, [r7, #20]
 800c518:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c51c:	f043 0318 	orr.w	r3, r3, #24
 800c520:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c528:	691b      	ldr	r3, [r3, #16]
 800c52a:	697a      	ldr	r2, [r7, #20]
 800c52c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c530:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800c534:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c536:	7afb      	ldrb	r3, [r7, #11]
 800c538:	2b01      	cmp	r3, #1
 800c53a:	d10f      	bne.n	800c55c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c542:	461a      	mov	r2, r3
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	697a      	ldr	r2, [r7, #20]
 800c552:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c556:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800c55a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c55c:	2300      	movs	r3, #0
}
 800c55e:	4618      	mov	r0, r3
 800c560:	371c      	adds	r7, #28
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr
 800c56a:	bf00      	nop
 800c56c:	4f54300a 	.word	0x4f54300a

0800c570 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c570:	b480      	push	{r7}
 800c572:	b085      	sub	sp, #20
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c578:	2300      	movs	r3, #0
 800c57a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	3301      	adds	r3, #1
 800c580:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	4a13      	ldr	r2, [pc, #76]	@ (800c5d4 <USB_CoreReset+0x64>)
 800c586:	4293      	cmp	r3, r2
 800c588:	d901      	bls.n	800c58e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c58a:	2303      	movs	r3, #3
 800c58c:	e01b      	b.n	800c5c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	691b      	ldr	r3, [r3, #16]
 800c592:	2b00      	cmp	r3, #0
 800c594:	daf2      	bge.n	800c57c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c596:	2300      	movs	r3, #0
 800c598:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	691b      	ldr	r3, [r3, #16]
 800c59e:	f043 0201 	orr.w	r2, r3, #1
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	3301      	adds	r3, #1
 800c5aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	4a09      	ldr	r2, [pc, #36]	@ (800c5d4 <USB_CoreReset+0x64>)
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d901      	bls.n	800c5b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c5b4:	2303      	movs	r3, #3
 800c5b6:	e006      	b.n	800c5c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	691b      	ldr	r3, [r3, #16]
 800c5bc:	f003 0301 	and.w	r3, r3, #1
 800c5c0:	2b01      	cmp	r3, #1
 800c5c2:	d0f0      	beq.n	800c5a6 <USB_CoreReset+0x36>

  return HAL_OK;
 800c5c4:	2300      	movs	r3, #0
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3714      	adds	r7, #20
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d0:	4770      	bx	lr
 800c5d2:	bf00      	nop
 800c5d4:	00030d40 	.word	0x00030d40

0800c5d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b084      	sub	sp, #16
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	460b      	mov	r3, r1
 800c5e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c5e4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800c5e8:	f002 fd88 	bl	800f0fc <malloc>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d109      	bne.n	800c60a <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	32b0      	adds	r2, #176	@ 0xb0
 800c600:	2100      	movs	r1, #0
 800c602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c606:	2302      	movs	r3, #2
 800c608:	e0d4      	b.n	800c7b4 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c60a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800c60e:	2100      	movs	r1, #0
 800c610:	68f8      	ldr	r0, [r7, #12]
 800c612:	f002 feb5 	bl	800f380 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	32b0      	adds	r2, #176	@ 0xb0
 800c620:	68f9      	ldr	r1, [r7, #12]
 800c622:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	32b0      	adds	r2, #176	@ 0xb0
 800c630:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	7c1b      	ldrb	r3, [r3, #16]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d138      	bne.n	800c6b4 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c642:	4b5e      	ldr	r3, [pc, #376]	@ (800c7bc <USBD_CDC_Init+0x1e4>)
 800c644:	7819      	ldrb	r1, [r3, #0]
 800c646:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c64a:	2202      	movs	r2, #2
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f002 fbae 	bl	800edae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c652:	4b5a      	ldr	r3, [pc, #360]	@ (800c7bc <USBD_CDC_Init+0x1e4>)
 800c654:	781b      	ldrb	r3, [r3, #0]
 800c656:	f003 020f 	and.w	r2, r3, #15
 800c65a:	6879      	ldr	r1, [r7, #4]
 800c65c:	4613      	mov	r3, r2
 800c65e:	009b      	lsls	r3, r3, #2
 800c660:	4413      	add	r3, r2
 800c662:	009b      	lsls	r3, r3, #2
 800c664:	440b      	add	r3, r1
 800c666:	3324      	adds	r3, #36	@ 0x24
 800c668:	2201      	movs	r2, #1
 800c66a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c66c:	4b54      	ldr	r3, [pc, #336]	@ (800c7c0 <USBD_CDC_Init+0x1e8>)
 800c66e:	7819      	ldrb	r1, [r3, #0]
 800c670:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c674:	2202      	movs	r2, #2
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f002 fb99 	bl	800edae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c67c:	4b50      	ldr	r3, [pc, #320]	@ (800c7c0 <USBD_CDC_Init+0x1e8>)
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	f003 020f 	and.w	r2, r3, #15
 800c684:	6879      	ldr	r1, [r7, #4]
 800c686:	4613      	mov	r3, r2
 800c688:	009b      	lsls	r3, r3, #2
 800c68a:	4413      	add	r3, r2
 800c68c:	009b      	lsls	r3, r3, #2
 800c68e:	440b      	add	r3, r1
 800c690:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c694:	2201      	movs	r2, #1
 800c696:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c698:	4b4a      	ldr	r3, [pc, #296]	@ (800c7c4 <USBD_CDC_Init+0x1ec>)
 800c69a:	781b      	ldrb	r3, [r3, #0]
 800c69c:	f003 020f 	and.w	r2, r3, #15
 800c6a0:	6879      	ldr	r1, [r7, #4]
 800c6a2:	4613      	mov	r3, r2
 800c6a4:	009b      	lsls	r3, r3, #2
 800c6a6:	4413      	add	r3, r2
 800c6a8:	009b      	lsls	r3, r3, #2
 800c6aa:	440b      	add	r3, r1
 800c6ac:	3326      	adds	r3, #38	@ 0x26
 800c6ae:	2210      	movs	r2, #16
 800c6b0:	801a      	strh	r2, [r3, #0]
 800c6b2:	e035      	b.n	800c720 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c6b4:	4b41      	ldr	r3, [pc, #260]	@ (800c7bc <USBD_CDC_Init+0x1e4>)
 800c6b6:	7819      	ldrb	r1, [r3, #0]
 800c6b8:	2340      	movs	r3, #64	@ 0x40
 800c6ba:	2202      	movs	r2, #2
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f002 fb76 	bl	800edae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c6c2:	4b3e      	ldr	r3, [pc, #248]	@ (800c7bc <USBD_CDC_Init+0x1e4>)
 800c6c4:	781b      	ldrb	r3, [r3, #0]
 800c6c6:	f003 020f 	and.w	r2, r3, #15
 800c6ca:	6879      	ldr	r1, [r7, #4]
 800c6cc:	4613      	mov	r3, r2
 800c6ce:	009b      	lsls	r3, r3, #2
 800c6d0:	4413      	add	r3, r2
 800c6d2:	009b      	lsls	r3, r3, #2
 800c6d4:	440b      	add	r3, r1
 800c6d6:	3324      	adds	r3, #36	@ 0x24
 800c6d8:	2201      	movs	r2, #1
 800c6da:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c6dc:	4b38      	ldr	r3, [pc, #224]	@ (800c7c0 <USBD_CDC_Init+0x1e8>)
 800c6de:	7819      	ldrb	r1, [r3, #0]
 800c6e0:	2340      	movs	r3, #64	@ 0x40
 800c6e2:	2202      	movs	r2, #2
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f002 fb62 	bl	800edae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c6ea:	4b35      	ldr	r3, [pc, #212]	@ (800c7c0 <USBD_CDC_Init+0x1e8>)
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	f003 020f 	and.w	r2, r3, #15
 800c6f2:	6879      	ldr	r1, [r7, #4]
 800c6f4:	4613      	mov	r3, r2
 800c6f6:	009b      	lsls	r3, r3, #2
 800c6f8:	4413      	add	r3, r2
 800c6fa:	009b      	lsls	r3, r3, #2
 800c6fc:	440b      	add	r3, r1
 800c6fe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c702:	2201      	movs	r2, #1
 800c704:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c706:	4b2f      	ldr	r3, [pc, #188]	@ (800c7c4 <USBD_CDC_Init+0x1ec>)
 800c708:	781b      	ldrb	r3, [r3, #0]
 800c70a:	f003 020f 	and.w	r2, r3, #15
 800c70e:	6879      	ldr	r1, [r7, #4]
 800c710:	4613      	mov	r3, r2
 800c712:	009b      	lsls	r3, r3, #2
 800c714:	4413      	add	r3, r2
 800c716:	009b      	lsls	r3, r3, #2
 800c718:	440b      	add	r3, r1
 800c71a:	3326      	adds	r3, #38	@ 0x26
 800c71c:	2210      	movs	r2, #16
 800c71e:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c720:	4b28      	ldr	r3, [pc, #160]	@ (800c7c4 <USBD_CDC_Init+0x1ec>)
 800c722:	7819      	ldrb	r1, [r3, #0]
 800c724:	2308      	movs	r3, #8
 800c726:	2203      	movs	r2, #3
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f002 fb40 	bl	800edae <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c72e:	4b25      	ldr	r3, [pc, #148]	@ (800c7c4 <USBD_CDC_Init+0x1ec>)
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	f003 020f 	and.w	r2, r3, #15
 800c736:	6879      	ldr	r1, [r7, #4]
 800c738:	4613      	mov	r3, r2
 800c73a:	009b      	lsls	r3, r3, #2
 800c73c:	4413      	add	r3, r2
 800c73e:	009b      	lsls	r3, r3, #2
 800c740:	440b      	add	r3, r1
 800c742:	3324      	adds	r3, #36	@ 0x24
 800c744:	2201      	movs	r2, #1
 800c746:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	2200      	movs	r2, #0
 800c74c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	33b0      	adds	r3, #176	@ 0xb0
 800c75a:	009b      	lsls	r3, r3, #2
 800c75c:	4413      	add	r3, r2
 800c75e:	685b      	ldr	r3, [r3, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	2200      	movs	r2, #0
 800c768:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	2200      	movs	r2, #0
 800c770:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d101      	bne.n	800c782 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800c77e:	2302      	movs	r3, #2
 800c780:	e018      	b.n	800c7b4 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	7c1b      	ldrb	r3, [r3, #16]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d10a      	bne.n	800c7a0 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c78a:	4b0d      	ldr	r3, [pc, #52]	@ (800c7c0 <USBD_CDC_Init+0x1e8>)
 800c78c:	7819      	ldrb	r1, [r3, #0]
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c794:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f002 fbf7 	bl	800ef8c <USBD_LL_PrepareReceive>
 800c79e:	e008      	b.n	800c7b2 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c7a0:	4b07      	ldr	r3, [pc, #28]	@ (800c7c0 <USBD_CDC_Init+0x1e8>)
 800c7a2:	7819      	ldrb	r1, [r3, #0]
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c7aa:	2340      	movs	r3, #64	@ 0x40
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f002 fbed 	bl	800ef8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c7b2:	2300      	movs	r3, #0
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3710      	adds	r7, #16
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}
 800c7bc:	200000bf 	.word	0x200000bf
 800c7c0:	200000c0 	.word	0x200000c0
 800c7c4:	200000c1 	.word	0x200000c1

0800c7c8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	460b      	mov	r3, r1
 800c7d2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c7d4:	4b3a      	ldr	r3, [pc, #232]	@ (800c8c0 <USBD_CDC_DeInit+0xf8>)
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	4619      	mov	r1, r3
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f002 fb0d 	bl	800edfa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c7e0:	4b37      	ldr	r3, [pc, #220]	@ (800c8c0 <USBD_CDC_DeInit+0xf8>)
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	f003 020f 	and.w	r2, r3, #15
 800c7e8:	6879      	ldr	r1, [r7, #4]
 800c7ea:	4613      	mov	r3, r2
 800c7ec:	009b      	lsls	r3, r3, #2
 800c7ee:	4413      	add	r3, r2
 800c7f0:	009b      	lsls	r3, r3, #2
 800c7f2:	440b      	add	r3, r1
 800c7f4:	3324      	adds	r3, #36	@ 0x24
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c7fa:	4b32      	ldr	r3, [pc, #200]	@ (800c8c4 <USBD_CDC_DeInit+0xfc>)
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	4619      	mov	r1, r3
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f002 fafa 	bl	800edfa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c806:	4b2f      	ldr	r3, [pc, #188]	@ (800c8c4 <USBD_CDC_DeInit+0xfc>)
 800c808:	781b      	ldrb	r3, [r3, #0]
 800c80a:	f003 020f 	and.w	r2, r3, #15
 800c80e:	6879      	ldr	r1, [r7, #4]
 800c810:	4613      	mov	r3, r2
 800c812:	009b      	lsls	r3, r3, #2
 800c814:	4413      	add	r3, r2
 800c816:	009b      	lsls	r3, r3, #2
 800c818:	440b      	add	r3, r1
 800c81a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c81e:	2200      	movs	r2, #0
 800c820:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c822:	4b29      	ldr	r3, [pc, #164]	@ (800c8c8 <USBD_CDC_DeInit+0x100>)
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	4619      	mov	r1, r3
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f002 fae6 	bl	800edfa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c82e:	4b26      	ldr	r3, [pc, #152]	@ (800c8c8 <USBD_CDC_DeInit+0x100>)
 800c830:	781b      	ldrb	r3, [r3, #0]
 800c832:	f003 020f 	and.w	r2, r3, #15
 800c836:	6879      	ldr	r1, [r7, #4]
 800c838:	4613      	mov	r3, r2
 800c83a:	009b      	lsls	r3, r3, #2
 800c83c:	4413      	add	r3, r2
 800c83e:	009b      	lsls	r3, r3, #2
 800c840:	440b      	add	r3, r1
 800c842:	3324      	adds	r3, #36	@ 0x24
 800c844:	2200      	movs	r2, #0
 800c846:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c848:	4b1f      	ldr	r3, [pc, #124]	@ (800c8c8 <USBD_CDC_DeInit+0x100>)
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	f003 020f 	and.w	r2, r3, #15
 800c850:	6879      	ldr	r1, [r7, #4]
 800c852:	4613      	mov	r3, r2
 800c854:	009b      	lsls	r3, r3, #2
 800c856:	4413      	add	r3, r2
 800c858:	009b      	lsls	r3, r3, #2
 800c85a:	440b      	add	r3, r1
 800c85c:	3326      	adds	r3, #38	@ 0x26
 800c85e:	2200      	movs	r2, #0
 800c860:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	32b0      	adds	r2, #176	@ 0xb0
 800c86c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d01f      	beq.n	800c8b4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c87a:	687a      	ldr	r2, [r7, #4]
 800c87c:	33b0      	adds	r3, #176	@ 0xb0
 800c87e:	009b      	lsls	r3, r3, #2
 800c880:	4413      	add	r3, r2
 800c882:	685b      	ldr	r3, [r3, #4]
 800c884:	685b      	ldr	r3, [r3, #4]
 800c886:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	32b0      	adds	r2, #176	@ 0xb0
 800c892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c896:	4618      	mov	r0, r3
 800c898:	f002 fc38 	bl	800f10c <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	32b0      	adds	r2, #176	@ 0xb0
 800c8a6:	2100      	movs	r1, #0
 800c8a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c8b4:	2300      	movs	r3, #0
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3708      	adds	r7, #8
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}
 800c8be:	bf00      	nop
 800c8c0:	200000bf 	.word	0x200000bf
 800c8c4:	200000c0 	.word	0x200000c0
 800c8c8:	200000c1 	.word	0x200000c1

0800c8cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b086      	sub	sp, #24
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	32b0      	adds	r2, #176	@ 0xb0
 800c8e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8e4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c8f2:	693b      	ldr	r3, [r7, #16]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d101      	bne.n	800c8fc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c8f8:	2303      	movs	r3, #3
 800c8fa:	e0bf      	b.n	800ca7c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	781b      	ldrb	r3, [r3, #0]
 800c900:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c904:	2b00      	cmp	r3, #0
 800c906:	d050      	beq.n	800c9aa <USBD_CDC_Setup+0xde>
 800c908:	2b20      	cmp	r3, #32
 800c90a:	f040 80af 	bne.w	800ca6c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	88db      	ldrh	r3, [r3, #6]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d03a      	beq.n	800c98c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	b25b      	sxtb	r3, r3
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	da1b      	bge.n	800c958 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c926:	687a      	ldr	r2, [r7, #4]
 800c928:	33b0      	adds	r3, #176	@ 0xb0
 800c92a:	009b      	lsls	r3, r3, #2
 800c92c:	4413      	add	r3, r2
 800c92e:	685b      	ldr	r3, [r3, #4]
 800c930:	689b      	ldr	r3, [r3, #8]
 800c932:	683a      	ldr	r2, [r7, #0]
 800c934:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c936:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c938:	683a      	ldr	r2, [r7, #0]
 800c93a:	88d2      	ldrh	r2, [r2, #6]
 800c93c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	88db      	ldrh	r3, [r3, #6]
 800c942:	2b07      	cmp	r3, #7
 800c944:	bf28      	it	cs
 800c946:	2307      	movcs	r3, #7
 800c948:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	89fa      	ldrh	r2, [r7, #14]
 800c94e:	4619      	mov	r1, r3
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f001 fdab 	bl	800e4ac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c956:	e090      	b.n	800ca7a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	785a      	ldrb	r2, [r3, #1]
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	88db      	ldrh	r3, [r3, #6]
 800c966:	2b3f      	cmp	r3, #63	@ 0x3f
 800c968:	d803      	bhi.n	800c972 <USBD_CDC_Setup+0xa6>
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	88db      	ldrh	r3, [r3, #6]
 800c96e:	b2da      	uxtb	r2, r3
 800c970:	e000      	b.n	800c974 <USBD_CDC_Setup+0xa8>
 800c972:	2240      	movs	r2, #64	@ 0x40
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c97a:	6939      	ldr	r1, [r7, #16]
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800c982:	461a      	mov	r2, r3
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f001 fdbd 	bl	800e504 <USBD_CtlPrepareRx>
      break;
 800c98a:	e076      	b.n	800ca7a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	33b0      	adds	r3, #176	@ 0xb0
 800c996:	009b      	lsls	r3, r3, #2
 800c998:	4413      	add	r3, r2
 800c99a:	685b      	ldr	r3, [r3, #4]
 800c99c:	689b      	ldr	r3, [r3, #8]
 800c99e:	683a      	ldr	r2, [r7, #0]
 800c9a0:	7850      	ldrb	r0, [r2, #1]
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	6839      	ldr	r1, [r7, #0]
 800c9a6:	4798      	blx	r3
      break;
 800c9a8:	e067      	b.n	800ca7a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	785b      	ldrb	r3, [r3, #1]
 800c9ae:	2b0b      	cmp	r3, #11
 800c9b0:	d851      	bhi.n	800ca56 <USBD_CDC_Setup+0x18a>
 800c9b2:	a201      	add	r2, pc, #4	@ (adr r2, 800c9b8 <USBD_CDC_Setup+0xec>)
 800c9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9b8:	0800c9e9 	.word	0x0800c9e9
 800c9bc:	0800ca65 	.word	0x0800ca65
 800c9c0:	0800ca57 	.word	0x0800ca57
 800c9c4:	0800ca57 	.word	0x0800ca57
 800c9c8:	0800ca57 	.word	0x0800ca57
 800c9cc:	0800ca57 	.word	0x0800ca57
 800c9d0:	0800ca57 	.word	0x0800ca57
 800c9d4:	0800ca57 	.word	0x0800ca57
 800c9d8:	0800ca57 	.word	0x0800ca57
 800c9dc:	0800ca57 	.word	0x0800ca57
 800c9e0:	0800ca13 	.word	0x0800ca13
 800c9e4:	0800ca3d 	.word	0x0800ca3d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9ee:	b2db      	uxtb	r3, r3
 800c9f0:	2b03      	cmp	r3, #3
 800c9f2:	d107      	bne.n	800ca04 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c9f4:	f107 030a 	add.w	r3, r7, #10
 800c9f8:	2202      	movs	r2, #2
 800c9fa:	4619      	mov	r1, r3
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f001 fd55 	bl	800e4ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ca02:	e032      	b.n	800ca6a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ca04:	6839      	ldr	r1, [r7, #0]
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f001 fcdf 	bl	800e3ca <USBD_CtlError>
            ret = USBD_FAIL;
 800ca0c:	2303      	movs	r3, #3
 800ca0e:	75fb      	strb	r3, [r7, #23]
          break;
 800ca10:	e02b      	b.n	800ca6a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca18:	b2db      	uxtb	r3, r3
 800ca1a:	2b03      	cmp	r3, #3
 800ca1c:	d107      	bne.n	800ca2e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ca1e:	f107 030d 	add.w	r3, r7, #13
 800ca22:	2201      	movs	r2, #1
 800ca24:	4619      	mov	r1, r3
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f001 fd40 	bl	800e4ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ca2c:	e01d      	b.n	800ca6a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ca2e:	6839      	ldr	r1, [r7, #0]
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f001 fcca 	bl	800e3ca <USBD_CtlError>
            ret = USBD_FAIL;
 800ca36:	2303      	movs	r3, #3
 800ca38:	75fb      	strb	r3, [r7, #23]
          break;
 800ca3a:	e016      	b.n	800ca6a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca42:	b2db      	uxtb	r3, r3
 800ca44:	2b03      	cmp	r3, #3
 800ca46:	d00f      	beq.n	800ca68 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ca48:	6839      	ldr	r1, [r7, #0]
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f001 fcbd 	bl	800e3ca <USBD_CtlError>
            ret = USBD_FAIL;
 800ca50:	2303      	movs	r3, #3
 800ca52:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ca54:	e008      	b.n	800ca68 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ca56:	6839      	ldr	r1, [r7, #0]
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f001 fcb6 	bl	800e3ca <USBD_CtlError>
          ret = USBD_FAIL;
 800ca5e:	2303      	movs	r3, #3
 800ca60:	75fb      	strb	r3, [r7, #23]
          break;
 800ca62:	e002      	b.n	800ca6a <USBD_CDC_Setup+0x19e>
          break;
 800ca64:	bf00      	nop
 800ca66:	e008      	b.n	800ca7a <USBD_CDC_Setup+0x1ae>
          break;
 800ca68:	bf00      	nop
      }
      break;
 800ca6a:	e006      	b.n	800ca7a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ca6c:	6839      	ldr	r1, [r7, #0]
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f001 fcab 	bl	800e3ca <USBD_CtlError>
      ret = USBD_FAIL;
 800ca74:	2303      	movs	r3, #3
 800ca76:	75fb      	strb	r3, [r7, #23]
      break;
 800ca78:	bf00      	nop
  }

  return (uint8_t)ret;
 800ca7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3718      	adds	r7, #24
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}

0800ca84 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b084      	sub	sp, #16
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	460b      	mov	r3, r1
 800ca8e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ca96:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	32b0      	adds	r2, #176	@ 0xb0
 800caa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d101      	bne.n	800caae <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800caaa:	2303      	movs	r3, #3
 800caac:	e065      	b.n	800cb7a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	32b0      	adds	r2, #176	@ 0xb0
 800cab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cabc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cabe:	78fb      	ldrb	r3, [r7, #3]
 800cac0:	f003 020f 	and.w	r2, r3, #15
 800cac4:	6879      	ldr	r1, [r7, #4]
 800cac6:	4613      	mov	r3, r2
 800cac8:	009b      	lsls	r3, r3, #2
 800caca:	4413      	add	r3, r2
 800cacc:	009b      	lsls	r3, r3, #2
 800cace:	440b      	add	r3, r1
 800cad0:	3318      	adds	r3, #24
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d02f      	beq.n	800cb38 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800cad8:	78fb      	ldrb	r3, [r7, #3]
 800cada:	f003 020f 	and.w	r2, r3, #15
 800cade:	6879      	ldr	r1, [r7, #4]
 800cae0:	4613      	mov	r3, r2
 800cae2:	009b      	lsls	r3, r3, #2
 800cae4:	4413      	add	r3, r2
 800cae6:	009b      	lsls	r3, r3, #2
 800cae8:	440b      	add	r3, r1
 800caea:	3318      	adds	r3, #24
 800caec:	681a      	ldr	r2, [r3, #0]
 800caee:	78fb      	ldrb	r3, [r7, #3]
 800caf0:	f003 010f 	and.w	r1, r3, #15
 800caf4:	68f8      	ldr	r0, [r7, #12]
 800caf6:	460b      	mov	r3, r1
 800caf8:	00db      	lsls	r3, r3, #3
 800cafa:	440b      	add	r3, r1
 800cafc:	009b      	lsls	r3, r3, #2
 800cafe:	4403      	add	r3, r0
 800cb00:	3348      	adds	r3, #72	@ 0x48
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	fbb2 f1f3 	udiv	r1, r2, r3
 800cb08:	fb01 f303 	mul.w	r3, r1, r3
 800cb0c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d112      	bne.n	800cb38 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800cb12:	78fb      	ldrb	r3, [r7, #3]
 800cb14:	f003 020f 	and.w	r2, r3, #15
 800cb18:	6879      	ldr	r1, [r7, #4]
 800cb1a:	4613      	mov	r3, r2
 800cb1c:	009b      	lsls	r3, r3, #2
 800cb1e:	4413      	add	r3, r2
 800cb20:	009b      	lsls	r3, r3, #2
 800cb22:	440b      	add	r3, r1
 800cb24:	3318      	adds	r3, #24
 800cb26:	2200      	movs	r2, #0
 800cb28:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cb2a:	78f9      	ldrb	r1, [r7, #3]
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	2200      	movs	r2, #0
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f002 fa0a 	bl	800ef4a <USBD_LL_Transmit>
 800cb36:	e01f      	b.n	800cb78 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800cb38:	68bb      	ldr	r3, [r7, #8]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cb46:	687a      	ldr	r2, [r7, #4]
 800cb48:	33b0      	adds	r3, #176	@ 0xb0
 800cb4a:	009b      	lsls	r3, r3, #2
 800cb4c:	4413      	add	r3, r2
 800cb4e:	685b      	ldr	r3, [r3, #4]
 800cb50:	691b      	ldr	r3, [r3, #16]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d010      	beq.n	800cb78 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cb5c:	687a      	ldr	r2, [r7, #4]
 800cb5e:	33b0      	adds	r3, #176	@ 0xb0
 800cb60:	009b      	lsls	r3, r3, #2
 800cb62:	4413      	add	r3, r2
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	691b      	ldr	r3, [r3, #16]
 800cb68:	68ba      	ldr	r2, [r7, #8]
 800cb6a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800cb6e:	68ba      	ldr	r2, [r7, #8]
 800cb70:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800cb74:	78fa      	ldrb	r2, [r7, #3]
 800cb76:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cb78:	2300      	movs	r3, #0
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3710      	adds	r7, #16
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}

0800cb82 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cb82:	b580      	push	{r7, lr}
 800cb84:	b084      	sub	sp, #16
 800cb86:	af00      	add	r7, sp, #0
 800cb88:	6078      	str	r0, [r7, #4]
 800cb8a:	460b      	mov	r3, r1
 800cb8c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	32b0      	adds	r2, #176	@ 0xb0
 800cb98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb9c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	32b0      	adds	r2, #176	@ 0xb0
 800cba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d101      	bne.n	800cbb4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800cbb0:	2303      	movs	r3, #3
 800cbb2:	e01a      	b.n	800cbea <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cbb4:	78fb      	ldrb	r3, [r7, #3]
 800cbb6:	4619      	mov	r1, r3
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f002 fa08 	bl	800efce <USBD_LL_GetRxDataSize>
 800cbbe:	4602      	mov	r2, r0
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cbcc:	687a      	ldr	r2, [r7, #4]
 800cbce:	33b0      	adds	r3, #176	@ 0xb0
 800cbd0:	009b      	lsls	r3, r3, #2
 800cbd2:	4413      	add	r3, r2
 800cbd4:	685b      	ldr	r3, [r3, #4]
 800cbd6:	68db      	ldr	r3, [r3, #12]
 800cbd8:	68fa      	ldr	r2, [r7, #12]
 800cbda:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800cbde:	68fa      	ldr	r2, [r7, #12]
 800cbe0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800cbe4:	4611      	mov	r1, r2
 800cbe6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cbe8:	2300      	movs	r3, #0
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3710      	adds	r7, #16
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}

0800cbf2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cbf2:	b580      	push	{r7, lr}
 800cbf4:	b084      	sub	sp, #16
 800cbf6:	af00      	add	r7, sp, #0
 800cbf8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	32b0      	adds	r2, #176	@ 0xb0
 800cc04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc08:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d101      	bne.n	800cc14 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cc10:	2303      	movs	r3, #3
 800cc12:	e024      	b.n	800cc5e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cc1a:	687a      	ldr	r2, [r7, #4]
 800cc1c:	33b0      	adds	r3, #176	@ 0xb0
 800cc1e:	009b      	lsls	r3, r3, #2
 800cc20:	4413      	add	r3, r2
 800cc22:	685b      	ldr	r3, [r3, #4]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d019      	beq.n	800cc5c <USBD_CDC_EP0_RxReady+0x6a>
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800cc2e:	2bff      	cmp	r3, #255	@ 0xff
 800cc30:	d014      	beq.n	800cc5c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cc38:	687a      	ldr	r2, [r7, #4]
 800cc3a:	33b0      	adds	r3, #176	@ 0xb0
 800cc3c:	009b      	lsls	r3, r3, #2
 800cc3e:	4413      	add	r3, r2
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	689b      	ldr	r3, [r3, #8]
 800cc44:	68fa      	ldr	r2, [r7, #12]
 800cc46:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800cc4a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800cc4c:	68fa      	ldr	r2, [r7, #12]
 800cc4e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cc52:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	22ff      	movs	r2, #255	@ 0xff
 800cc58:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800cc5c:	2300      	movs	r3, #0
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3710      	adds	r7, #16
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}
	...

0800cc68 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b086      	sub	sp, #24
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cc70:	2182      	movs	r1, #130	@ 0x82
 800cc72:	4818      	ldr	r0, [pc, #96]	@ (800ccd4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cc74:	f000 fd49 	bl	800d70a <USBD_GetEpDesc>
 800cc78:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cc7a:	2101      	movs	r1, #1
 800cc7c:	4815      	ldr	r0, [pc, #84]	@ (800ccd4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cc7e:	f000 fd44 	bl	800d70a <USBD_GetEpDesc>
 800cc82:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cc84:	2181      	movs	r1, #129	@ 0x81
 800cc86:	4813      	ldr	r0, [pc, #76]	@ (800ccd4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cc88:	f000 fd3f 	bl	800d70a <USBD_GetEpDesc>
 800cc8c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d002      	beq.n	800cc9a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	2210      	movs	r2, #16
 800cc98:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d006      	beq.n	800ccae <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	2200      	movs	r2, #0
 800cca4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cca8:	711a      	strb	r2, [r3, #4]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d006      	beq.n	800ccc2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ccbc:	711a      	strb	r2, [r3, #4]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2243      	movs	r2, #67	@ 0x43
 800ccc6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ccc8:	4b02      	ldr	r3, [pc, #8]	@ (800ccd4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3718      	adds	r7, #24
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}
 800ccd2:	bf00      	nop
 800ccd4:	2000007c 	.word	0x2000007c

0800ccd8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b086      	sub	sp, #24
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cce0:	2182      	movs	r1, #130	@ 0x82
 800cce2:	4818      	ldr	r0, [pc, #96]	@ (800cd44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cce4:	f000 fd11 	bl	800d70a <USBD_GetEpDesc>
 800cce8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ccea:	2101      	movs	r1, #1
 800ccec:	4815      	ldr	r0, [pc, #84]	@ (800cd44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ccee:	f000 fd0c 	bl	800d70a <USBD_GetEpDesc>
 800ccf2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ccf4:	2181      	movs	r1, #129	@ 0x81
 800ccf6:	4813      	ldr	r0, [pc, #76]	@ (800cd44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ccf8:	f000 fd07 	bl	800d70a <USBD_GetEpDesc>
 800ccfc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d002      	beq.n	800cd0a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	2210      	movs	r2, #16
 800cd08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cd0a:	693b      	ldr	r3, [r7, #16]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d006      	beq.n	800cd1e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cd10:	693b      	ldr	r3, [r7, #16]
 800cd12:	2200      	movs	r2, #0
 800cd14:	711a      	strb	r2, [r3, #4]
 800cd16:	2200      	movs	r2, #0
 800cd18:	f042 0202 	orr.w	r2, r2, #2
 800cd1c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d006      	beq.n	800cd32 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	2200      	movs	r2, #0
 800cd28:	711a      	strb	r2, [r3, #4]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	f042 0202 	orr.w	r2, r2, #2
 800cd30:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2243      	movs	r2, #67	@ 0x43
 800cd36:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cd38:	4b02      	ldr	r3, [pc, #8]	@ (800cd44 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3718      	adds	r7, #24
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}
 800cd42:	bf00      	nop
 800cd44:	2000007c 	.word	0x2000007c

0800cd48 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b086      	sub	sp, #24
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cd50:	2182      	movs	r1, #130	@ 0x82
 800cd52:	4818      	ldr	r0, [pc, #96]	@ (800cdb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cd54:	f000 fcd9 	bl	800d70a <USBD_GetEpDesc>
 800cd58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cd5a:	2101      	movs	r1, #1
 800cd5c:	4815      	ldr	r0, [pc, #84]	@ (800cdb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cd5e:	f000 fcd4 	bl	800d70a <USBD_GetEpDesc>
 800cd62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cd64:	2181      	movs	r1, #129	@ 0x81
 800cd66:	4813      	ldr	r0, [pc, #76]	@ (800cdb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cd68:	f000 fccf 	bl	800d70a <USBD_GetEpDesc>
 800cd6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d002      	beq.n	800cd7a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	2210      	movs	r2, #16
 800cd78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cd7a:	693b      	ldr	r3, [r7, #16]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d006      	beq.n	800cd8e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	2200      	movs	r2, #0
 800cd84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cd88:	711a      	strb	r2, [r3, #4]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d006      	beq.n	800cda2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	2200      	movs	r2, #0
 800cd98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cd9c:	711a      	strb	r2, [r3, #4]
 800cd9e:	2200      	movs	r2, #0
 800cda0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2243      	movs	r2, #67	@ 0x43
 800cda6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cda8:	4b02      	ldr	r3, [pc, #8]	@ (800cdb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	3718      	adds	r7, #24
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}
 800cdb2:	bf00      	nop
 800cdb4:	2000007c 	.word	0x2000007c

0800cdb8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cdb8:	b480      	push	{r7}
 800cdba:	b083      	sub	sp, #12
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	220a      	movs	r2, #10
 800cdc4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cdc6:	4b03      	ldr	r3, [pc, #12]	@ (800cdd4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	370c      	adds	r7, #12
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd2:	4770      	bx	lr
 800cdd4:	20000038 	.word	0x20000038

0800cdd8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cdd8:	b480      	push	{r7}
 800cdda:	b083      	sub	sp, #12
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
 800cde0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d101      	bne.n	800cdec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cde8:	2303      	movs	r3, #3
 800cdea:	e009      	b.n	800ce00 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cdf2:	687a      	ldr	r2, [r7, #4]
 800cdf4:	33b0      	adds	r3, #176	@ 0xb0
 800cdf6:	009b      	lsls	r3, r3, #2
 800cdf8:	4413      	add	r3, r2
 800cdfa:	683a      	ldr	r2, [r7, #0]
 800cdfc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800cdfe:	2300      	movs	r3, #0
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	370c      	adds	r7, #12
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr

0800ce0c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b087      	sub	sp, #28
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	60f8      	str	r0, [r7, #12]
 800ce14:	60b9      	str	r1, [r7, #8]
 800ce16:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	32b0      	adds	r2, #176	@ 0xb0
 800ce22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce26:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d101      	bne.n	800ce32 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ce2e:	2303      	movs	r3, #3
 800ce30:	e008      	b.n	800ce44 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	68ba      	ldr	r2, [r7, #8]
 800ce36:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ce42:	2300      	movs	r3, #0
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	371c      	adds	r7, #28
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4e:	4770      	bx	lr

0800ce50 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ce50:	b480      	push	{r7}
 800ce52:	b085      	sub	sp, #20
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	32b0      	adds	r2, #176	@ 0xb0
 800ce64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce68:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d101      	bne.n	800ce74 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ce70:	2303      	movs	r3, #3
 800ce72:	e004      	b.n	800ce7e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	683a      	ldr	r2, [r7, #0]
 800ce78:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800ce7c:	2300      	movs	r3, #0
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3714      	adds	r7, #20
 800ce82:	46bd      	mov	sp, r7
 800ce84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce88:	4770      	bx	lr
	...

0800ce8c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	32b0      	adds	r2, #176	@ 0xb0
 800ce9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cea2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800cea4:	2301      	movs	r3, #1
 800cea6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d101      	bne.n	800ceb2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ceae:	2303      	movs	r3, #3
 800ceb0:	e025      	b.n	800cefe <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d11f      	bne.n	800cefc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	2201      	movs	r2, #1
 800cec0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800cec4:	4b10      	ldr	r3, [pc, #64]	@ (800cf08 <USBD_CDC_TransmitPacket+0x7c>)
 800cec6:	781b      	ldrb	r3, [r3, #0]
 800cec8:	f003 020f 	and.w	r2, r3, #15
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	4613      	mov	r3, r2
 800ced6:	009b      	lsls	r3, r3, #2
 800ced8:	4413      	add	r3, r2
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	4403      	add	r3, r0
 800cede:	3318      	adds	r3, #24
 800cee0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800cee2:	4b09      	ldr	r3, [pc, #36]	@ (800cf08 <USBD_CDC_TransmitPacket+0x7c>)
 800cee4:	7819      	ldrb	r1, [r3, #0]
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f002 f829 	bl	800ef4a <USBD_LL_Transmit>

    ret = USBD_OK;
 800cef8:	2300      	movs	r3, #0
 800cefa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800cefc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	3710      	adds	r7, #16
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}
 800cf06:	bf00      	nop
 800cf08:	200000bf 	.word	0x200000bf

0800cf0c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b084      	sub	sp, #16
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	32b0      	adds	r2, #176	@ 0xb0
 800cf1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf22:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	32b0      	adds	r2, #176	@ 0xb0
 800cf2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d101      	bne.n	800cf3a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800cf36:	2303      	movs	r3, #3
 800cf38:	e018      	b.n	800cf6c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	7c1b      	ldrb	r3, [r3, #16]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d10a      	bne.n	800cf58 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cf42:	4b0c      	ldr	r3, [pc, #48]	@ (800cf74 <USBD_CDC_ReceivePacket+0x68>)
 800cf44:	7819      	ldrb	r1, [r3, #0]
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cf4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f002 f81b 	bl	800ef8c <USBD_LL_PrepareReceive>
 800cf56:	e008      	b.n	800cf6a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cf58:	4b06      	ldr	r3, [pc, #24]	@ (800cf74 <USBD_CDC_ReceivePacket+0x68>)
 800cf5a:	7819      	ldrb	r1, [r3, #0]
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cf62:	2340      	movs	r3, #64	@ 0x40
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f002 f811 	bl	800ef8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cf6a:	2300      	movs	r3, #0
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3710      	adds	r7, #16
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}
 800cf74:	200000c0 	.word	0x200000c0

0800cf78 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b086      	sub	sp, #24
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	60f8      	str	r0, [r7, #12]
 800cf80:	60b9      	str	r1, [r7, #8]
 800cf82:	4613      	mov	r3, r2
 800cf84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d101      	bne.n	800cf90 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cf8c:	2303      	movs	r3, #3
 800cf8e:	e01f      	b.n	800cfd0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2200      	movs	r2, #0
 800cf94:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d003      	beq.n	800cfb6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	68ba      	ldr	r2, [r7, #8]
 800cfb2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	2201      	movs	r2, #1
 800cfba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	79fa      	ldrb	r2, [r7, #7]
 800cfc2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cfc4:	68f8      	ldr	r0, [r7, #12]
 800cfc6:	f001 fe8b 	bl	800ece0 <USBD_LL_Init>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cfce:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	3718      	adds	r7, #24
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b084      	sub	sp, #16
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d101      	bne.n	800cff0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cfec:	2303      	movs	r3, #3
 800cfee:	e025      	b.n	800d03c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	683a      	ldr	r2, [r7, #0]
 800cff4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	32ae      	adds	r2, #174	@ 0xae
 800d002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d00f      	beq.n	800d02c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	32ae      	adds	r2, #174	@ 0xae
 800d016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d01a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d01c:	f107 020e 	add.w	r2, r7, #14
 800d020:	4610      	mov	r0, r2
 800d022:	4798      	blx	r3
 800d024:	4602      	mov	r2, r0
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d032:	1c5a      	adds	r2, r3, #1
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800d03a:	2300      	movs	r3, #0
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3710      	adds	r7, #16
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}

0800d044 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b082      	sub	sp, #8
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f001 fe93 	bl	800ed78 <USBD_LL_Start>
 800d052:	4603      	mov	r3, r0
}
 800d054:	4618      	mov	r0, r3
 800d056:	3708      	adds	r7, #8
 800d058:	46bd      	mov	sp, r7
 800d05a:	bd80      	pop	{r7, pc}

0800d05c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d05c:	b480      	push	{r7}
 800d05e:	b083      	sub	sp, #12
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d064:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d066:	4618      	mov	r0, r3
 800d068:	370c      	adds	r7, #12
 800d06a:	46bd      	mov	sp, r7
 800d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d070:	4770      	bx	lr

0800d072 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d072:	b580      	push	{r7, lr}
 800d074:	b084      	sub	sp, #16
 800d076:	af00      	add	r7, sp, #0
 800d078:	6078      	str	r0, [r7, #4]
 800d07a:	460b      	mov	r3, r1
 800d07c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d07e:	2300      	movs	r3, #0
 800d080:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d009      	beq.n	800d0a0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	78fa      	ldrb	r2, [r7, #3]
 800d096:	4611      	mov	r1, r2
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	4798      	blx	r3
 800d09c:	4603      	mov	r3, r0
 800d09e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	3710      	adds	r7, #16
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}

0800d0aa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d0aa:	b580      	push	{r7, lr}
 800d0ac:	b084      	sub	sp, #16
 800d0ae:	af00      	add	r7, sp, #0
 800d0b0:	6078      	str	r0, [r7, #4]
 800d0b2:	460b      	mov	r3, r1
 800d0b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0c0:	685b      	ldr	r3, [r3, #4]
 800d0c2:	78fa      	ldrb	r2, [r7, #3]
 800d0c4:	4611      	mov	r1, r2
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	4798      	blx	r3
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d001      	beq.n	800d0d4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d0d0:	2303      	movs	r3, #3
 800d0d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d0d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3710      	adds	r7, #16
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}

0800d0de <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d0de:	b580      	push	{r7, lr}
 800d0e0:	b084      	sub	sp, #16
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	6078      	str	r0, [r7, #4]
 800d0e6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d0ee:	6839      	ldr	r1, [r7, #0]
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f001 f930 	bl	800e356 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2201      	movs	r2, #1
 800d0fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d104:	461a      	mov	r2, r3
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d112:	f003 031f 	and.w	r3, r3, #31
 800d116:	2b02      	cmp	r3, #2
 800d118:	d01a      	beq.n	800d150 <USBD_LL_SetupStage+0x72>
 800d11a:	2b02      	cmp	r3, #2
 800d11c:	d822      	bhi.n	800d164 <USBD_LL_SetupStage+0x86>
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d002      	beq.n	800d128 <USBD_LL_SetupStage+0x4a>
 800d122:	2b01      	cmp	r3, #1
 800d124:	d00a      	beq.n	800d13c <USBD_LL_SetupStage+0x5e>
 800d126:	e01d      	b.n	800d164 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d12e:	4619      	mov	r1, r3
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f000 fb5d 	bl	800d7f0 <USBD_StdDevReq>
 800d136:	4603      	mov	r3, r0
 800d138:	73fb      	strb	r3, [r7, #15]
      break;
 800d13a:	e020      	b.n	800d17e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d142:	4619      	mov	r1, r3
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f000 fbc5 	bl	800d8d4 <USBD_StdItfReq>
 800d14a:	4603      	mov	r3, r0
 800d14c:	73fb      	strb	r3, [r7, #15]
      break;
 800d14e:	e016      	b.n	800d17e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d156:	4619      	mov	r1, r3
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f000 fc27 	bl	800d9ac <USBD_StdEPReq>
 800d15e:	4603      	mov	r3, r0
 800d160:	73fb      	strb	r3, [r7, #15]
      break;
 800d162:	e00c      	b.n	800d17e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d16a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d16e:	b2db      	uxtb	r3, r3
 800d170:	4619      	mov	r1, r3
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f001 fe60 	bl	800ee38 <USBD_LL_StallEP>
 800d178:	4603      	mov	r3, r0
 800d17a:	73fb      	strb	r3, [r7, #15]
      break;
 800d17c:	bf00      	nop
  }

  return ret;
 800d17e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d180:	4618      	mov	r0, r3
 800d182:	3710      	adds	r7, #16
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}

0800d188 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b086      	sub	sp, #24
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	60f8      	str	r0, [r7, #12]
 800d190:	460b      	mov	r3, r1
 800d192:	607a      	str	r2, [r7, #4]
 800d194:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d196:	2300      	movs	r3, #0
 800d198:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d19a:	7afb      	ldrb	r3, [r7, #11]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d16e      	bne.n	800d27e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d1a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d1ae:	2b03      	cmp	r3, #3
 800d1b0:	f040 8098 	bne.w	800d2e4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	689a      	ldr	r2, [r3, #8]
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	68db      	ldr	r3, [r3, #12]
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d913      	bls.n	800d1e8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d1c0:	693b      	ldr	r3, [r7, #16]
 800d1c2:	689a      	ldr	r2, [r3, #8]
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	68db      	ldr	r3, [r3, #12]
 800d1c8:	1ad2      	subs	r2, r2, r3
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d1ce:	693b      	ldr	r3, [r7, #16]
 800d1d0:	68da      	ldr	r2, [r3, #12]
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	689b      	ldr	r3, [r3, #8]
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	bf28      	it	cs
 800d1da:	4613      	movcs	r3, r2
 800d1dc:	461a      	mov	r2, r3
 800d1de:	6879      	ldr	r1, [r7, #4]
 800d1e0:	68f8      	ldr	r0, [r7, #12]
 800d1e2:	f001 f9ac 	bl	800e53e <USBD_CtlContinueRx>
 800d1e6:	e07d      	b.n	800d2e4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d1ee:	f003 031f 	and.w	r3, r3, #31
 800d1f2:	2b02      	cmp	r3, #2
 800d1f4:	d014      	beq.n	800d220 <USBD_LL_DataOutStage+0x98>
 800d1f6:	2b02      	cmp	r3, #2
 800d1f8:	d81d      	bhi.n	800d236 <USBD_LL_DataOutStage+0xae>
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d002      	beq.n	800d204 <USBD_LL_DataOutStage+0x7c>
 800d1fe:	2b01      	cmp	r3, #1
 800d200:	d003      	beq.n	800d20a <USBD_LL_DataOutStage+0x82>
 800d202:	e018      	b.n	800d236 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d204:	2300      	movs	r3, #0
 800d206:	75bb      	strb	r3, [r7, #22]
            break;
 800d208:	e018      	b.n	800d23c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d210:	b2db      	uxtb	r3, r3
 800d212:	4619      	mov	r1, r3
 800d214:	68f8      	ldr	r0, [r7, #12]
 800d216:	f000 fa5e 	bl	800d6d6 <USBD_CoreFindIF>
 800d21a:	4603      	mov	r3, r0
 800d21c:	75bb      	strb	r3, [r7, #22]
            break;
 800d21e:	e00d      	b.n	800d23c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d226:	b2db      	uxtb	r3, r3
 800d228:	4619      	mov	r1, r3
 800d22a:	68f8      	ldr	r0, [r7, #12]
 800d22c:	f000 fa60 	bl	800d6f0 <USBD_CoreFindEP>
 800d230:	4603      	mov	r3, r0
 800d232:	75bb      	strb	r3, [r7, #22]
            break;
 800d234:	e002      	b.n	800d23c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d236:	2300      	movs	r3, #0
 800d238:	75bb      	strb	r3, [r7, #22]
            break;
 800d23a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d23c:	7dbb      	ldrb	r3, [r7, #22]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d119      	bne.n	800d276 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d248:	b2db      	uxtb	r3, r3
 800d24a:	2b03      	cmp	r3, #3
 800d24c:	d113      	bne.n	800d276 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d24e:	7dba      	ldrb	r2, [r7, #22]
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	32ae      	adds	r2, #174	@ 0xae
 800d254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d258:	691b      	ldr	r3, [r3, #16]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d00b      	beq.n	800d276 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d25e:	7dba      	ldrb	r2, [r7, #22]
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d266:	7dba      	ldrb	r2, [r7, #22]
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	32ae      	adds	r2, #174	@ 0xae
 800d26c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d270:	691b      	ldr	r3, [r3, #16]
 800d272:	68f8      	ldr	r0, [r7, #12]
 800d274:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d276:	68f8      	ldr	r0, [r7, #12]
 800d278:	f001 f972 	bl	800e560 <USBD_CtlSendStatus>
 800d27c:	e032      	b.n	800d2e4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d27e:	7afb      	ldrb	r3, [r7, #11]
 800d280:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d284:	b2db      	uxtb	r3, r3
 800d286:	4619      	mov	r1, r3
 800d288:	68f8      	ldr	r0, [r7, #12]
 800d28a:	f000 fa31 	bl	800d6f0 <USBD_CoreFindEP>
 800d28e:	4603      	mov	r3, r0
 800d290:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d292:	7dbb      	ldrb	r3, [r7, #22]
 800d294:	2bff      	cmp	r3, #255	@ 0xff
 800d296:	d025      	beq.n	800d2e4 <USBD_LL_DataOutStage+0x15c>
 800d298:	7dbb      	ldrb	r3, [r7, #22]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d122      	bne.n	800d2e4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2a4:	b2db      	uxtb	r3, r3
 800d2a6:	2b03      	cmp	r3, #3
 800d2a8:	d117      	bne.n	800d2da <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d2aa:	7dba      	ldrb	r2, [r7, #22]
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	32ae      	adds	r2, #174	@ 0xae
 800d2b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2b4:	699b      	ldr	r3, [r3, #24]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d00f      	beq.n	800d2da <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d2ba:	7dba      	ldrb	r2, [r7, #22]
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d2c2:	7dba      	ldrb	r2, [r7, #22]
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	32ae      	adds	r2, #174	@ 0xae
 800d2c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2cc:	699b      	ldr	r3, [r3, #24]
 800d2ce:	7afa      	ldrb	r2, [r7, #11]
 800d2d0:	4611      	mov	r1, r2
 800d2d2:	68f8      	ldr	r0, [r7, #12]
 800d2d4:	4798      	blx	r3
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d2da:	7dfb      	ldrb	r3, [r7, #23]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d001      	beq.n	800d2e4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d2e0:	7dfb      	ldrb	r3, [r7, #23]
 800d2e2:	e000      	b.n	800d2e6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d2e4:	2300      	movs	r3, #0
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3718      	adds	r7, #24
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}

0800d2ee <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d2ee:	b580      	push	{r7, lr}
 800d2f0:	b086      	sub	sp, #24
 800d2f2:	af00      	add	r7, sp, #0
 800d2f4:	60f8      	str	r0, [r7, #12]
 800d2f6:	460b      	mov	r3, r1
 800d2f8:	607a      	str	r2, [r7, #4]
 800d2fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d2fc:	7afb      	ldrb	r3, [r7, #11]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d16f      	bne.n	800d3e2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	3314      	adds	r3, #20
 800d306:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d30e:	2b02      	cmp	r3, #2
 800d310:	d15a      	bne.n	800d3c8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	689a      	ldr	r2, [r3, #8]
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	68db      	ldr	r3, [r3, #12]
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d914      	bls.n	800d348 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d31e:	693b      	ldr	r3, [r7, #16]
 800d320:	689a      	ldr	r2, [r3, #8]
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	68db      	ldr	r3, [r3, #12]
 800d326:	1ad2      	subs	r2, r2, r3
 800d328:	693b      	ldr	r3, [r7, #16]
 800d32a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	689b      	ldr	r3, [r3, #8]
 800d330:	461a      	mov	r2, r3
 800d332:	6879      	ldr	r1, [r7, #4]
 800d334:	68f8      	ldr	r0, [r7, #12]
 800d336:	f001 f8d4 	bl	800e4e2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d33a:	2300      	movs	r3, #0
 800d33c:	2200      	movs	r2, #0
 800d33e:	2100      	movs	r1, #0
 800d340:	68f8      	ldr	r0, [r7, #12]
 800d342:	f001 fe23 	bl	800ef8c <USBD_LL_PrepareReceive>
 800d346:	e03f      	b.n	800d3c8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	68da      	ldr	r2, [r3, #12]
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	689b      	ldr	r3, [r3, #8]
 800d350:	429a      	cmp	r2, r3
 800d352:	d11c      	bne.n	800d38e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	685a      	ldr	r2, [r3, #4]
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d316      	bcc.n	800d38e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	685a      	ldr	r2, [r3, #4]
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d20f      	bcs.n	800d38e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d36e:	2200      	movs	r2, #0
 800d370:	2100      	movs	r1, #0
 800d372:	68f8      	ldr	r0, [r7, #12]
 800d374:	f001 f8b5 	bl	800e4e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	2200      	movs	r2, #0
 800d37c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d380:	2300      	movs	r3, #0
 800d382:	2200      	movs	r2, #0
 800d384:	2100      	movs	r1, #0
 800d386:	68f8      	ldr	r0, [r7, #12]
 800d388:	f001 fe00 	bl	800ef8c <USBD_LL_PrepareReceive>
 800d38c:	e01c      	b.n	800d3c8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d394:	b2db      	uxtb	r3, r3
 800d396:	2b03      	cmp	r3, #3
 800d398:	d10f      	bne.n	800d3ba <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d3a0:	68db      	ldr	r3, [r3, #12]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d009      	beq.n	800d3ba <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d3b4:	68db      	ldr	r3, [r3, #12]
 800d3b6:	68f8      	ldr	r0, [r7, #12]
 800d3b8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d3ba:	2180      	movs	r1, #128	@ 0x80
 800d3bc:	68f8      	ldr	r0, [r7, #12]
 800d3be:	f001 fd3b 	bl	800ee38 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d3c2:	68f8      	ldr	r0, [r7, #12]
 800d3c4:	f001 f8df 	bl	800e586 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d03a      	beq.n	800d448 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d3d2:	68f8      	ldr	r0, [r7, #12]
 800d3d4:	f7ff fe42 	bl	800d05c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d3e0:	e032      	b.n	800d448 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d3e2:	7afb      	ldrb	r3, [r7, #11]
 800d3e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d3e8:	b2db      	uxtb	r3, r3
 800d3ea:	4619      	mov	r1, r3
 800d3ec:	68f8      	ldr	r0, [r7, #12]
 800d3ee:	f000 f97f 	bl	800d6f0 <USBD_CoreFindEP>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d3f6:	7dfb      	ldrb	r3, [r7, #23]
 800d3f8:	2bff      	cmp	r3, #255	@ 0xff
 800d3fa:	d025      	beq.n	800d448 <USBD_LL_DataInStage+0x15a>
 800d3fc:	7dfb      	ldrb	r3, [r7, #23]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d122      	bne.n	800d448 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d408:	b2db      	uxtb	r3, r3
 800d40a:	2b03      	cmp	r3, #3
 800d40c:	d11c      	bne.n	800d448 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d40e:	7dfa      	ldrb	r2, [r7, #23]
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	32ae      	adds	r2, #174	@ 0xae
 800d414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d418:	695b      	ldr	r3, [r3, #20]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d014      	beq.n	800d448 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d41e:	7dfa      	ldrb	r2, [r7, #23]
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d426:	7dfa      	ldrb	r2, [r7, #23]
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	32ae      	adds	r2, #174	@ 0xae
 800d42c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d430:	695b      	ldr	r3, [r3, #20]
 800d432:	7afa      	ldrb	r2, [r7, #11]
 800d434:	4611      	mov	r1, r2
 800d436:	68f8      	ldr	r0, [r7, #12]
 800d438:	4798      	blx	r3
 800d43a:	4603      	mov	r3, r0
 800d43c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d43e:	7dbb      	ldrb	r3, [r7, #22]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d001      	beq.n	800d448 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d444:	7dbb      	ldrb	r3, [r7, #22]
 800d446:	e000      	b.n	800d44a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d448:	2300      	movs	r3, #0
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3718      	adds	r7, #24
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}

0800d452 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d452:	b580      	push	{r7, lr}
 800d454:	b084      	sub	sp, #16
 800d456:	af00      	add	r7, sp, #0
 800d458:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d45a:	2300      	movs	r3, #0
 800d45c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2201      	movs	r2, #1
 800d462:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2200      	movs	r2, #0
 800d46a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2200      	movs	r2, #0
 800d472:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2200      	movs	r2, #0
 800d478:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2200      	movs	r2, #0
 800d480:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d014      	beq.n	800d4b8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d494:	685b      	ldr	r3, [r3, #4]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d00e      	beq.n	800d4b8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d4a0:	685b      	ldr	r3, [r3, #4]
 800d4a2:	687a      	ldr	r2, [r7, #4]
 800d4a4:	6852      	ldr	r2, [r2, #4]
 800d4a6:	b2d2      	uxtb	r2, r2
 800d4a8:	4611      	mov	r1, r2
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	4798      	blx	r3
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d001      	beq.n	800d4b8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d4b4:	2303      	movs	r3, #3
 800d4b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d4b8:	2340      	movs	r3, #64	@ 0x40
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	2100      	movs	r1, #0
 800d4be:	6878      	ldr	r0, [r7, #4]
 800d4c0:	f001 fc75 	bl	800edae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2240      	movs	r2, #64	@ 0x40
 800d4d0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d4d4:	2340      	movs	r3, #64	@ 0x40
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	2180      	movs	r1, #128	@ 0x80
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f001 fc67 	bl	800edae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2201      	movs	r2, #1
 800d4e4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2240      	movs	r2, #64	@ 0x40
 800d4ea:	621a      	str	r2, [r3, #32]

  return ret;
 800d4ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	3710      	adds	r7, #16
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bd80      	pop	{r7, pc}

0800d4f6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d4f6:	b480      	push	{r7}
 800d4f8:	b083      	sub	sp, #12
 800d4fa:	af00      	add	r7, sp, #0
 800d4fc:	6078      	str	r0, [r7, #4]
 800d4fe:	460b      	mov	r3, r1
 800d500:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	78fa      	ldrb	r2, [r7, #3]
 800d506:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d508:	2300      	movs	r3, #0
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	370c      	adds	r7, #12
 800d50e:	46bd      	mov	sp, r7
 800d510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d514:	4770      	bx	lr

0800d516 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d516:	b480      	push	{r7}
 800d518:	b083      	sub	sp, #12
 800d51a:	af00      	add	r7, sp, #0
 800d51c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d524:	b2da      	uxtb	r2, r3
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2204      	movs	r2, #4
 800d530:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800d534:	2300      	movs	r3, #0
}
 800d536:	4618      	mov	r0, r3
 800d538:	370c      	adds	r7, #12
 800d53a:	46bd      	mov	sp, r7
 800d53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d540:	4770      	bx	lr

0800d542 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d542:	b480      	push	{r7}
 800d544:	b083      	sub	sp, #12
 800d546:	af00      	add	r7, sp, #0
 800d548:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d550:	b2db      	uxtb	r3, r3
 800d552:	2b04      	cmp	r3, #4
 800d554:	d106      	bne.n	800d564 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800d55c:	b2da      	uxtb	r2, r3
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800d564:	2300      	movs	r3, #0
}
 800d566:	4618      	mov	r0, r3
 800d568:	370c      	adds	r7, #12
 800d56a:	46bd      	mov	sp, r7
 800d56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d570:	4770      	bx	lr

0800d572 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d572:	b580      	push	{r7, lr}
 800d574:	b082      	sub	sp, #8
 800d576:	af00      	add	r7, sp, #0
 800d578:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d580:	b2db      	uxtb	r3, r3
 800d582:	2b03      	cmp	r3, #3
 800d584:	d110      	bne.n	800d5a8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d00b      	beq.n	800d5a8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d596:	69db      	ldr	r3, [r3, #28]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d005      	beq.n	800d5a8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d5a2:	69db      	ldr	r3, [r3, #28]
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d5a8:	2300      	movs	r3, #0
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3708      	adds	r7, #8
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}

0800d5b2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d5b2:	b580      	push	{r7, lr}
 800d5b4:	b082      	sub	sp, #8
 800d5b6:	af00      	add	r7, sp, #0
 800d5b8:	6078      	str	r0, [r7, #4]
 800d5ba:	460b      	mov	r3, r1
 800d5bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	32ae      	adds	r2, #174	@ 0xae
 800d5c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d101      	bne.n	800d5d4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d5d0:	2303      	movs	r3, #3
 800d5d2:	e01c      	b.n	800d60e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5da:	b2db      	uxtb	r3, r3
 800d5dc:	2b03      	cmp	r3, #3
 800d5de:	d115      	bne.n	800d60c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	32ae      	adds	r2, #174	@ 0xae
 800d5ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5ee:	6a1b      	ldr	r3, [r3, #32]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d00b      	beq.n	800d60c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	32ae      	adds	r2, #174	@ 0xae
 800d5fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d602:	6a1b      	ldr	r3, [r3, #32]
 800d604:	78fa      	ldrb	r2, [r7, #3]
 800d606:	4611      	mov	r1, r2
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d60c:	2300      	movs	r3, #0
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3708      	adds	r7, #8
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}

0800d616 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d616:	b580      	push	{r7, lr}
 800d618:	b082      	sub	sp, #8
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
 800d61e:	460b      	mov	r3, r1
 800d620:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	32ae      	adds	r2, #174	@ 0xae
 800d62c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d101      	bne.n	800d638 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d634:	2303      	movs	r3, #3
 800d636:	e01c      	b.n	800d672 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d63e:	b2db      	uxtb	r3, r3
 800d640:	2b03      	cmp	r3, #3
 800d642:	d115      	bne.n	800d670 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	32ae      	adds	r2, #174	@ 0xae
 800d64e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d654:	2b00      	cmp	r3, #0
 800d656:	d00b      	beq.n	800d670 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	32ae      	adds	r2, #174	@ 0xae
 800d662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d668:	78fa      	ldrb	r2, [r7, #3]
 800d66a:	4611      	mov	r1, r2
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d670:	2300      	movs	r3, #0
}
 800d672:	4618      	mov	r0, r3
 800d674:	3708      	adds	r7, #8
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}

0800d67a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d67a:	b480      	push	{r7}
 800d67c:	b083      	sub	sp, #12
 800d67e:	af00      	add	r7, sp, #0
 800d680:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d682:	2300      	movs	r3, #0
}
 800d684:	4618      	mov	r0, r3
 800d686:	370c      	adds	r7, #12
 800d688:	46bd      	mov	sp, r7
 800d68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68e:	4770      	bx	lr

0800d690 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b084      	sub	sp, #16
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d698:	2300      	movs	r3, #0
 800d69a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2201      	movs	r2, #1
 800d6a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d00e      	beq.n	800d6cc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d6b4:	685b      	ldr	r3, [r3, #4]
 800d6b6:	687a      	ldr	r2, [r7, #4]
 800d6b8:	6852      	ldr	r2, [r2, #4]
 800d6ba:	b2d2      	uxtb	r2, r2
 800d6bc:	4611      	mov	r1, r2
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	4798      	blx	r3
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d001      	beq.n	800d6cc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d6c8:	2303      	movs	r3, #3
 800d6ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	3710      	adds	r7, #16
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}

0800d6d6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d6d6:	b480      	push	{r7}
 800d6d8:	b083      	sub	sp, #12
 800d6da:	af00      	add	r7, sp, #0
 800d6dc:	6078      	str	r0, [r7, #4]
 800d6de:	460b      	mov	r3, r1
 800d6e0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d6e2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	370c      	adds	r7, #12
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ee:	4770      	bx	lr

0800d6f0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b083      	sub	sp, #12
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	460b      	mov	r3, r1
 800d6fa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d6fc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	370c      	adds	r7, #12
 800d702:	46bd      	mov	sp, r7
 800d704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d708:	4770      	bx	lr

0800d70a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d70a:	b580      	push	{r7, lr}
 800d70c:	b086      	sub	sp, #24
 800d70e:	af00      	add	r7, sp, #0
 800d710:	6078      	str	r0, [r7, #4]
 800d712:	460b      	mov	r3, r1
 800d714:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d71e:	2300      	movs	r3, #0
 800d720:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	885b      	ldrh	r3, [r3, #2]
 800d726:	b29b      	uxth	r3, r3
 800d728:	68fa      	ldr	r2, [r7, #12]
 800d72a:	7812      	ldrb	r2, [r2, #0]
 800d72c:	4293      	cmp	r3, r2
 800d72e:	d91f      	bls.n	800d770 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d736:	e013      	b.n	800d760 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d738:	f107 030a 	add.w	r3, r7, #10
 800d73c:	4619      	mov	r1, r3
 800d73e:	6978      	ldr	r0, [r7, #20]
 800d740:	f000 f81b 	bl	800d77a <USBD_GetNextDesc>
 800d744:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d746:	697b      	ldr	r3, [r7, #20]
 800d748:	785b      	ldrb	r3, [r3, #1]
 800d74a:	2b05      	cmp	r3, #5
 800d74c:	d108      	bne.n	800d760 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d752:	693b      	ldr	r3, [r7, #16]
 800d754:	789b      	ldrb	r3, [r3, #2]
 800d756:	78fa      	ldrb	r2, [r7, #3]
 800d758:	429a      	cmp	r2, r3
 800d75a:	d008      	beq.n	800d76e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d75c:	2300      	movs	r3, #0
 800d75e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	885b      	ldrh	r3, [r3, #2]
 800d764:	b29a      	uxth	r2, r3
 800d766:	897b      	ldrh	r3, [r7, #10]
 800d768:	429a      	cmp	r2, r3
 800d76a:	d8e5      	bhi.n	800d738 <USBD_GetEpDesc+0x2e>
 800d76c:	e000      	b.n	800d770 <USBD_GetEpDesc+0x66>
          break;
 800d76e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d770:	693b      	ldr	r3, [r7, #16]
}
 800d772:	4618      	mov	r0, r3
 800d774:	3718      	adds	r7, #24
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}

0800d77a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d77a:	b480      	push	{r7}
 800d77c:	b085      	sub	sp, #20
 800d77e:	af00      	add	r7, sp, #0
 800d780:	6078      	str	r0, [r7, #4]
 800d782:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	881b      	ldrh	r3, [r3, #0]
 800d78c:	68fa      	ldr	r2, [r7, #12]
 800d78e:	7812      	ldrb	r2, [r2, #0]
 800d790:	4413      	add	r3, r2
 800d792:	b29a      	uxth	r2, r3
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	781b      	ldrb	r3, [r3, #0]
 800d79c:	461a      	mov	r2, r3
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	4413      	add	r3, r2
 800d7a2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d7a4:	68fb      	ldr	r3, [r7, #12]
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3714      	adds	r7, #20
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b0:	4770      	bx	lr

0800d7b2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d7b2:	b480      	push	{r7}
 800d7b4:	b087      	sub	sp, #28
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	781b      	ldrb	r3, [r3, #0]
 800d7c2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	3301      	adds	r3, #1
 800d7c8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	781b      	ldrb	r3, [r3, #0]
 800d7ce:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d7d0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800d7d4:	021b      	lsls	r3, r3, #8
 800d7d6:	b21a      	sxth	r2, r3
 800d7d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d7dc:	4313      	orrs	r3, r2
 800d7de:	b21b      	sxth	r3, r3
 800d7e0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d7e2:	89fb      	ldrh	r3, [r7, #14]
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	371c      	adds	r7, #28
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ee:	4770      	bx	lr

0800d7f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b084      	sub	sp, #16
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d806:	2b40      	cmp	r3, #64	@ 0x40
 800d808:	d005      	beq.n	800d816 <USBD_StdDevReq+0x26>
 800d80a:	2b40      	cmp	r3, #64	@ 0x40
 800d80c:	d857      	bhi.n	800d8be <USBD_StdDevReq+0xce>
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d00f      	beq.n	800d832 <USBD_StdDevReq+0x42>
 800d812:	2b20      	cmp	r3, #32
 800d814:	d153      	bne.n	800d8be <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	32ae      	adds	r2, #174	@ 0xae
 800d820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d824:	689b      	ldr	r3, [r3, #8]
 800d826:	6839      	ldr	r1, [r7, #0]
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	4798      	blx	r3
 800d82c:	4603      	mov	r3, r0
 800d82e:	73fb      	strb	r3, [r7, #15]
      break;
 800d830:	e04a      	b.n	800d8c8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	785b      	ldrb	r3, [r3, #1]
 800d836:	2b09      	cmp	r3, #9
 800d838:	d83b      	bhi.n	800d8b2 <USBD_StdDevReq+0xc2>
 800d83a:	a201      	add	r2, pc, #4	@ (adr r2, 800d840 <USBD_StdDevReq+0x50>)
 800d83c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d840:	0800d895 	.word	0x0800d895
 800d844:	0800d8a9 	.word	0x0800d8a9
 800d848:	0800d8b3 	.word	0x0800d8b3
 800d84c:	0800d89f 	.word	0x0800d89f
 800d850:	0800d8b3 	.word	0x0800d8b3
 800d854:	0800d873 	.word	0x0800d873
 800d858:	0800d869 	.word	0x0800d869
 800d85c:	0800d8b3 	.word	0x0800d8b3
 800d860:	0800d88b 	.word	0x0800d88b
 800d864:	0800d87d 	.word	0x0800d87d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d868:	6839      	ldr	r1, [r7, #0]
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f000 fa3c 	bl	800dce8 <USBD_GetDescriptor>
          break;
 800d870:	e024      	b.n	800d8bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d872:	6839      	ldr	r1, [r7, #0]
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f000 fbcb 	bl	800e010 <USBD_SetAddress>
          break;
 800d87a:	e01f      	b.n	800d8bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d87c:	6839      	ldr	r1, [r7, #0]
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f000 fc0a 	bl	800e098 <USBD_SetConfig>
 800d884:	4603      	mov	r3, r0
 800d886:	73fb      	strb	r3, [r7, #15]
          break;
 800d888:	e018      	b.n	800d8bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d88a:	6839      	ldr	r1, [r7, #0]
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f000 fcad 	bl	800e1ec <USBD_GetConfig>
          break;
 800d892:	e013      	b.n	800d8bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d894:	6839      	ldr	r1, [r7, #0]
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f000 fcde 	bl	800e258 <USBD_GetStatus>
          break;
 800d89c:	e00e      	b.n	800d8bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d89e:	6839      	ldr	r1, [r7, #0]
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f000 fd0d 	bl	800e2c0 <USBD_SetFeature>
          break;
 800d8a6:	e009      	b.n	800d8bc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d8a8:	6839      	ldr	r1, [r7, #0]
 800d8aa:	6878      	ldr	r0, [r7, #4]
 800d8ac:	f000 fd31 	bl	800e312 <USBD_ClrFeature>
          break;
 800d8b0:	e004      	b.n	800d8bc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d8b2:	6839      	ldr	r1, [r7, #0]
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f000 fd88 	bl	800e3ca <USBD_CtlError>
          break;
 800d8ba:	bf00      	nop
      }
      break;
 800d8bc:	e004      	b.n	800d8c8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d8be:	6839      	ldr	r1, [r7, #0]
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f000 fd82 	bl	800e3ca <USBD_CtlError>
      break;
 800d8c6:	bf00      	nop
  }

  return ret;
 800d8c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3710      	adds	r7, #16
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}
 800d8d2:	bf00      	nop

0800d8d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b084      	sub	sp, #16
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
 800d8dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	781b      	ldrb	r3, [r3, #0]
 800d8e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d8ea:	2b40      	cmp	r3, #64	@ 0x40
 800d8ec:	d005      	beq.n	800d8fa <USBD_StdItfReq+0x26>
 800d8ee:	2b40      	cmp	r3, #64	@ 0x40
 800d8f0:	d852      	bhi.n	800d998 <USBD_StdItfReq+0xc4>
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d001      	beq.n	800d8fa <USBD_StdItfReq+0x26>
 800d8f6:	2b20      	cmp	r3, #32
 800d8f8:	d14e      	bne.n	800d998 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d900:	b2db      	uxtb	r3, r3
 800d902:	3b01      	subs	r3, #1
 800d904:	2b02      	cmp	r3, #2
 800d906:	d840      	bhi.n	800d98a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	889b      	ldrh	r3, [r3, #4]
 800d90c:	b2db      	uxtb	r3, r3
 800d90e:	2b01      	cmp	r3, #1
 800d910:	d836      	bhi.n	800d980 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	889b      	ldrh	r3, [r3, #4]
 800d916:	b2db      	uxtb	r3, r3
 800d918:	4619      	mov	r1, r3
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	f7ff fedb 	bl	800d6d6 <USBD_CoreFindIF>
 800d920:	4603      	mov	r3, r0
 800d922:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d924:	7bbb      	ldrb	r3, [r7, #14]
 800d926:	2bff      	cmp	r3, #255	@ 0xff
 800d928:	d01d      	beq.n	800d966 <USBD_StdItfReq+0x92>
 800d92a:	7bbb      	ldrb	r3, [r7, #14]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d11a      	bne.n	800d966 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d930:	7bba      	ldrb	r2, [r7, #14]
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	32ae      	adds	r2, #174	@ 0xae
 800d936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d93a:	689b      	ldr	r3, [r3, #8]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d00f      	beq.n	800d960 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d940:	7bba      	ldrb	r2, [r7, #14]
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d948:	7bba      	ldrb	r2, [r7, #14]
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	32ae      	adds	r2, #174	@ 0xae
 800d94e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d952:	689b      	ldr	r3, [r3, #8]
 800d954:	6839      	ldr	r1, [r7, #0]
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	4798      	blx	r3
 800d95a:	4603      	mov	r3, r0
 800d95c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d95e:	e004      	b.n	800d96a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d960:	2303      	movs	r3, #3
 800d962:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d964:	e001      	b.n	800d96a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d966:	2303      	movs	r3, #3
 800d968:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	88db      	ldrh	r3, [r3, #6]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d110      	bne.n	800d994 <USBD_StdItfReq+0xc0>
 800d972:	7bfb      	ldrb	r3, [r7, #15]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d10d      	bne.n	800d994 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f000 fdf1 	bl	800e560 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d97e:	e009      	b.n	800d994 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d980:	6839      	ldr	r1, [r7, #0]
 800d982:	6878      	ldr	r0, [r7, #4]
 800d984:	f000 fd21 	bl	800e3ca <USBD_CtlError>
          break;
 800d988:	e004      	b.n	800d994 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d98a:	6839      	ldr	r1, [r7, #0]
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f000 fd1c 	bl	800e3ca <USBD_CtlError>
          break;
 800d992:	e000      	b.n	800d996 <USBD_StdItfReq+0xc2>
          break;
 800d994:	bf00      	nop
      }
      break;
 800d996:	e004      	b.n	800d9a2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d998:	6839      	ldr	r1, [r7, #0]
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f000 fd15 	bl	800e3ca <USBD_CtlError>
      break;
 800d9a0:	bf00      	nop
  }

  return ret;
 800d9a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3710      	adds	r7, #16
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}

0800d9ac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b084      	sub	sp, #16
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	889b      	ldrh	r3, [r3, #4]
 800d9be:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d9c8:	2b40      	cmp	r3, #64	@ 0x40
 800d9ca:	d007      	beq.n	800d9dc <USBD_StdEPReq+0x30>
 800d9cc:	2b40      	cmp	r3, #64	@ 0x40
 800d9ce:	f200 817f 	bhi.w	800dcd0 <USBD_StdEPReq+0x324>
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d02a      	beq.n	800da2c <USBD_StdEPReq+0x80>
 800d9d6:	2b20      	cmp	r3, #32
 800d9d8:	f040 817a 	bne.w	800dcd0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d9dc:	7bbb      	ldrb	r3, [r7, #14]
 800d9de:	4619      	mov	r1, r3
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f7ff fe85 	bl	800d6f0 <USBD_CoreFindEP>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d9ea:	7b7b      	ldrb	r3, [r7, #13]
 800d9ec:	2bff      	cmp	r3, #255	@ 0xff
 800d9ee:	f000 8174 	beq.w	800dcda <USBD_StdEPReq+0x32e>
 800d9f2:	7b7b      	ldrb	r3, [r7, #13]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	f040 8170 	bne.w	800dcda <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d9fa:	7b7a      	ldrb	r2, [r7, #13]
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800da02:	7b7a      	ldrb	r2, [r7, #13]
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	32ae      	adds	r2, #174	@ 0xae
 800da08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da0c:	689b      	ldr	r3, [r3, #8]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	f000 8163 	beq.w	800dcda <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800da14:	7b7a      	ldrb	r2, [r7, #13]
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	32ae      	adds	r2, #174	@ 0xae
 800da1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da1e:	689b      	ldr	r3, [r3, #8]
 800da20:	6839      	ldr	r1, [r7, #0]
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	4798      	blx	r3
 800da26:	4603      	mov	r3, r0
 800da28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800da2a:	e156      	b.n	800dcda <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	785b      	ldrb	r3, [r3, #1]
 800da30:	2b03      	cmp	r3, #3
 800da32:	d008      	beq.n	800da46 <USBD_StdEPReq+0x9a>
 800da34:	2b03      	cmp	r3, #3
 800da36:	f300 8145 	bgt.w	800dcc4 <USBD_StdEPReq+0x318>
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	f000 809b 	beq.w	800db76 <USBD_StdEPReq+0x1ca>
 800da40:	2b01      	cmp	r3, #1
 800da42:	d03c      	beq.n	800dabe <USBD_StdEPReq+0x112>
 800da44:	e13e      	b.n	800dcc4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da4c:	b2db      	uxtb	r3, r3
 800da4e:	2b02      	cmp	r3, #2
 800da50:	d002      	beq.n	800da58 <USBD_StdEPReq+0xac>
 800da52:	2b03      	cmp	r3, #3
 800da54:	d016      	beq.n	800da84 <USBD_StdEPReq+0xd8>
 800da56:	e02c      	b.n	800dab2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800da58:	7bbb      	ldrb	r3, [r7, #14]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d00d      	beq.n	800da7a <USBD_StdEPReq+0xce>
 800da5e:	7bbb      	ldrb	r3, [r7, #14]
 800da60:	2b80      	cmp	r3, #128	@ 0x80
 800da62:	d00a      	beq.n	800da7a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800da64:	7bbb      	ldrb	r3, [r7, #14]
 800da66:	4619      	mov	r1, r3
 800da68:	6878      	ldr	r0, [r7, #4]
 800da6a:	f001 f9e5 	bl	800ee38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800da6e:	2180      	movs	r1, #128	@ 0x80
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	f001 f9e1 	bl	800ee38 <USBD_LL_StallEP>
 800da76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800da78:	e020      	b.n	800dabc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800da7a:	6839      	ldr	r1, [r7, #0]
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f000 fca4 	bl	800e3ca <USBD_CtlError>
              break;
 800da82:	e01b      	b.n	800dabc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	885b      	ldrh	r3, [r3, #2]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d10e      	bne.n	800daaa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800da8c:	7bbb      	ldrb	r3, [r7, #14]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d00b      	beq.n	800daaa <USBD_StdEPReq+0xfe>
 800da92:	7bbb      	ldrb	r3, [r7, #14]
 800da94:	2b80      	cmp	r3, #128	@ 0x80
 800da96:	d008      	beq.n	800daaa <USBD_StdEPReq+0xfe>
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	88db      	ldrh	r3, [r3, #6]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d104      	bne.n	800daaa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800daa0:	7bbb      	ldrb	r3, [r7, #14]
 800daa2:	4619      	mov	r1, r3
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f001 f9c7 	bl	800ee38 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f000 fd58 	bl	800e560 <USBD_CtlSendStatus>

              break;
 800dab0:	e004      	b.n	800dabc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800dab2:	6839      	ldr	r1, [r7, #0]
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f000 fc88 	bl	800e3ca <USBD_CtlError>
              break;
 800daba:	bf00      	nop
          }
          break;
 800dabc:	e107      	b.n	800dcce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dac4:	b2db      	uxtb	r3, r3
 800dac6:	2b02      	cmp	r3, #2
 800dac8:	d002      	beq.n	800dad0 <USBD_StdEPReq+0x124>
 800daca:	2b03      	cmp	r3, #3
 800dacc:	d016      	beq.n	800dafc <USBD_StdEPReq+0x150>
 800dace:	e04b      	b.n	800db68 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dad0:	7bbb      	ldrb	r3, [r7, #14]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d00d      	beq.n	800daf2 <USBD_StdEPReq+0x146>
 800dad6:	7bbb      	ldrb	r3, [r7, #14]
 800dad8:	2b80      	cmp	r3, #128	@ 0x80
 800dada:	d00a      	beq.n	800daf2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dadc:	7bbb      	ldrb	r3, [r7, #14]
 800dade:	4619      	mov	r1, r3
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f001 f9a9 	bl	800ee38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dae6:	2180      	movs	r1, #128	@ 0x80
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f001 f9a5 	bl	800ee38 <USBD_LL_StallEP>
 800daee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800daf0:	e040      	b.n	800db74 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800daf2:	6839      	ldr	r1, [r7, #0]
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f000 fc68 	bl	800e3ca <USBD_CtlError>
              break;
 800dafa:	e03b      	b.n	800db74 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	885b      	ldrh	r3, [r3, #2]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d136      	bne.n	800db72 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800db04:	7bbb      	ldrb	r3, [r7, #14]
 800db06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d004      	beq.n	800db18 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800db0e:	7bbb      	ldrb	r3, [r7, #14]
 800db10:	4619      	mov	r1, r3
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f001 f9af 	bl	800ee76 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800db18:	6878      	ldr	r0, [r7, #4]
 800db1a:	f000 fd21 	bl	800e560 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800db1e:	7bbb      	ldrb	r3, [r7, #14]
 800db20:	4619      	mov	r1, r3
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f7ff fde4 	bl	800d6f0 <USBD_CoreFindEP>
 800db28:	4603      	mov	r3, r0
 800db2a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800db2c:	7b7b      	ldrb	r3, [r7, #13]
 800db2e:	2bff      	cmp	r3, #255	@ 0xff
 800db30:	d01f      	beq.n	800db72 <USBD_StdEPReq+0x1c6>
 800db32:	7b7b      	ldrb	r3, [r7, #13]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d11c      	bne.n	800db72 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800db38:	7b7a      	ldrb	r2, [r7, #13]
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800db40:	7b7a      	ldrb	r2, [r7, #13]
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	32ae      	adds	r2, #174	@ 0xae
 800db46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db4a:	689b      	ldr	r3, [r3, #8]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d010      	beq.n	800db72 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800db50:	7b7a      	ldrb	r2, [r7, #13]
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	32ae      	adds	r2, #174	@ 0xae
 800db56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db5a:	689b      	ldr	r3, [r3, #8]
 800db5c:	6839      	ldr	r1, [r7, #0]
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	4798      	blx	r3
 800db62:	4603      	mov	r3, r0
 800db64:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800db66:	e004      	b.n	800db72 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800db68:	6839      	ldr	r1, [r7, #0]
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f000 fc2d 	bl	800e3ca <USBD_CtlError>
              break;
 800db70:	e000      	b.n	800db74 <USBD_StdEPReq+0x1c8>
              break;
 800db72:	bf00      	nop
          }
          break;
 800db74:	e0ab      	b.n	800dcce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db7c:	b2db      	uxtb	r3, r3
 800db7e:	2b02      	cmp	r3, #2
 800db80:	d002      	beq.n	800db88 <USBD_StdEPReq+0x1dc>
 800db82:	2b03      	cmp	r3, #3
 800db84:	d032      	beq.n	800dbec <USBD_StdEPReq+0x240>
 800db86:	e097      	b.n	800dcb8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800db88:	7bbb      	ldrb	r3, [r7, #14]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d007      	beq.n	800db9e <USBD_StdEPReq+0x1f2>
 800db8e:	7bbb      	ldrb	r3, [r7, #14]
 800db90:	2b80      	cmp	r3, #128	@ 0x80
 800db92:	d004      	beq.n	800db9e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800db94:	6839      	ldr	r1, [r7, #0]
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f000 fc17 	bl	800e3ca <USBD_CtlError>
                break;
 800db9c:	e091      	b.n	800dcc2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800db9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	da0b      	bge.n	800dbbe <USBD_StdEPReq+0x212>
 800dba6:	7bbb      	ldrb	r3, [r7, #14]
 800dba8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dbac:	4613      	mov	r3, r2
 800dbae:	009b      	lsls	r3, r3, #2
 800dbb0:	4413      	add	r3, r2
 800dbb2:	009b      	lsls	r3, r3, #2
 800dbb4:	3310      	adds	r3, #16
 800dbb6:	687a      	ldr	r2, [r7, #4]
 800dbb8:	4413      	add	r3, r2
 800dbba:	3304      	adds	r3, #4
 800dbbc:	e00b      	b.n	800dbd6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dbbe:	7bbb      	ldrb	r3, [r7, #14]
 800dbc0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dbc4:	4613      	mov	r3, r2
 800dbc6:	009b      	lsls	r3, r3, #2
 800dbc8:	4413      	add	r3, r2
 800dbca:	009b      	lsls	r3, r3, #2
 800dbcc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800dbd0:	687a      	ldr	r2, [r7, #4]
 800dbd2:	4413      	add	r3, r2
 800dbd4:	3304      	adds	r3, #4
 800dbd6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	2200      	movs	r2, #0
 800dbdc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	2202      	movs	r2, #2
 800dbe2:	4619      	mov	r1, r3
 800dbe4:	6878      	ldr	r0, [r7, #4]
 800dbe6:	f000 fc61 	bl	800e4ac <USBD_CtlSendData>
              break;
 800dbea:	e06a      	b.n	800dcc2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800dbec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	da11      	bge.n	800dc18 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dbf4:	7bbb      	ldrb	r3, [r7, #14]
 800dbf6:	f003 020f 	and.w	r2, r3, #15
 800dbfa:	6879      	ldr	r1, [r7, #4]
 800dbfc:	4613      	mov	r3, r2
 800dbfe:	009b      	lsls	r3, r3, #2
 800dc00:	4413      	add	r3, r2
 800dc02:	009b      	lsls	r3, r3, #2
 800dc04:	440b      	add	r3, r1
 800dc06:	3324      	adds	r3, #36	@ 0x24
 800dc08:	881b      	ldrh	r3, [r3, #0]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d117      	bne.n	800dc3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800dc0e:	6839      	ldr	r1, [r7, #0]
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f000 fbda 	bl	800e3ca <USBD_CtlError>
                  break;
 800dc16:	e054      	b.n	800dcc2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800dc18:	7bbb      	ldrb	r3, [r7, #14]
 800dc1a:	f003 020f 	and.w	r2, r3, #15
 800dc1e:	6879      	ldr	r1, [r7, #4]
 800dc20:	4613      	mov	r3, r2
 800dc22:	009b      	lsls	r3, r3, #2
 800dc24:	4413      	add	r3, r2
 800dc26:	009b      	lsls	r3, r3, #2
 800dc28:	440b      	add	r3, r1
 800dc2a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dc2e:	881b      	ldrh	r3, [r3, #0]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d104      	bne.n	800dc3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800dc34:	6839      	ldr	r1, [r7, #0]
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f000 fbc7 	bl	800e3ca <USBD_CtlError>
                  break;
 800dc3c:	e041      	b.n	800dcc2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dc3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	da0b      	bge.n	800dc5e <USBD_StdEPReq+0x2b2>
 800dc46:	7bbb      	ldrb	r3, [r7, #14]
 800dc48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dc4c:	4613      	mov	r3, r2
 800dc4e:	009b      	lsls	r3, r3, #2
 800dc50:	4413      	add	r3, r2
 800dc52:	009b      	lsls	r3, r3, #2
 800dc54:	3310      	adds	r3, #16
 800dc56:	687a      	ldr	r2, [r7, #4]
 800dc58:	4413      	add	r3, r2
 800dc5a:	3304      	adds	r3, #4
 800dc5c:	e00b      	b.n	800dc76 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dc5e:	7bbb      	ldrb	r3, [r7, #14]
 800dc60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dc64:	4613      	mov	r3, r2
 800dc66:	009b      	lsls	r3, r3, #2
 800dc68:	4413      	add	r3, r2
 800dc6a:	009b      	lsls	r3, r3, #2
 800dc6c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800dc70:	687a      	ldr	r2, [r7, #4]
 800dc72:	4413      	add	r3, r2
 800dc74:	3304      	adds	r3, #4
 800dc76:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800dc78:	7bbb      	ldrb	r3, [r7, #14]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d002      	beq.n	800dc84 <USBD_StdEPReq+0x2d8>
 800dc7e:	7bbb      	ldrb	r3, [r7, #14]
 800dc80:	2b80      	cmp	r3, #128	@ 0x80
 800dc82:	d103      	bne.n	800dc8c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	2200      	movs	r2, #0
 800dc88:	601a      	str	r2, [r3, #0]
 800dc8a:	e00e      	b.n	800dcaa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800dc8c:	7bbb      	ldrb	r3, [r7, #14]
 800dc8e:	4619      	mov	r1, r3
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f001 f90f 	bl	800eeb4 <USBD_LL_IsStallEP>
 800dc96:	4603      	mov	r3, r0
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d003      	beq.n	800dca4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	2201      	movs	r2, #1
 800dca0:	601a      	str	r2, [r3, #0]
 800dca2:	e002      	b.n	800dcaa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800dca4:	68bb      	ldr	r3, [r7, #8]
 800dca6:	2200      	movs	r2, #0
 800dca8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	2202      	movs	r2, #2
 800dcae:	4619      	mov	r1, r3
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	f000 fbfb 	bl	800e4ac <USBD_CtlSendData>
              break;
 800dcb6:	e004      	b.n	800dcc2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800dcb8:	6839      	ldr	r1, [r7, #0]
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	f000 fb85 	bl	800e3ca <USBD_CtlError>
              break;
 800dcc0:	bf00      	nop
          }
          break;
 800dcc2:	e004      	b.n	800dcce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800dcc4:	6839      	ldr	r1, [r7, #0]
 800dcc6:	6878      	ldr	r0, [r7, #4]
 800dcc8:	f000 fb7f 	bl	800e3ca <USBD_CtlError>
          break;
 800dccc:	bf00      	nop
      }
      break;
 800dcce:	e005      	b.n	800dcdc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800dcd0:	6839      	ldr	r1, [r7, #0]
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f000 fb79 	bl	800e3ca <USBD_CtlError>
      break;
 800dcd8:	e000      	b.n	800dcdc <USBD_StdEPReq+0x330>
      break;
 800dcda:	bf00      	nop
  }

  return ret;
 800dcdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3710      	adds	r7, #16
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
	...

0800dce8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b084      	sub	sp, #16
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
 800dcf0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	885b      	ldrh	r3, [r3, #2]
 800dd02:	0a1b      	lsrs	r3, r3, #8
 800dd04:	b29b      	uxth	r3, r3
 800dd06:	3b01      	subs	r3, #1
 800dd08:	2b0e      	cmp	r3, #14
 800dd0a:	f200 8152 	bhi.w	800dfb2 <USBD_GetDescriptor+0x2ca>
 800dd0e:	a201      	add	r2, pc, #4	@ (adr r2, 800dd14 <USBD_GetDescriptor+0x2c>)
 800dd10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd14:	0800dd85 	.word	0x0800dd85
 800dd18:	0800dd9d 	.word	0x0800dd9d
 800dd1c:	0800dddd 	.word	0x0800dddd
 800dd20:	0800dfb3 	.word	0x0800dfb3
 800dd24:	0800dfb3 	.word	0x0800dfb3
 800dd28:	0800df53 	.word	0x0800df53
 800dd2c:	0800df7f 	.word	0x0800df7f
 800dd30:	0800dfb3 	.word	0x0800dfb3
 800dd34:	0800dfb3 	.word	0x0800dfb3
 800dd38:	0800dfb3 	.word	0x0800dfb3
 800dd3c:	0800dfb3 	.word	0x0800dfb3
 800dd40:	0800dfb3 	.word	0x0800dfb3
 800dd44:	0800dfb3 	.word	0x0800dfb3
 800dd48:	0800dfb3 	.word	0x0800dfb3
 800dd4c:	0800dd51 	.word	0x0800dd51
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dd56:	69db      	ldr	r3, [r3, #28]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d00b      	beq.n	800dd74 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dd62:	69db      	ldr	r3, [r3, #28]
 800dd64:	687a      	ldr	r2, [r7, #4]
 800dd66:	7c12      	ldrb	r2, [r2, #16]
 800dd68:	f107 0108 	add.w	r1, r7, #8
 800dd6c:	4610      	mov	r0, r2
 800dd6e:	4798      	blx	r3
 800dd70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dd72:	e126      	b.n	800dfc2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dd74:	6839      	ldr	r1, [r7, #0]
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f000 fb27 	bl	800e3ca <USBD_CtlError>
        err++;
 800dd7c:	7afb      	ldrb	r3, [r7, #11]
 800dd7e:	3301      	adds	r3, #1
 800dd80:	72fb      	strb	r3, [r7, #11]
      break;
 800dd82:	e11e      	b.n	800dfc2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	687a      	ldr	r2, [r7, #4]
 800dd8e:	7c12      	ldrb	r2, [r2, #16]
 800dd90:	f107 0108 	add.w	r1, r7, #8
 800dd94:	4610      	mov	r0, r2
 800dd96:	4798      	blx	r3
 800dd98:	60f8      	str	r0, [r7, #12]
      break;
 800dd9a:	e112      	b.n	800dfc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	7c1b      	ldrb	r3, [r3, #16]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d10d      	bne.n	800ddc0 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ddaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddac:	f107 0208 	add.w	r2, r7, #8
 800ddb0:	4610      	mov	r0, r2
 800ddb2:	4798      	blx	r3
 800ddb4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	3301      	adds	r3, #1
 800ddba:	2202      	movs	r2, #2
 800ddbc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ddbe:	e100      	b.n	800dfc2 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ddc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddc8:	f107 0208 	add.w	r2, r7, #8
 800ddcc:	4610      	mov	r0, r2
 800ddce:	4798      	blx	r3
 800ddd0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	3301      	adds	r3, #1
 800ddd6:	2202      	movs	r2, #2
 800ddd8:	701a      	strb	r2, [r3, #0]
      break;
 800ddda:	e0f2      	b.n	800dfc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	885b      	ldrh	r3, [r3, #2]
 800dde0:	b2db      	uxtb	r3, r3
 800dde2:	2b05      	cmp	r3, #5
 800dde4:	f200 80ac 	bhi.w	800df40 <USBD_GetDescriptor+0x258>
 800dde8:	a201      	add	r2, pc, #4	@ (adr r2, 800ddf0 <USBD_GetDescriptor+0x108>)
 800ddea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddee:	bf00      	nop
 800ddf0:	0800de09 	.word	0x0800de09
 800ddf4:	0800de3d 	.word	0x0800de3d
 800ddf8:	0800de71 	.word	0x0800de71
 800ddfc:	0800dea5 	.word	0x0800dea5
 800de00:	0800ded9 	.word	0x0800ded9
 800de04:	0800df0d 	.word	0x0800df0d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de0e:	685b      	ldr	r3, [r3, #4]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d00b      	beq.n	800de2c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de1a:	685b      	ldr	r3, [r3, #4]
 800de1c:	687a      	ldr	r2, [r7, #4]
 800de1e:	7c12      	ldrb	r2, [r2, #16]
 800de20:	f107 0108 	add.w	r1, r7, #8
 800de24:	4610      	mov	r0, r2
 800de26:	4798      	blx	r3
 800de28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de2a:	e091      	b.n	800df50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800de2c:	6839      	ldr	r1, [r7, #0]
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f000 facb 	bl	800e3ca <USBD_CtlError>
            err++;
 800de34:	7afb      	ldrb	r3, [r7, #11]
 800de36:	3301      	adds	r3, #1
 800de38:	72fb      	strb	r3, [r7, #11]
          break;
 800de3a:	e089      	b.n	800df50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de42:	689b      	ldr	r3, [r3, #8]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d00b      	beq.n	800de60 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de4e:	689b      	ldr	r3, [r3, #8]
 800de50:	687a      	ldr	r2, [r7, #4]
 800de52:	7c12      	ldrb	r2, [r2, #16]
 800de54:	f107 0108 	add.w	r1, r7, #8
 800de58:	4610      	mov	r0, r2
 800de5a:	4798      	blx	r3
 800de5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de5e:	e077      	b.n	800df50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800de60:	6839      	ldr	r1, [r7, #0]
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	f000 fab1 	bl	800e3ca <USBD_CtlError>
            err++;
 800de68:	7afb      	ldrb	r3, [r7, #11]
 800de6a:	3301      	adds	r3, #1
 800de6c:	72fb      	strb	r3, [r7, #11]
          break;
 800de6e:	e06f      	b.n	800df50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de76:	68db      	ldr	r3, [r3, #12]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d00b      	beq.n	800de94 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de82:	68db      	ldr	r3, [r3, #12]
 800de84:	687a      	ldr	r2, [r7, #4]
 800de86:	7c12      	ldrb	r2, [r2, #16]
 800de88:	f107 0108 	add.w	r1, r7, #8
 800de8c:	4610      	mov	r0, r2
 800de8e:	4798      	blx	r3
 800de90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de92:	e05d      	b.n	800df50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800de94:	6839      	ldr	r1, [r7, #0]
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f000 fa97 	bl	800e3ca <USBD_CtlError>
            err++;
 800de9c:	7afb      	ldrb	r3, [r7, #11]
 800de9e:	3301      	adds	r3, #1
 800dea0:	72fb      	strb	r3, [r7, #11]
          break;
 800dea2:	e055      	b.n	800df50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800deaa:	691b      	ldr	r3, [r3, #16]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d00b      	beq.n	800dec8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800deb6:	691b      	ldr	r3, [r3, #16]
 800deb8:	687a      	ldr	r2, [r7, #4]
 800deba:	7c12      	ldrb	r2, [r2, #16]
 800debc:	f107 0108 	add.w	r1, r7, #8
 800dec0:	4610      	mov	r0, r2
 800dec2:	4798      	blx	r3
 800dec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dec6:	e043      	b.n	800df50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dec8:	6839      	ldr	r1, [r7, #0]
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f000 fa7d 	bl	800e3ca <USBD_CtlError>
            err++;
 800ded0:	7afb      	ldrb	r3, [r7, #11]
 800ded2:	3301      	adds	r3, #1
 800ded4:	72fb      	strb	r3, [r7, #11]
          break;
 800ded6:	e03b      	b.n	800df50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dede:	695b      	ldr	r3, [r3, #20]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d00b      	beq.n	800defc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800deea:	695b      	ldr	r3, [r3, #20]
 800deec:	687a      	ldr	r2, [r7, #4]
 800deee:	7c12      	ldrb	r2, [r2, #16]
 800def0:	f107 0108 	add.w	r1, r7, #8
 800def4:	4610      	mov	r0, r2
 800def6:	4798      	blx	r3
 800def8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800defa:	e029      	b.n	800df50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800defc:	6839      	ldr	r1, [r7, #0]
 800defe:	6878      	ldr	r0, [r7, #4]
 800df00:	f000 fa63 	bl	800e3ca <USBD_CtlError>
            err++;
 800df04:	7afb      	ldrb	r3, [r7, #11]
 800df06:	3301      	adds	r3, #1
 800df08:	72fb      	strb	r3, [r7, #11]
          break;
 800df0a:	e021      	b.n	800df50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800df12:	699b      	ldr	r3, [r3, #24]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d00b      	beq.n	800df30 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800df1e:	699b      	ldr	r3, [r3, #24]
 800df20:	687a      	ldr	r2, [r7, #4]
 800df22:	7c12      	ldrb	r2, [r2, #16]
 800df24:	f107 0108 	add.w	r1, r7, #8
 800df28:	4610      	mov	r0, r2
 800df2a:	4798      	blx	r3
 800df2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800df2e:	e00f      	b.n	800df50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800df30:	6839      	ldr	r1, [r7, #0]
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f000 fa49 	bl	800e3ca <USBD_CtlError>
            err++;
 800df38:	7afb      	ldrb	r3, [r7, #11]
 800df3a:	3301      	adds	r3, #1
 800df3c:	72fb      	strb	r3, [r7, #11]
          break;
 800df3e:	e007      	b.n	800df50 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800df40:	6839      	ldr	r1, [r7, #0]
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f000 fa41 	bl	800e3ca <USBD_CtlError>
          err++;
 800df48:	7afb      	ldrb	r3, [r7, #11]
 800df4a:	3301      	adds	r3, #1
 800df4c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800df4e:	bf00      	nop
      }
      break;
 800df50:	e037      	b.n	800dfc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	7c1b      	ldrb	r3, [r3, #16]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d109      	bne.n	800df6e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800df62:	f107 0208 	add.w	r2, r7, #8
 800df66:	4610      	mov	r0, r2
 800df68:	4798      	blx	r3
 800df6a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800df6c:	e029      	b.n	800dfc2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800df6e:	6839      	ldr	r1, [r7, #0]
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f000 fa2a 	bl	800e3ca <USBD_CtlError>
        err++;
 800df76:	7afb      	ldrb	r3, [r7, #11]
 800df78:	3301      	adds	r3, #1
 800df7a:	72fb      	strb	r3, [r7, #11]
      break;
 800df7c:	e021      	b.n	800dfc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	7c1b      	ldrb	r3, [r3, #16]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d10d      	bne.n	800dfa2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df8e:	f107 0208 	add.w	r2, r7, #8
 800df92:	4610      	mov	r0, r2
 800df94:	4798      	blx	r3
 800df96:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	3301      	adds	r3, #1
 800df9c:	2207      	movs	r2, #7
 800df9e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dfa0:	e00f      	b.n	800dfc2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dfa2:	6839      	ldr	r1, [r7, #0]
 800dfa4:	6878      	ldr	r0, [r7, #4]
 800dfa6:	f000 fa10 	bl	800e3ca <USBD_CtlError>
        err++;
 800dfaa:	7afb      	ldrb	r3, [r7, #11]
 800dfac:	3301      	adds	r3, #1
 800dfae:	72fb      	strb	r3, [r7, #11]
      break;
 800dfb0:	e007      	b.n	800dfc2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800dfb2:	6839      	ldr	r1, [r7, #0]
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f000 fa08 	bl	800e3ca <USBD_CtlError>
      err++;
 800dfba:	7afb      	ldrb	r3, [r7, #11]
 800dfbc:	3301      	adds	r3, #1
 800dfbe:	72fb      	strb	r3, [r7, #11]
      break;
 800dfc0:	bf00      	nop
  }

  if (err != 0U)
 800dfc2:	7afb      	ldrb	r3, [r7, #11]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d11e      	bne.n	800e006 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	88db      	ldrh	r3, [r3, #6]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d016      	beq.n	800dffe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800dfd0:	893b      	ldrh	r3, [r7, #8]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d00e      	beq.n	800dff4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	88da      	ldrh	r2, [r3, #6]
 800dfda:	893b      	ldrh	r3, [r7, #8]
 800dfdc:	4293      	cmp	r3, r2
 800dfde:	bf28      	it	cs
 800dfe0:	4613      	movcs	r3, r2
 800dfe2:	b29b      	uxth	r3, r3
 800dfe4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800dfe6:	893b      	ldrh	r3, [r7, #8]
 800dfe8:	461a      	mov	r2, r3
 800dfea:	68f9      	ldr	r1, [r7, #12]
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	f000 fa5d 	bl	800e4ac <USBD_CtlSendData>
 800dff2:	e009      	b.n	800e008 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800dff4:	6839      	ldr	r1, [r7, #0]
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f000 f9e7 	bl	800e3ca <USBD_CtlError>
 800dffc:	e004      	b.n	800e008 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f000 faae 	bl	800e560 <USBD_CtlSendStatus>
 800e004:	e000      	b.n	800e008 <USBD_GetDescriptor+0x320>
    return;
 800e006:	bf00      	nop
  }
}
 800e008:	3710      	adds	r7, #16
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}
 800e00e:	bf00      	nop

0800e010 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b084      	sub	sp, #16
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
 800e018:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	889b      	ldrh	r3, [r3, #4]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d131      	bne.n	800e086 <USBD_SetAddress+0x76>
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	88db      	ldrh	r3, [r3, #6]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d12d      	bne.n	800e086 <USBD_SetAddress+0x76>
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	885b      	ldrh	r3, [r3, #2]
 800e02e:	2b7f      	cmp	r3, #127	@ 0x7f
 800e030:	d829      	bhi.n	800e086 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	885b      	ldrh	r3, [r3, #2]
 800e036:	b2db      	uxtb	r3, r3
 800e038:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e03c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e044:	b2db      	uxtb	r3, r3
 800e046:	2b03      	cmp	r3, #3
 800e048:	d104      	bne.n	800e054 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e04a:	6839      	ldr	r1, [r7, #0]
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f000 f9bc 	bl	800e3ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e052:	e01d      	b.n	800e090 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	7bfa      	ldrb	r2, [r7, #15]
 800e058:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e05c:	7bfb      	ldrb	r3, [r7, #15]
 800e05e:	4619      	mov	r1, r3
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f000 ff53 	bl	800ef0c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f000 fa7a 	bl	800e560 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e06c:	7bfb      	ldrb	r3, [r7, #15]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d004      	beq.n	800e07c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2202      	movs	r2, #2
 800e076:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e07a:	e009      	b.n	800e090 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2201      	movs	r2, #1
 800e080:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e084:	e004      	b.n	800e090 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e086:	6839      	ldr	r1, [r7, #0]
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f000 f99e 	bl	800e3ca <USBD_CtlError>
  }
}
 800e08e:	bf00      	nop
 800e090:	bf00      	nop
 800e092:	3710      	adds	r7, #16
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}

0800e098 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b084      	sub	sp, #16
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
 800e0a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	885b      	ldrh	r3, [r3, #2]
 800e0aa:	b2da      	uxtb	r2, r3
 800e0ac:	4b4e      	ldr	r3, [pc, #312]	@ (800e1e8 <USBD_SetConfig+0x150>)
 800e0ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e0b0:	4b4d      	ldr	r3, [pc, #308]	@ (800e1e8 <USBD_SetConfig+0x150>)
 800e0b2:	781b      	ldrb	r3, [r3, #0]
 800e0b4:	2b01      	cmp	r3, #1
 800e0b6:	d905      	bls.n	800e0c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e0b8:	6839      	ldr	r1, [r7, #0]
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f000 f985 	bl	800e3ca <USBD_CtlError>
    return USBD_FAIL;
 800e0c0:	2303      	movs	r3, #3
 800e0c2:	e08c      	b.n	800e1de <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e0ca:	b2db      	uxtb	r3, r3
 800e0cc:	2b02      	cmp	r3, #2
 800e0ce:	d002      	beq.n	800e0d6 <USBD_SetConfig+0x3e>
 800e0d0:	2b03      	cmp	r3, #3
 800e0d2:	d029      	beq.n	800e128 <USBD_SetConfig+0x90>
 800e0d4:	e075      	b.n	800e1c2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e0d6:	4b44      	ldr	r3, [pc, #272]	@ (800e1e8 <USBD_SetConfig+0x150>)
 800e0d8:	781b      	ldrb	r3, [r3, #0]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d020      	beq.n	800e120 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e0de:	4b42      	ldr	r3, [pc, #264]	@ (800e1e8 <USBD_SetConfig+0x150>)
 800e0e0:	781b      	ldrb	r3, [r3, #0]
 800e0e2:	461a      	mov	r2, r3
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e0e8:	4b3f      	ldr	r3, [pc, #252]	@ (800e1e8 <USBD_SetConfig+0x150>)
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	4619      	mov	r1, r3
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f7fe ffbf 	bl	800d072 <USBD_SetClassConfig>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e0f8:	7bfb      	ldrb	r3, [r7, #15]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d008      	beq.n	800e110 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e0fe:	6839      	ldr	r1, [r7, #0]
 800e100:	6878      	ldr	r0, [r7, #4]
 800e102:	f000 f962 	bl	800e3ca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2202      	movs	r2, #2
 800e10a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e10e:	e065      	b.n	800e1dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e110:	6878      	ldr	r0, [r7, #4]
 800e112:	f000 fa25 	bl	800e560 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2203      	movs	r2, #3
 800e11a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e11e:	e05d      	b.n	800e1dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f000 fa1d 	bl	800e560 <USBD_CtlSendStatus>
      break;
 800e126:	e059      	b.n	800e1dc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e128:	4b2f      	ldr	r3, [pc, #188]	@ (800e1e8 <USBD_SetConfig+0x150>)
 800e12a:	781b      	ldrb	r3, [r3, #0]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d112      	bne.n	800e156 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2202      	movs	r2, #2
 800e134:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e138:	4b2b      	ldr	r3, [pc, #172]	@ (800e1e8 <USBD_SetConfig+0x150>)
 800e13a:	781b      	ldrb	r3, [r3, #0]
 800e13c:	461a      	mov	r2, r3
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e142:	4b29      	ldr	r3, [pc, #164]	@ (800e1e8 <USBD_SetConfig+0x150>)
 800e144:	781b      	ldrb	r3, [r3, #0]
 800e146:	4619      	mov	r1, r3
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f7fe ffae 	bl	800d0aa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e14e:	6878      	ldr	r0, [r7, #4]
 800e150:	f000 fa06 	bl	800e560 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e154:	e042      	b.n	800e1dc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e156:	4b24      	ldr	r3, [pc, #144]	@ (800e1e8 <USBD_SetConfig+0x150>)
 800e158:	781b      	ldrb	r3, [r3, #0]
 800e15a:	461a      	mov	r2, r3
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	685b      	ldr	r3, [r3, #4]
 800e160:	429a      	cmp	r2, r3
 800e162:	d02a      	beq.n	800e1ba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	685b      	ldr	r3, [r3, #4]
 800e168:	b2db      	uxtb	r3, r3
 800e16a:	4619      	mov	r1, r3
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f7fe ff9c 	bl	800d0aa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e172:	4b1d      	ldr	r3, [pc, #116]	@ (800e1e8 <USBD_SetConfig+0x150>)
 800e174:	781b      	ldrb	r3, [r3, #0]
 800e176:	461a      	mov	r2, r3
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e17c:	4b1a      	ldr	r3, [pc, #104]	@ (800e1e8 <USBD_SetConfig+0x150>)
 800e17e:	781b      	ldrb	r3, [r3, #0]
 800e180:	4619      	mov	r1, r3
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f7fe ff75 	bl	800d072 <USBD_SetClassConfig>
 800e188:	4603      	mov	r3, r0
 800e18a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e18c:	7bfb      	ldrb	r3, [r7, #15]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d00f      	beq.n	800e1b2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e192:	6839      	ldr	r1, [r7, #0]
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f000 f918 	bl	800e3ca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	685b      	ldr	r3, [r3, #4]
 800e19e:	b2db      	uxtb	r3, r3
 800e1a0:	4619      	mov	r1, r3
 800e1a2:	6878      	ldr	r0, [r7, #4]
 800e1a4:	f7fe ff81 	bl	800d0aa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2202      	movs	r2, #2
 800e1ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e1b0:	e014      	b.n	800e1dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f000 f9d4 	bl	800e560 <USBD_CtlSendStatus>
      break;
 800e1b8:	e010      	b.n	800e1dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	f000 f9d0 	bl	800e560 <USBD_CtlSendStatus>
      break;
 800e1c0:	e00c      	b.n	800e1dc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e1c2:	6839      	ldr	r1, [r7, #0]
 800e1c4:	6878      	ldr	r0, [r7, #4]
 800e1c6:	f000 f900 	bl	800e3ca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e1ca:	4b07      	ldr	r3, [pc, #28]	@ (800e1e8 <USBD_SetConfig+0x150>)
 800e1cc:	781b      	ldrb	r3, [r3, #0]
 800e1ce:	4619      	mov	r1, r3
 800e1d0:	6878      	ldr	r0, [r7, #4]
 800e1d2:	f7fe ff6a 	bl	800d0aa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e1d6:	2303      	movs	r3, #3
 800e1d8:	73fb      	strb	r3, [r7, #15]
      break;
 800e1da:	bf00      	nop
  }

  return ret;
 800e1dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	3710      	adds	r7, #16
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}
 800e1e6:	bf00      	nop
 800e1e8:	20000704 	.word	0x20000704

0800e1ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b082      	sub	sp, #8
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	88db      	ldrh	r3, [r3, #6]
 800e1fa:	2b01      	cmp	r3, #1
 800e1fc:	d004      	beq.n	800e208 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e1fe:	6839      	ldr	r1, [r7, #0]
 800e200:	6878      	ldr	r0, [r7, #4]
 800e202:	f000 f8e2 	bl	800e3ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e206:	e023      	b.n	800e250 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e20e:	b2db      	uxtb	r3, r3
 800e210:	2b02      	cmp	r3, #2
 800e212:	dc02      	bgt.n	800e21a <USBD_GetConfig+0x2e>
 800e214:	2b00      	cmp	r3, #0
 800e216:	dc03      	bgt.n	800e220 <USBD_GetConfig+0x34>
 800e218:	e015      	b.n	800e246 <USBD_GetConfig+0x5a>
 800e21a:	2b03      	cmp	r3, #3
 800e21c:	d00b      	beq.n	800e236 <USBD_GetConfig+0x4a>
 800e21e:	e012      	b.n	800e246 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2200      	movs	r2, #0
 800e224:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	3308      	adds	r3, #8
 800e22a:	2201      	movs	r2, #1
 800e22c:	4619      	mov	r1, r3
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f000 f93c 	bl	800e4ac <USBD_CtlSendData>
        break;
 800e234:	e00c      	b.n	800e250 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	3304      	adds	r3, #4
 800e23a:	2201      	movs	r2, #1
 800e23c:	4619      	mov	r1, r3
 800e23e:	6878      	ldr	r0, [r7, #4]
 800e240:	f000 f934 	bl	800e4ac <USBD_CtlSendData>
        break;
 800e244:	e004      	b.n	800e250 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e246:	6839      	ldr	r1, [r7, #0]
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	f000 f8be 	bl	800e3ca <USBD_CtlError>
        break;
 800e24e:	bf00      	nop
}
 800e250:	bf00      	nop
 800e252:	3708      	adds	r7, #8
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}

0800e258 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b082      	sub	sp, #8
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
 800e260:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e268:	b2db      	uxtb	r3, r3
 800e26a:	3b01      	subs	r3, #1
 800e26c:	2b02      	cmp	r3, #2
 800e26e:	d81e      	bhi.n	800e2ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	88db      	ldrh	r3, [r3, #6]
 800e274:	2b02      	cmp	r3, #2
 800e276:	d004      	beq.n	800e282 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e278:	6839      	ldr	r1, [r7, #0]
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f000 f8a5 	bl	800e3ca <USBD_CtlError>
        break;
 800e280:	e01a      	b.n	800e2b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	2201      	movs	r2, #1
 800e286:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d005      	beq.n	800e29e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	68db      	ldr	r3, [r3, #12]
 800e296:	f043 0202 	orr.w	r2, r3, #2
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	330c      	adds	r3, #12
 800e2a2:	2202      	movs	r2, #2
 800e2a4:	4619      	mov	r1, r3
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f000 f900 	bl	800e4ac <USBD_CtlSendData>
      break;
 800e2ac:	e004      	b.n	800e2b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e2ae:	6839      	ldr	r1, [r7, #0]
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f000 f88a 	bl	800e3ca <USBD_CtlError>
      break;
 800e2b6:	bf00      	nop
  }
}
 800e2b8:	bf00      	nop
 800e2ba:	3708      	adds	r7, #8
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}

0800e2c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b082      	sub	sp, #8
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
 800e2c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	885b      	ldrh	r3, [r3, #2]
 800e2ce:	2b01      	cmp	r3, #1
 800e2d0:	d107      	bne.n	800e2e2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2201      	movs	r2, #1
 800e2d6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f000 f940 	bl	800e560 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e2e0:	e013      	b.n	800e30a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	885b      	ldrh	r3, [r3, #2]
 800e2e6:	2b02      	cmp	r3, #2
 800e2e8:	d10b      	bne.n	800e302 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	889b      	ldrh	r3, [r3, #4]
 800e2ee:	0a1b      	lsrs	r3, r3, #8
 800e2f0:	b29b      	uxth	r3, r3
 800e2f2:	b2da      	uxtb	r2, r3
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f000 f930 	bl	800e560 <USBD_CtlSendStatus>
}
 800e300:	e003      	b.n	800e30a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e302:	6839      	ldr	r1, [r7, #0]
 800e304:	6878      	ldr	r0, [r7, #4]
 800e306:	f000 f860 	bl	800e3ca <USBD_CtlError>
}
 800e30a:	bf00      	nop
 800e30c:	3708      	adds	r7, #8
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}

0800e312 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e312:	b580      	push	{r7, lr}
 800e314:	b082      	sub	sp, #8
 800e316:	af00      	add	r7, sp, #0
 800e318:	6078      	str	r0, [r7, #4]
 800e31a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e322:	b2db      	uxtb	r3, r3
 800e324:	3b01      	subs	r3, #1
 800e326:	2b02      	cmp	r3, #2
 800e328:	d80b      	bhi.n	800e342 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	885b      	ldrh	r3, [r3, #2]
 800e32e:	2b01      	cmp	r3, #1
 800e330:	d10c      	bne.n	800e34c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2200      	movs	r2, #0
 800e336:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f000 f910 	bl	800e560 <USBD_CtlSendStatus>
      }
      break;
 800e340:	e004      	b.n	800e34c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e342:	6839      	ldr	r1, [r7, #0]
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f000 f840 	bl	800e3ca <USBD_CtlError>
      break;
 800e34a:	e000      	b.n	800e34e <USBD_ClrFeature+0x3c>
      break;
 800e34c:	bf00      	nop
  }
}
 800e34e:	bf00      	nop
 800e350:	3708      	adds	r7, #8
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}

0800e356 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e356:	b580      	push	{r7, lr}
 800e358:	b084      	sub	sp, #16
 800e35a:	af00      	add	r7, sp, #0
 800e35c:	6078      	str	r0, [r7, #4]
 800e35e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	781a      	ldrb	r2, [r3, #0]
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	3301      	adds	r3, #1
 800e370:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	781a      	ldrb	r2, [r3, #0]
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	3301      	adds	r3, #1
 800e37e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e380:	68f8      	ldr	r0, [r7, #12]
 800e382:	f7ff fa16 	bl	800d7b2 <SWAPBYTE>
 800e386:	4603      	mov	r3, r0
 800e388:	461a      	mov	r2, r3
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	3301      	adds	r3, #1
 800e392:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	3301      	adds	r3, #1
 800e398:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e39a:	68f8      	ldr	r0, [r7, #12]
 800e39c:	f7ff fa09 	bl	800d7b2 <SWAPBYTE>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	461a      	mov	r2, r3
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	3301      	adds	r3, #1
 800e3ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e3b4:	68f8      	ldr	r0, [r7, #12]
 800e3b6:	f7ff f9fc 	bl	800d7b2 <SWAPBYTE>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	461a      	mov	r2, r3
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	80da      	strh	r2, [r3, #6]
}
 800e3c2:	bf00      	nop
 800e3c4:	3710      	adds	r7, #16
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}

0800e3ca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3ca:	b580      	push	{r7, lr}
 800e3cc:	b082      	sub	sp, #8
 800e3ce:	af00      	add	r7, sp, #0
 800e3d0:	6078      	str	r0, [r7, #4]
 800e3d2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e3d4:	2180      	movs	r1, #128	@ 0x80
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f000 fd2e 	bl	800ee38 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e3dc:	2100      	movs	r1, #0
 800e3de:	6878      	ldr	r0, [r7, #4]
 800e3e0:	f000 fd2a 	bl	800ee38 <USBD_LL_StallEP>
}
 800e3e4:	bf00      	nop
 800e3e6:	3708      	adds	r7, #8
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}

0800e3ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b086      	sub	sp, #24
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	60f8      	str	r0, [r7, #12]
 800e3f4:	60b9      	str	r1, [r7, #8]
 800e3f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d036      	beq.n	800e470 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e406:	6938      	ldr	r0, [r7, #16]
 800e408:	f000 f836 	bl	800e478 <USBD_GetLen>
 800e40c:	4603      	mov	r3, r0
 800e40e:	3301      	adds	r3, #1
 800e410:	b29b      	uxth	r3, r3
 800e412:	005b      	lsls	r3, r3, #1
 800e414:	b29a      	uxth	r2, r3
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e41a:	7dfb      	ldrb	r3, [r7, #23]
 800e41c:	68ba      	ldr	r2, [r7, #8]
 800e41e:	4413      	add	r3, r2
 800e420:	687a      	ldr	r2, [r7, #4]
 800e422:	7812      	ldrb	r2, [r2, #0]
 800e424:	701a      	strb	r2, [r3, #0]
  idx++;
 800e426:	7dfb      	ldrb	r3, [r7, #23]
 800e428:	3301      	adds	r3, #1
 800e42a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e42c:	7dfb      	ldrb	r3, [r7, #23]
 800e42e:	68ba      	ldr	r2, [r7, #8]
 800e430:	4413      	add	r3, r2
 800e432:	2203      	movs	r2, #3
 800e434:	701a      	strb	r2, [r3, #0]
  idx++;
 800e436:	7dfb      	ldrb	r3, [r7, #23]
 800e438:	3301      	adds	r3, #1
 800e43a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e43c:	e013      	b.n	800e466 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e43e:	7dfb      	ldrb	r3, [r7, #23]
 800e440:	68ba      	ldr	r2, [r7, #8]
 800e442:	4413      	add	r3, r2
 800e444:	693a      	ldr	r2, [r7, #16]
 800e446:	7812      	ldrb	r2, [r2, #0]
 800e448:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e44a:	693b      	ldr	r3, [r7, #16]
 800e44c:	3301      	adds	r3, #1
 800e44e:	613b      	str	r3, [r7, #16]
    idx++;
 800e450:	7dfb      	ldrb	r3, [r7, #23]
 800e452:	3301      	adds	r3, #1
 800e454:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e456:	7dfb      	ldrb	r3, [r7, #23]
 800e458:	68ba      	ldr	r2, [r7, #8]
 800e45a:	4413      	add	r3, r2
 800e45c:	2200      	movs	r2, #0
 800e45e:	701a      	strb	r2, [r3, #0]
    idx++;
 800e460:	7dfb      	ldrb	r3, [r7, #23]
 800e462:	3301      	adds	r3, #1
 800e464:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e466:	693b      	ldr	r3, [r7, #16]
 800e468:	781b      	ldrb	r3, [r3, #0]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d1e7      	bne.n	800e43e <USBD_GetString+0x52>
 800e46e:	e000      	b.n	800e472 <USBD_GetString+0x86>
    return;
 800e470:	bf00      	nop
  }
}
 800e472:	3718      	adds	r7, #24
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}

0800e478 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e478:	b480      	push	{r7}
 800e47a:	b085      	sub	sp, #20
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e480:	2300      	movs	r3, #0
 800e482:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e488:	e005      	b.n	800e496 <USBD_GetLen+0x1e>
  {
    len++;
 800e48a:	7bfb      	ldrb	r3, [r7, #15]
 800e48c:	3301      	adds	r3, #1
 800e48e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	3301      	adds	r3, #1
 800e494:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	781b      	ldrb	r3, [r3, #0]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d1f5      	bne.n	800e48a <USBD_GetLen+0x12>
  }

  return len;
 800e49e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	3714      	adds	r7, #20
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4aa:	4770      	bx	lr

0800e4ac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b084      	sub	sp, #16
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	60f8      	str	r0, [r7, #12]
 800e4b4:	60b9      	str	r1, [r7, #8]
 800e4b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	2202      	movs	r2, #2
 800e4bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	687a      	ldr	r2, [r7, #4]
 800e4c4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	687a      	ldr	r2, [r7, #4]
 800e4ca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	68ba      	ldr	r2, [r7, #8]
 800e4d0:	2100      	movs	r1, #0
 800e4d2:	68f8      	ldr	r0, [r7, #12]
 800e4d4:	f000 fd39 	bl	800ef4a <USBD_LL_Transmit>

  return USBD_OK;
 800e4d8:	2300      	movs	r3, #0
}
 800e4da:	4618      	mov	r0, r3
 800e4dc:	3710      	adds	r7, #16
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bd80      	pop	{r7, pc}

0800e4e2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e4e2:	b580      	push	{r7, lr}
 800e4e4:	b084      	sub	sp, #16
 800e4e6:	af00      	add	r7, sp, #0
 800e4e8:	60f8      	str	r0, [r7, #12]
 800e4ea:	60b9      	str	r1, [r7, #8]
 800e4ec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	68ba      	ldr	r2, [r7, #8]
 800e4f2:	2100      	movs	r1, #0
 800e4f4:	68f8      	ldr	r0, [r7, #12]
 800e4f6:	f000 fd28 	bl	800ef4a <USBD_LL_Transmit>

  return USBD_OK;
 800e4fa:	2300      	movs	r3, #0
}
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	3710      	adds	r7, #16
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}

0800e504 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b084      	sub	sp, #16
 800e508:	af00      	add	r7, sp, #0
 800e50a:	60f8      	str	r0, [r7, #12]
 800e50c:	60b9      	str	r1, [r7, #8]
 800e50e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	2203      	movs	r2, #3
 800e514:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	687a      	ldr	r2, [r7, #4]
 800e51c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	687a      	ldr	r2, [r7, #4]
 800e524:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	68ba      	ldr	r2, [r7, #8]
 800e52c:	2100      	movs	r1, #0
 800e52e:	68f8      	ldr	r0, [r7, #12]
 800e530:	f000 fd2c 	bl	800ef8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e534:	2300      	movs	r3, #0
}
 800e536:	4618      	mov	r0, r3
 800e538:	3710      	adds	r7, #16
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bd80      	pop	{r7, pc}

0800e53e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e53e:	b580      	push	{r7, lr}
 800e540:	b084      	sub	sp, #16
 800e542:	af00      	add	r7, sp, #0
 800e544:	60f8      	str	r0, [r7, #12]
 800e546:	60b9      	str	r1, [r7, #8]
 800e548:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	68ba      	ldr	r2, [r7, #8]
 800e54e:	2100      	movs	r1, #0
 800e550:	68f8      	ldr	r0, [r7, #12]
 800e552:	f000 fd1b 	bl	800ef8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e556:	2300      	movs	r3, #0
}
 800e558:	4618      	mov	r0, r3
 800e55a:	3710      	adds	r7, #16
 800e55c:	46bd      	mov	sp, r7
 800e55e:	bd80      	pop	{r7, pc}

0800e560 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b082      	sub	sp, #8
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2204      	movs	r2, #4
 800e56c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e570:	2300      	movs	r3, #0
 800e572:	2200      	movs	r2, #0
 800e574:	2100      	movs	r1, #0
 800e576:	6878      	ldr	r0, [r7, #4]
 800e578:	f000 fce7 	bl	800ef4a <USBD_LL_Transmit>

  return USBD_OK;
 800e57c:	2300      	movs	r3, #0
}
 800e57e:	4618      	mov	r0, r3
 800e580:	3708      	adds	r7, #8
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}

0800e586 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e586:	b580      	push	{r7, lr}
 800e588:	b082      	sub	sp, #8
 800e58a:	af00      	add	r7, sp, #0
 800e58c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	2205      	movs	r2, #5
 800e592:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e596:	2300      	movs	r3, #0
 800e598:	2200      	movs	r2, #0
 800e59a:	2100      	movs	r1, #0
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f000 fcf5 	bl	800ef8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e5a2:	2300      	movs	r3, #0
}
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	3708      	adds	r7, #8
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}

0800e5ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	4912      	ldr	r1, [pc, #72]	@ (800e5fc <MX_USB_DEVICE_Init+0x50>)
 800e5b4:	4812      	ldr	r0, [pc, #72]	@ (800e600 <MX_USB_DEVICE_Init+0x54>)
 800e5b6:	f7fe fcdf 	bl	800cf78 <USBD_Init>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d001      	beq.n	800e5c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e5c0:	f7f5 f970 	bl	80038a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e5c4:	490f      	ldr	r1, [pc, #60]	@ (800e604 <MX_USB_DEVICE_Init+0x58>)
 800e5c6:	480e      	ldr	r0, [pc, #56]	@ (800e600 <MX_USB_DEVICE_Init+0x54>)
 800e5c8:	f7fe fd06 	bl	800cfd8 <USBD_RegisterClass>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d001      	beq.n	800e5d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e5d2:	f7f5 f967 	bl	80038a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e5d6:	490c      	ldr	r1, [pc, #48]	@ (800e608 <MX_USB_DEVICE_Init+0x5c>)
 800e5d8:	4809      	ldr	r0, [pc, #36]	@ (800e600 <MX_USB_DEVICE_Init+0x54>)
 800e5da:	f7fe fbfd 	bl	800cdd8 <USBD_CDC_RegisterInterface>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d001      	beq.n	800e5e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e5e4:	f7f5 f95e 	bl	80038a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e5e8:	4805      	ldr	r0, [pc, #20]	@ (800e600 <MX_USB_DEVICE_Init+0x54>)
 800e5ea:	f7fe fd2b 	bl	800d044 <USBD_Start>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d001      	beq.n	800e5f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e5f4:	f7f5 f956 	bl	80038a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e5f8:	bf00      	nop
 800e5fa:	bd80      	pop	{r7, pc}
 800e5fc:	200000d8 	.word	0x200000d8
 800e600:	20000708 	.word	0x20000708
 800e604:	20000044 	.word	0x20000044
 800e608:	200000c4 	.word	0x200000c4

0800e60c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e610:	2200      	movs	r2, #0
 800e612:	4905      	ldr	r1, [pc, #20]	@ (800e628 <CDC_Init_FS+0x1c>)
 800e614:	4805      	ldr	r0, [pc, #20]	@ (800e62c <CDC_Init_FS+0x20>)
 800e616:	f7fe fbf9 	bl	800ce0c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e61a:	4905      	ldr	r1, [pc, #20]	@ (800e630 <CDC_Init_FS+0x24>)
 800e61c:	4803      	ldr	r0, [pc, #12]	@ (800e62c <CDC_Init_FS+0x20>)
 800e61e:	f7fe fc17 	bl	800ce50 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e622:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e624:	4618      	mov	r0, r3
 800e626:	bd80      	pop	{r7, pc}
 800e628:	200011e4 	.word	0x200011e4
 800e62c:	20000708 	.word	0x20000708
 800e630:	200009e4 	.word	0x200009e4

0800e634 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e634:	b480      	push	{r7}
 800e636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e638:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	46bd      	mov	sp, r7
 800e63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e642:	4770      	bx	lr

0800e644 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e644:	b480      	push	{r7}
 800e646:	b083      	sub	sp, #12
 800e648:	af00      	add	r7, sp, #0
 800e64a:	4603      	mov	r3, r0
 800e64c:	6039      	str	r1, [r7, #0]
 800e64e:	71fb      	strb	r3, [r7, #7]
 800e650:	4613      	mov	r3, r2
 800e652:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e654:	79fb      	ldrb	r3, [r7, #7]
 800e656:	2b23      	cmp	r3, #35	@ 0x23
 800e658:	d84a      	bhi.n	800e6f0 <CDC_Control_FS+0xac>
 800e65a:	a201      	add	r2, pc, #4	@ (adr r2, 800e660 <CDC_Control_FS+0x1c>)
 800e65c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e660:	0800e6f1 	.word	0x0800e6f1
 800e664:	0800e6f1 	.word	0x0800e6f1
 800e668:	0800e6f1 	.word	0x0800e6f1
 800e66c:	0800e6f1 	.word	0x0800e6f1
 800e670:	0800e6f1 	.word	0x0800e6f1
 800e674:	0800e6f1 	.word	0x0800e6f1
 800e678:	0800e6f1 	.word	0x0800e6f1
 800e67c:	0800e6f1 	.word	0x0800e6f1
 800e680:	0800e6f1 	.word	0x0800e6f1
 800e684:	0800e6f1 	.word	0x0800e6f1
 800e688:	0800e6f1 	.word	0x0800e6f1
 800e68c:	0800e6f1 	.word	0x0800e6f1
 800e690:	0800e6f1 	.word	0x0800e6f1
 800e694:	0800e6f1 	.word	0x0800e6f1
 800e698:	0800e6f1 	.word	0x0800e6f1
 800e69c:	0800e6f1 	.word	0x0800e6f1
 800e6a0:	0800e6f1 	.word	0x0800e6f1
 800e6a4:	0800e6f1 	.word	0x0800e6f1
 800e6a8:	0800e6f1 	.word	0x0800e6f1
 800e6ac:	0800e6f1 	.word	0x0800e6f1
 800e6b0:	0800e6f1 	.word	0x0800e6f1
 800e6b4:	0800e6f1 	.word	0x0800e6f1
 800e6b8:	0800e6f1 	.word	0x0800e6f1
 800e6bc:	0800e6f1 	.word	0x0800e6f1
 800e6c0:	0800e6f1 	.word	0x0800e6f1
 800e6c4:	0800e6f1 	.word	0x0800e6f1
 800e6c8:	0800e6f1 	.word	0x0800e6f1
 800e6cc:	0800e6f1 	.word	0x0800e6f1
 800e6d0:	0800e6f1 	.word	0x0800e6f1
 800e6d4:	0800e6f1 	.word	0x0800e6f1
 800e6d8:	0800e6f1 	.word	0x0800e6f1
 800e6dc:	0800e6f1 	.word	0x0800e6f1
 800e6e0:	0800e6f1 	.word	0x0800e6f1
 800e6e4:	0800e6f1 	.word	0x0800e6f1
 800e6e8:	0800e6f1 	.word	0x0800e6f1
 800e6ec:	0800e6f1 	.word	0x0800e6f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e6f0:	bf00      	nop
  }

  return (USBD_OK);
 800e6f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	370c      	adds	r7, #12
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fe:	4770      	bx	lr

0800e700 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b082      	sub	sp, #8
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e70a:	6879      	ldr	r1, [r7, #4]
 800e70c:	480a      	ldr	r0, [pc, #40]	@ (800e738 <CDC_Receive_FS+0x38>)
 800e70e:	f7fe fb9f 	bl	800ce50 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e712:	4809      	ldr	r0, [pc, #36]	@ (800e738 <CDC_Receive_FS+0x38>)
 800e714:	f7fe fbfa 	bl	800cf0c <USBD_CDC_ReceivePacket>

  usb_rx_flag=1;
 800e718:	4b08      	ldr	r3, [pc, #32]	@ (800e73c <CDC_Receive_FS+0x3c>)
 800e71a:	2201      	movs	r2, #1
 800e71c:	701a      	strb	r2, [r3, #0]
  memcpy(usb_rx_buffer, Buf, *Len);
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	461a      	mov	r2, r3
 800e724:	6879      	ldr	r1, [r7, #4]
 800e726:	4806      	ldr	r0, [pc, #24]	@ (800e740 <CDC_Receive_FS+0x40>)
 800e728:	f000 fe6e 	bl	800f408 <memcpy>


  return (USBD_OK);
 800e72c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e72e:	4618      	mov	r0, r3
 800e730:	3708      	adds	r7, #8
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}
 800e736:	bf00      	nop
 800e738:	20000708 	.word	0x20000708
 800e73c:	200006eb 	.word	0x200006eb
 800e740:	200006dc 	.word	0x200006dc

0800e744 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b084      	sub	sp, #16
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
 800e74c:	460b      	mov	r3, r1
 800e74e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e750:	2300      	movs	r3, #0
 800e752:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e754:	4b0d      	ldr	r3, [pc, #52]	@ (800e78c <CDC_Transmit_FS+0x48>)
 800e756:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e75a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e75c:	68bb      	ldr	r3, [r7, #8]
 800e75e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e762:	2b00      	cmp	r3, #0
 800e764:	d001      	beq.n	800e76a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e766:	2301      	movs	r3, #1
 800e768:	e00b      	b.n	800e782 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e76a:	887b      	ldrh	r3, [r7, #2]
 800e76c:	461a      	mov	r2, r3
 800e76e:	6879      	ldr	r1, [r7, #4]
 800e770:	4806      	ldr	r0, [pc, #24]	@ (800e78c <CDC_Transmit_FS+0x48>)
 800e772:	f7fe fb4b 	bl	800ce0c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e776:	4805      	ldr	r0, [pc, #20]	@ (800e78c <CDC_Transmit_FS+0x48>)
 800e778:	f7fe fb88 	bl	800ce8c <USBD_CDC_TransmitPacket>
 800e77c:	4603      	mov	r3, r0
 800e77e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e780:	7bfb      	ldrb	r3, [r7, #15]
}
 800e782:	4618      	mov	r0, r3
 800e784:	3710      	adds	r7, #16
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}
 800e78a:	bf00      	nop
 800e78c:	20000708 	.word	0x20000708

0800e790 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e790:	b480      	push	{r7}
 800e792:	b087      	sub	sp, #28
 800e794:	af00      	add	r7, sp, #0
 800e796:	60f8      	str	r0, [r7, #12]
 800e798:	60b9      	str	r1, [r7, #8]
 800e79a:	4613      	mov	r3, r2
 800e79c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e7a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	371c      	adds	r7, #28
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b0:	4770      	bx	lr
	...

0800e7b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e7b4:	b480      	push	{r7}
 800e7b6:	b083      	sub	sp, #12
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	6039      	str	r1, [r7, #0]
 800e7be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	2212      	movs	r2, #18
 800e7c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e7c6:	4b03      	ldr	r3, [pc, #12]	@ (800e7d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	370c      	adds	r7, #12
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d2:	4770      	bx	lr
 800e7d4:	200000f8 	.word	0x200000f8

0800e7d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e7d8:	b480      	push	{r7}
 800e7da:	b083      	sub	sp, #12
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	4603      	mov	r3, r0
 800e7e0:	6039      	str	r1, [r7, #0]
 800e7e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	2204      	movs	r2, #4
 800e7e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e7ea:	4b03      	ldr	r3, [pc, #12]	@ (800e7f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	370c      	adds	r7, #12
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f6:	4770      	bx	lr
 800e7f8:	20000118 	.word	0x20000118

0800e7fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b082      	sub	sp, #8
 800e800:	af00      	add	r7, sp, #0
 800e802:	4603      	mov	r3, r0
 800e804:	6039      	str	r1, [r7, #0]
 800e806:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e808:	79fb      	ldrb	r3, [r7, #7]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d105      	bne.n	800e81a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e80e:	683a      	ldr	r2, [r7, #0]
 800e810:	4907      	ldr	r1, [pc, #28]	@ (800e830 <USBD_FS_ProductStrDescriptor+0x34>)
 800e812:	4808      	ldr	r0, [pc, #32]	@ (800e834 <USBD_FS_ProductStrDescriptor+0x38>)
 800e814:	f7ff fdea 	bl	800e3ec <USBD_GetString>
 800e818:	e004      	b.n	800e824 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e81a:	683a      	ldr	r2, [r7, #0]
 800e81c:	4904      	ldr	r1, [pc, #16]	@ (800e830 <USBD_FS_ProductStrDescriptor+0x34>)
 800e81e:	4805      	ldr	r0, [pc, #20]	@ (800e834 <USBD_FS_ProductStrDescriptor+0x38>)
 800e820:	f7ff fde4 	bl	800e3ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800e824:	4b02      	ldr	r3, [pc, #8]	@ (800e830 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e826:	4618      	mov	r0, r3
 800e828:	3708      	adds	r7, #8
 800e82a:	46bd      	mov	sp, r7
 800e82c:	bd80      	pop	{r7, pc}
 800e82e:	bf00      	nop
 800e830:	200019e4 	.word	0x200019e4
 800e834:	08011598 	.word	0x08011598

0800e838 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b082      	sub	sp, #8
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	4603      	mov	r3, r0
 800e840:	6039      	str	r1, [r7, #0]
 800e842:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e844:	683a      	ldr	r2, [r7, #0]
 800e846:	4904      	ldr	r1, [pc, #16]	@ (800e858 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e848:	4804      	ldr	r0, [pc, #16]	@ (800e85c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e84a:	f7ff fdcf 	bl	800e3ec <USBD_GetString>
  return USBD_StrDesc;
 800e84e:	4b02      	ldr	r3, [pc, #8]	@ (800e858 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e850:	4618      	mov	r0, r3
 800e852:	3708      	adds	r7, #8
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}
 800e858:	200019e4 	.word	0x200019e4
 800e85c:	080115b0 	.word	0x080115b0

0800e860 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b082      	sub	sp, #8
 800e864:	af00      	add	r7, sp, #0
 800e866:	4603      	mov	r3, r0
 800e868:	6039      	str	r1, [r7, #0]
 800e86a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	221a      	movs	r2, #26
 800e870:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e872:	f000 f855 	bl	800e920 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e876:	4b02      	ldr	r3, [pc, #8]	@ (800e880 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e878:	4618      	mov	r0, r3
 800e87a:	3708      	adds	r7, #8
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}
 800e880:	2000011c 	.word	0x2000011c

0800e884 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b082      	sub	sp, #8
 800e888:	af00      	add	r7, sp, #0
 800e88a:	4603      	mov	r3, r0
 800e88c:	6039      	str	r1, [r7, #0]
 800e88e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e890:	79fb      	ldrb	r3, [r7, #7]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d105      	bne.n	800e8a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e896:	683a      	ldr	r2, [r7, #0]
 800e898:	4907      	ldr	r1, [pc, #28]	@ (800e8b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e89a:	4808      	ldr	r0, [pc, #32]	@ (800e8bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800e89c:	f7ff fda6 	bl	800e3ec <USBD_GetString>
 800e8a0:	e004      	b.n	800e8ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e8a2:	683a      	ldr	r2, [r7, #0]
 800e8a4:	4904      	ldr	r1, [pc, #16]	@ (800e8b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e8a6:	4805      	ldr	r0, [pc, #20]	@ (800e8bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800e8a8:	f7ff fda0 	bl	800e3ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800e8ac:	4b02      	ldr	r3, [pc, #8]	@ (800e8b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	3708      	adds	r7, #8
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}
 800e8b6:	bf00      	nop
 800e8b8:	200019e4 	.word	0x200019e4
 800e8bc:	080115c4 	.word	0x080115c4

0800e8c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b082      	sub	sp, #8
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	6039      	str	r1, [r7, #0]
 800e8ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e8cc:	79fb      	ldrb	r3, [r7, #7]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d105      	bne.n	800e8de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e8d2:	683a      	ldr	r2, [r7, #0]
 800e8d4:	4907      	ldr	r1, [pc, #28]	@ (800e8f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e8d6:	4808      	ldr	r0, [pc, #32]	@ (800e8f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e8d8:	f7ff fd88 	bl	800e3ec <USBD_GetString>
 800e8dc:	e004      	b.n	800e8e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e8de:	683a      	ldr	r2, [r7, #0]
 800e8e0:	4904      	ldr	r1, [pc, #16]	@ (800e8f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e8e2:	4805      	ldr	r0, [pc, #20]	@ (800e8f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e8e4:	f7ff fd82 	bl	800e3ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800e8e8:	4b02      	ldr	r3, [pc, #8]	@ (800e8f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	3708      	adds	r7, #8
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	bd80      	pop	{r7, pc}
 800e8f2:	bf00      	nop
 800e8f4:	200019e4 	.word	0x200019e4
 800e8f8:	080115d0 	.word	0x080115d0

0800e8fc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8fc:	b480      	push	{r7}
 800e8fe:	b083      	sub	sp, #12
 800e900:	af00      	add	r7, sp, #0
 800e902:	4603      	mov	r3, r0
 800e904:	6039      	str	r1, [r7, #0]
 800e906:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	220c      	movs	r2, #12
 800e90c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800e90e:	4b03      	ldr	r3, [pc, #12]	@ (800e91c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800e910:	4618      	mov	r0, r3
 800e912:	370c      	adds	r7, #12
 800e914:	46bd      	mov	sp, r7
 800e916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91a:	4770      	bx	lr
 800e91c:	2000010c 	.word	0x2000010c

0800e920 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b084      	sub	sp, #16
 800e924:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e926:	4b0f      	ldr	r3, [pc, #60]	@ (800e964 <Get_SerialNum+0x44>)
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e92c:	4b0e      	ldr	r3, [pc, #56]	@ (800e968 <Get_SerialNum+0x48>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e932:	4b0e      	ldr	r3, [pc, #56]	@ (800e96c <Get_SerialNum+0x4c>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e938:	68fa      	ldr	r2, [r7, #12]
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	4413      	add	r3, r2
 800e93e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d009      	beq.n	800e95a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e946:	2208      	movs	r2, #8
 800e948:	4909      	ldr	r1, [pc, #36]	@ (800e970 <Get_SerialNum+0x50>)
 800e94a:	68f8      	ldr	r0, [r7, #12]
 800e94c:	f000 f814 	bl	800e978 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e950:	2204      	movs	r2, #4
 800e952:	4908      	ldr	r1, [pc, #32]	@ (800e974 <Get_SerialNum+0x54>)
 800e954:	68b8      	ldr	r0, [r7, #8]
 800e956:	f000 f80f 	bl	800e978 <IntToUnicode>
  }
}
 800e95a:	bf00      	nop
 800e95c:	3710      	adds	r7, #16
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}
 800e962:	bf00      	nop
 800e964:	1ff0f420 	.word	0x1ff0f420
 800e968:	1ff0f424 	.word	0x1ff0f424
 800e96c:	1ff0f428 	.word	0x1ff0f428
 800e970:	2000011e 	.word	0x2000011e
 800e974:	2000012e 	.word	0x2000012e

0800e978 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e978:	b480      	push	{r7}
 800e97a:	b087      	sub	sp, #28
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	60f8      	str	r0, [r7, #12]
 800e980:	60b9      	str	r1, [r7, #8]
 800e982:	4613      	mov	r3, r2
 800e984:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e986:	2300      	movs	r3, #0
 800e988:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e98a:	2300      	movs	r3, #0
 800e98c:	75fb      	strb	r3, [r7, #23]
 800e98e:	e027      	b.n	800e9e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	0f1b      	lsrs	r3, r3, #28
 800e994:	2b09      	cmp	r3, #9
 800e996:	d80b      	bhi.n	800e9b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	0f1b      	lsrs	r3, r3, #28
 800e99c:	b2da      	uxtb	r2, r3
 800e99e:	7dfb      	ldrb	r3, [r7, #23]
 800e9a0:	005b      	lsls	r3, r3, #1
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	68bb      	ldr	r3, [r7, #8]
 800e9a6:	440b      	add	r3, r1
 800e9a8:	3230      	adds	r2, #48	@ 0x30
 800e9aa:	b2d2      	uxtb	r2, r2
 800e9ac:	701a      	strb	r2, [r3, #0]
 800e9ae:	e00a      	b.n	800e9c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	0f1b      	lsrs	r3, r3, #28
 800e9b4:	b2da      	uxtb	r2, r3
 800e9b6:	7dfb      	ldrb	r3, [r7, #23]
 800e9b8:	005b      	lsls	r3, r3, #1
 800e9ba:	4619      	mov	r1, r3
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	440b      	add	r3, r1
 800e9c0:	3237      	adds	r2, #55	@ 0x37
 800e9c2:	b2d2      	uxtb	r2, r2
 800e9c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	011b      	lsls	r3, r3, #4
 800e9ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e9cc:	7dfb      	ldrb	r3, [r7, #23]
 800e9ce:	005b      	lsls	r3, r3, #1
 800e9d0:	3301      	adds	r3, #1
 800e9d2:	68ba      	ldr	r2, [r7, #8]
 800e9d4:	4413      	add	r3, r2
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e9da:	7dfb      	ldrb	r3, [r7, #23]
 800e9dc:	3301      	adds	r3, #1
 800e9de:	75fb      	strb	r3, [r7, #23]
 800e9e0:	7dfa      	ldrb	r2, [r7, #23]
 800e9e2:	79fb      	ldrb	r3, [r7, #7]
 800e9e4:	429a      	cmp	r2, r3
 800e9e6:	d3d3      	bcc.n	800e990 <IntToUnicode+0x18>
  }
}
 800e9e8:	bf00      	nop
 800e9ea:	bf00      	nop
 800e9ec:	371c      	adds	r7, #28
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f4:	4770      	bx	lr
	...

0800e9f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b0ac      	sub	sp, #176	@ 0xb0
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ea00:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800ea04:	2200      	movs	r2, #0
 800ea06:	601a      	str	r2, [r3, #0]
 800ea08:	605a      	str	r2, [r3, #4]
 800ea0a:	609a      	str	r2, [r3, #8]
 800ea0c:	60da      	str	r2, [r3, #12]
 800ea0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ea10:	f107 0318 	add.w	r3, r7, #24
 800ea14:	2284      	movs	r2, #132	@ 0x84
 800ea16:	2100      	movs	r1, #0
 800ea18:	4618      	mov	r0, r3
 800ea1a:	f000 fcb1 	bl	800f380 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ea26:	d161      	bne.n	800eaec <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800ea28:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800ea2c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ea34:	f107 0318 	add.w	r3, r7, #24
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f7f9 f8bb 	bl	8007bb4 <HAL_RCCEx_PeriphCLKConfig>
 800ea3e:	4603      	mov	r3, r0
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d001      	beq.n	800ea48 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800ea44:	f7f4 ff2e 	bl	80038a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ea48:	4b2a      	ldr	r3, [pc, #168]	@ (800eaf4 <HAL_PCD_MspInit+0xfc>)
 800ea4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea4c:	4a29      	ldr	r2, [pc, #164]	@ (800eaf4 <HAL_PCD_MspInit+0xfc>)
 800ea4e:	f043 0301 	orr.w	r3, r3, #1
 800ea52:	6313      	str	r3, [r2, #48]	@ 0x30
 800ea54:	4b27      	ldr	r3, [pc, #156]	@ (800eaf4 <HAL_PCD_MspInit+0xfc>)
 800ea56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea58:	f003 0301 	and.w	r3, r3, #1
 800ea5c:	617b      	str	r3, [r7, #20]
 800ea5e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800ea60:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800ea64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea68:	2302      	movs	r3, #2
 800ea6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea6e:	2300      	movs	r3, #0
 800ea70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ea74:	2303      	movs	r3, #3
 800ea76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ea7a:	230a      	movs	r3, #10
 800ea7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ea80:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800ea84:	4619      	mov	r1, r3
 800ea86:	481c      	ldr	r0, [pc, #112]	@ (800eaf8 <HAL_PCD_MspInit+0x100>)
 800ea88:	f7f6 feec 	bl	8005864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800ea8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ea90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ea94:	2300      	movs	r3, #0
 800ea96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800eaa0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800eaa4:	4619      	mov	r1, r3
 800eaa6:	4814      	ldr	r0, [pc, #80]	@ (800eaf8 <HAL_PCD_MspInit+0x100>)
 800eaa8:	f7f6 fedc 	bl	8005864 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800eaac:	4b11      	ldr	r3, [pc, #68]	@ (800eaf4 <HAL_PCD_MspInit+0xfc>)
 800eaae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eab0:	4a10      	ldr	r2, [pc, #64]	@ (800eaf4 <HAL_PCD_MspInit+0xfc>)
 800eab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eab6:	6353      	str	r3, [r2, #52]	@ 0x34
 800eab8:	4b0e      	ldr	r3, [pc, #56]	@ (800eaf4 <HAL_PCD_MspInit+0xfc>)
 800eaba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eabc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eac0:	613b      	str	r3, [r7, #16]
 800eac2:	693b      	ldr	r3, [r7, #16]
 800eac4:	4b0b      	ldr	r3, [pc, #44]	@ (800eaf4 <HAL_PCD_MspInit+0xfc>)
 800eac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eac8:	4a0a      	ldr	r2, [pc, #40]	@ (800eaf4 <HAL_PCD_MspInit+0xfc>)
 800eaca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800eace:	6453      	str	r3, [r2, #68]	@ 0x44
 800ead0:	4b08      	ldr	r3, [pc, #32]	@ (800eaf4 <HAL_PCD_MspInit+0xfc>)
 800ead2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ead4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ead8:	60fb      	str	r3, [r7, #12]
 800eada:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800eadc:	2200      	movs	r2, #0
 800eade:	2100      	movs	r1, #0
 800eae0:	2043      	movs	r0, #67	@ 0x43
 800eae2:	f7f6 fa7a 	bl	8004fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800eae6:	2043      	movs	r0, #67	@ 0x43
 800eae8:	f7f6 fa93 	bl	8005012 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800eaec:	bf00      	nop
 800eaee:	37b0      	adds	r7, #176	@ 0xb0
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd80      	pop	{r7, pc}
 800eaf4:	40023800 	.word	0x40023800
 800eaf8:	40020000 	.word	0x40020000

0800eafc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b082      	sub	sp, #8
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f8d3 2504 	ldr.w	r2, [r3, #1284]	@ 0x504
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800eb10:	4619      	mov	r1, r3
 800eb12:	4610      	mov	r0, r2
 800eb14:	f7fe fae3 	bl	800d0de <USBD_LL_SetupStage>
}
 800eb18:	bf00      	nop
 800eb1a:	3708      	adds	r7, #8
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}

0800eb20 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b082      	sub	sp, #8
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
 800eb28:	460b      	mov	r3, r1
 800eb2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	@ 0x504
 800eb32:	78fa      	ldrb	r2, [r7, #3]
 800eb34:	6879      	ldr	r1, [r7, #4]
 800eb36:	4613      	mov	r3, r2
 800eb38:	00db      	lsls	r3, r3, #3
 800eb3a:	4413      	add	r3, r2
 800eb3c:	009b      	lsls	r3, r3, #2
 800eb3e:	440b      	add	r3, r1
 800eb40:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800eb44:	681a      	ldr	r2, [r3, #0]
 800eb46:	78fb      	ldrb	r3, [r7, #3]
 800eb48:	4619      	mov	r1, r3
 800eb4a:	f7fe fb1d 	bl	800d188 <USBD_LL_DataOutStage>
}
 800eb4e:	bf00      	nop
 800eb50:	3708      	adds	r7, #8
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}

0800eb56 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb56:	b580      	push	{r7, lr}
 800eb58:	b082      	sub	sp, #8
 800eb5a:	af00      	add	r7, sp, #0
 800eb5c:	6078      	str	r0, [r7, #4]
 800eb5e:	460b      	mov	r3, r1
 800eb60:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	f8d3 0504 	ldr.w	r0, [r3, #1284]	@ 0x504
 800eb68:	78fa      	ldrb	r2, [r7, #3]
 800eb6a:	6879      	ldr	r1, [r7, #4]
 800eb6c:	4613      	mov	r3, r2
 800eb6e:	00db      	lsls	r3, r3, #3
 800eb70:	4413      	add	r3, r2
 800eb72:	009b      	lsls	r3, r3, #2
 800eb74:	440b      	add	r3, r1
 800eb76:	334c      	adds	r3, #76	@ 0x4c
 800eb78:	681a      	ldr	r2, [r3, #0]
 800eb7a:	78fb      	ldrb	r3, [r7, #3]
 800eb7c:	4619      	mov	r1, r3
 800eb7e:	f7fe fbb6 	bl	800d2ee <USBD_LL_DataInStage>
}
 800eb82:	bf00      	nop
 800eb84:	3708      	adds	r7, #8
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd80      	pop	{r7, pc}

0800eb8a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb8a:	b580      	push	{r7, lr}
 800eb8c:	b082      	sub	sp, #8
 800eb8e:	af00      	add	r7, sp, #0
 800eb90:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f7fe fcea 	bl	800d572 <USBD_LL_SOF>
}
 800eb9e:	bf00      	nop
 800eba0:	3708      	adds	r7, #8
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}

0800eba6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eba6:	b580      	push	{r7, lr}
 800eba8:	b084      	sub	sp, #16
 800ebaa:	af00      	add	r7, sp, #0
 800ebac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ebae:	2301      	movs	r3, #1
 800ebb0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	68db      	ldr	r3, [r3, #12]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d102      	bne.n	800ebc0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	73fb      	strb	r3, [r7, #15]
 800ebbe:	e008      	b.n	800ebd2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	68db      	ldr	r3, [r3, #12]
 800ebc4:	2b02      	cmp	r3, #2
 800ebc6:	d102      	bne.n	800ebce <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ebc8:	2301      	movs	r3, #1
 800ebca:	73fb      	strb	r3, [r7, #15]
 800ebcc:	e001      	b.n	800ebd2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ebce:	f7f4 fe69 	bl	80038a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800ebd8:	7bfa      	ldrb	r2, [r7, #15]
 800ebda:	4611      	mov	r1, r2
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f7fe fc8a 	bl	800d4f6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f7fe fc32 	bl	800d452 <USBD_LL_Reset>
}
 800ebee:	bf00      	nop
 800ebf0:	3710      	adds	r7, #16
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}
	...

0800ebf8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b082      	sub	sp, #8
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800ec06:	4618      	mov	r0, r3
 800ec08:	f7fe fc85 	bl	800d516 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	687a      	ldr	r2, [r7, #4]
 800ec18:	6812      	ldr	r2, [r2, #0]
 800ec1a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ec1e:	f043 0301 	orr.w	r3, r3, #1
 800ec22:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	6a1b      	ldr	r3, [r3, #32]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d005      	beq.n	800ec38 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ec2c:	4b04      	ldr	r3, [pc, #16]	@ (800ec40 <HAL_PCD_SuspendCallback+0x48>)
 800ec2e:	691b      	ldr	r3, [r3, #16]
 800ec30:	4a03      	ldr	r2, [pc, #12]	@ (800ec40 <HAL_PCD_SuspendCallback+0x48>)
 800ec32:	f043 0306 	orr.w	r3, r3, #6
 800ec36:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ec38:	bf00      	nop
 800ec3a:	3708      	adds	r7, #8
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}
 800ec40:	e000ed00 	.word	0xe000ed00

0800ec44 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b082      	sub	sp, #8
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800ec52:	4618      	mov	r0, r3
 800ec54:	f7fe fc75 	bl	800d542 <USBD_LL_Resume>
}
 800ec58:	bf00      	nop
 800ec5a:	3708      	adds	r7, #8
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}

0800ec60 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b082      	sub	sp, #8
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
 800ec68:	460b      	mov	r3, r1
 800ec6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800ec72:	78fa      	ldrb	r2, [r7, #3]
 800ec74:	4611      	mov	r1, r2
 800ec76:	4618      	mov	r0, r3
 800ec78:	f7fe fccd 	bl	800d616 <USBD_LL_IsoOUTIncomplete>
}
 800ec7c:	bf00      	nop
 800ec7e:	3708      	adds	r7, #8
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd80      	pop	{r7, pc}

0800ec84 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b082      	sub	sp, #8
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
 800ec8c:	460b      	mov	r3, r1
 800ec8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800ec96:	78fa      	ldrb	r2, [r7, #3]
 800ec98:	4611      	mov	r1, r2
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f7fe fc89 	bl	800d5b2 <USBD_LL_IsoINIncomplete>
}
 800eca0:	bf00      	nop
 800eca2:	3708      	adds	r7, #8
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}

0800eca8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b082      	sub	sp, #8
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f7fe fcdf 	bl	800d67a <USBD_LL_DevConnected>
}
 800ecbc:	bf00      	nop
 800ecbe:	3708      	adds	r7, #8
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}

0800ecc4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b082      	sub	sp, #8
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f7fe fcdc 	bl	800d690 <USBD_LL_DevDisconnected>
}
 800ecd8:	bf00      	nop
 800ecda:	3708      	adds	r7, #8
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd80      	pop	{r7, pc}

0800ece0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b082      	sub	sp, #8
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	781b      	ldrb	r3, [r3, #0]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d13c      	bne.n	800ed6a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ecf0:	4a20      	ldr	r2, [pc, #128]	@ (800ed74 <USBD_LL_Init+0x94>)
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	f8c2 3504 	str.w	r3, [r2, #1284]	@ 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	4a1e      	ldr	r2, [pc, #120]	@ (800ed74 <USBD_LL_Init+0x94>)
 800ecfc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ed00:	4b1c      	ldr	r3, [pc, #112]	@ (800ed74 <USBD_LL_Init+0x94>)
 800ed02:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ed06:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800ed08:	4b1a      	ldr	r3, [pc, #104]	@ (800ed74 <USBD_LL_Init+0x94>)
 800ed0a:	2206      	movs	r2, #6
 800ed0c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ed0e:	4b19      	ldr	r3, [pc, #100]	@ (800ed74 <USBD_LL_Init+0x94>)
 800ed10:	2202      	movs	r2, #2
 800ed12:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ed14:	4b17      	ldr	r3, [pc, #92]	@ (800ed74 <USBD_LL_Init+0x94>)
 800ed16:	2200      	movs	r2, #0
 800ed18:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ed1a:	4b16      	ldr	r3, [pc, #88]	@ (800ed74 <USBD_LL_Init+0x94>)
 800ed1c:	2202      	movs	r2, #2
 800ed1e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800ed20:	4b14      	ldr	r3, [pc, #80]	@ (800ed74 <USBD_LL_Init+0x94>)
 800ed22:	2201      	movs	r2, #1
 800ed24:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ed26:	4b13      	ldr	r3, [pc, #76]	@ (800ed74 <USBD_LL_Init+0x94>)
 800ed28:	2200      	movs	r2, #0
 800ed2a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ed2c:	4b11      	ldr	r3, [pc, #68]	@ (800ed74 <USBD_LL_Init+0x94>)
 800ed2e:	2200      	movs	r2, #0
 800ed30:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800ed32:	4b10      	ldr	r3, [pc, #64]	@ (800ed74 <USBD_LL_Init+0x94>)
 800ed34:	2201      	movs	r2, #1
 800ed36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ed38:	4b0e      	ldr	r3, [pc, #56]	@ (800ed74 <USBD_LL_Init+0x94>)
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ed3e:	480d      	ldr	r0, [pc, #52]	@ (800ed74 <USBD_LL_Init+0x94>)
 800ed40:	f7f6 ff55 	bl	8005bee <HAL_PCD_Init>
 800ed44:	4603      	mov	r3, r0
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d001      	beq.n	800ed4e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ed4a:	f7f4 fdab 	bl	80038a4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ed4e:	2180      	movs	r1, #128	@ 0x80
 800ed50:	4808      	ldr	r0, [pc, #32]	@ (800ed74 <USBD_LL_Init+0x94>)
 800ed52:	f7f8 f9d0 	bl	80070f6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ed56:	2240      	movs	r2, #64	@ 0x40
 800ed58:	2100      	movs	r1, #0
 800ed5a:	4806      	ldr	r0, [pc, #24]	@ (800ed74 <USBD_LL_Init+0x94>)
 800ed5c:	f7f8 f984 	bl	8007068 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ed60:	2280      	movs	r2, #128	@ 0x80
 800ed62:	2101      	movs	r1, #1
 800ed64:	4803      	ldr	r0, [pc, #12]	@ (800ed74 <USBD_LL_Init+0x94>)
 800ed66:	f7f8 f97f 	bl	8007068 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ed6a:	2300      	movs	r3, #0
}
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	3708      	adds	r7, #8
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd80      	pop	{r7, pc}
 800ed74:	20001be4 	.word	0x20001be4

0800ed78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b084      	sub	sp, #16
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed80:	2300      	movs	r3, #0
 800ed82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed84:	2300      	movs	r3, #0
 800ed86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f7f7 f851 	bl	8005e36 <HAL_PCD_Start>
 800ed94:	4603      	mov	r3, r0
 800ed96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed98:	7bfb      	ldrb	r3, [r7, #15]
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f000 f97e 	bl	800f09c <USBD_Get_USB_Status>
 800eda0:	4603      	mov	r3, r0
 800eda2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eda4:	7bbb      	ldrb	r3, [r7, #14]
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	3710      	adds	r7, #16
 800edaa:	46bd      	mov	sp, r7
 800edac:	bd80      	pop	{r7, pc}

0800edae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800edae:	b580      	push	{r7, lr}
 800edb0:	b084      	sub	sp, #16
 800edb2:	af00      	add	r7, sp, #0
 800edb4:	6078      	str	r0, [r7, #4]
 800edb6:	4608      	mov	r0, r1
 800edb8:	4611      	mov	r1, r2
 800edba:	461a      	mov	r2, r3
 800edbc:	4603      	mov	r3, r0
 800edbe:	70fb      	strb	r3, [r7, #3]
 800edc0:	460b      	mov	r3, r1
 800edc2:	70bb      	strb	r3, [r7, #2]
 800edc4:	4613      	mov	r3, r2
 800edc6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edc8:	2300      	movs	r3, #0
 800edca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edcc:	2300      	movs	r3, #0
 800edce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800edd6:	78bb      	ldrb	r3, [r7, #2]
 800edd8:	883a      	ldrh	r2, [r7, #0]
 800edda:	78f9      	ldrb	r1, [r7, #3]
 800eddc:	f7f7 fd3e 	bl	800685c <HAL_PCD_EP_Open>
 800ede0:	4603      	mov	r3, r0
 800ede2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ede4:	7bfb      	ldrb	r3, [r7, #15]
 800ede6:	4618      	mov	r0, r3
 800ede8:	f000 f958 	bl	800f09c <USBD_Get_USB_Status>
 800edec:	4603      	mov	r3, r0
 800edee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800edf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800edf2:	4618      	mov	r0, r3
 800edf4:	3710      	adds	r7, #16
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}

0800edfa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800edfa:	b580      	push	{r7, lr}
 800edfc:	b084      	sub	sp, #16
 800edfe:	af00      	add	r7, sp, #0
 800ee00:	6078      	str	r0, [r7, #4]
 800ee02:	460b      	mov	r3, r1
 800ee04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee06:	2300      	movs	r3, #0
 800ee08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ee14:	78fa      	ldrb	r2, [r7, #3]
 800ee16:	4611      	mov	r1, r2
 800ee18:	4618      	mov	r0, r3
 800ee1a:	f7f7 fd87 	bl	800692c <HAL_PCD_EP_Close>
 800ee1e:	4603      	mov	r3, r0
 800ee20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee22:	7bfb      	ldrb	r3, [r7, #15]
 800ee24:	4618      	mov	r0, r3
 800ee26:	f000 f939 	bl	800f09c <USBD_Get_USB_Status>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee2e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee30:	4618      	mov	r0, r3
 800ee32:	3710      	adds	r7, #16
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}

0800ee38 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b084      	sub	sp, #16
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
 800ee40:	460b      	mov	r3, r1
 800ee42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee44:	2300      	movs	r3, #0
 800ee46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee48:	2300      	movs	r3, #0
 800ee4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ee52:	78fa      	ldrb	r2, [r7, #3]
 800ee54:	4611      	mov	r1, r2
 800ee56:	4618      	mov	r0, r3
 800ee58:	f7f7 fe5f 	bl	8006b1a <HAL_PCD_EP_SetStall>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee60:	7bfb      	ldrb	r3, [r7, #15]
 800ee62:	4618      	mov	r0, r3
 800ee64:	f000 f91a 	bl	800f09c <USBD_Get_USB_Status>
 800ee68:	4603      	mov	r3, r0
 800ee6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee6e:	4618      	mov	r0, r3
 800ee70:	3710      	adds	r7, #16
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bd80      	pop	{r7, pc}

0800ee76 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee76:	b580      	push	{r7, lr}
 800ee78:	b084      	sub	sp, #16
 800ee7a:	af00      	add	r7, sp, #0
 800ee7c:	6078      	str	r0, [r7, #4]
 800ee7e:	460b      	mov	r3, r1
 800ee80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee82:	2300      	movs	r3, #0
 800ee84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee86:	2300      	movs	r3, #0
 800ee88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ee90:	78fa      	ldrb	r2, [r7, #3]
 800ee92:	4611      	mov	r1, r2
 800ee94:	4618      	mov	r0, r3
 800ee96:	f7f7 fea4 	bl	8006be2 <HAL_PCD_EP_ClrStall>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee9e:	7bfb      	ldrb	r3, [r7, #15]
 800eea0:	4618      	mov	r0, r3
 800eea2:	f000 f8fb 	bl	800f09c <USBD_Get_USB_Status>
 800eea6:	4603      	mov	r3, r0
 800eea8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eeaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800eeac:	4618      	mov	r0, r3
 800eeae:	3710      	adds	r7, #16
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}

0800eeb4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eeb4:	b480      	push	{r7}
 800eeb6:	b085      	sub	sp, #20
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
 800eebc:	460b      	mov	r3, r1
 800eebe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800eec6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800eec8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	da0b      	bge.n	800eee8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800eed0:	78fb      	ldrb	r3, [r7, #3]
 800eed2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800eed6:	68f9      	ldr	r1, [r7, #12]
 800eed8:	4613      	mov	r3, r2
 800eeda:	00db      	lsls	r3, r3, #3
 800eedc:	4413      	add	r3, r2
 800eede:	009b      	lsls	r3, r3, #2
 800eee0:	440b      	add	r3, r1
 800eee2:	333e      	adds	r3, #62	@ 0x3e
 800eee4:	781b      	ldrb	r3, [r3, #0]
 800eee6:	e00b      	b.n	800ef00 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800eee8:	78fb      	ldrb	r3, [r7, #3]
 800eeea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800eeee:	68f9      	ldr	r1, [r7, #12]
 800eef0:	4613      	mov	r3, r2
 800eef2:	00db      	lsls	r3, r3, #3
 800eef4:	4413      	add	r3, r2
 800eef6:	009b      	lsls	r3, r3, #2
 800eef8:	440b      	add	r3, r1
 800eefa:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800eefe:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	3714      	adds	r7, #20
 800ef04:	46bd      	mov	sp, r7
 800ef06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0a:	4770      	bx	lr

0800ef0c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b084      	sub	sp, #16
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
 800ef14:	460b      	mov	r3, r1
 800ef16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef18:	2300      	movs	r3, #0
 800ef1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ef26:	78fa      	ldrb	r2, [r7, #3]
 800ef28:	4611      	mov	r1, r2
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f7f7 fc71 	bl	8006812 <HAL_PCD_SetAddress>
 800ef30:	4603      	mov	r3, r0
 800ef32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef34:	7bfb      	ldrb	r3, [r7, #15]
 800ef36:	4618      	mov	r0, r3
 800ef38:	f000 f8b0 	bl	800f09c <USBD_Get_USB_Status>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef40:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef42:	4618      	mov	r0, r3
 800ef44:	3710      	adds	r7, #16
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}

0800ef4a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ef4a:	b580      	push	{r7, lr}
 800ef4c:	b086      	sub	sp, #24
 800ef4e:	af00      	add	r7, sp, #0
 800ef50:	60f8      	str	r0, [r7, #12]
 800ef52:	607a      	str	r2, [r7, #4]
 800ef54:	603b      	str	r3, [r7, #0]
 800ef56:	460b      	mov	r3, r1
 800ef58:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ef68:	7af9      	ldrb	r1, [r7, #11]
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	687a      	ldr	r2, [r7, #4]
 800ef6e:	f7f7 fd8a 	bl	8006a86 <HAL_PCD_EP_Transmit>
 800ef72:	4603      	mov	r3, r0
 800ef74:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef76:	7dfb      	ldrb	r3, [r7, #23]
 800ef78:	4618      	mov	r0, r3
 800ef7a:	f000 f88f 	bl	800f09c <USBD_Get_USB_Status>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ef82:	7dbb      	ldrb	r3, [r7, #22]
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	3718      	adds	r7, #24
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}

0800ef8c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b086      	sub	sp, #24
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	60f8      	str	r0, [r7, #12]
 800ef94:	607a      	str	r2, [r7, #4]
 800ef96:	603b      	str	r3, [r7, #0]
 800ef98:	460b      	mov	r3, r1
 800ef9a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800efa0:	2300      	movs	r3, #0
 800efa2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800efaa:	7af9      	ldrb	r1, [r7, #11]
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	687a      	ldr	r2, [r7, #4]
 800efb0:	f7f7 fd06 	bl	80069c0 <HAL_PCD_EP_Receive>
 800efb4:	4603      	mov	r3, r0
 800efb6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800efb8:	7dfb      	ldrb	r3, [r7, #23]
 800efba:	4618      	mov	r0, r3
 800efbc:	f000 f86e 	bl	800f09c <USBD_Get_USB_Status>
 800efc0:	4603      	mov	r3, r0
 800efc2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800efc4:	7dbb      	ldrb	r3, [r7, #22]
}
 800efc6:	4618      	mov	r0, r3
 800efc8:	3718      	adds	r7, #24
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}

0800efce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800efce:	b580      	push	{r7, lr}
 800efd0:	b082      	sub	sp, #8
 800efd2:	af00      	add	r7, sp, #0
 800efd4:	6078      	str	r0, [r7, #4]
 800efd6:	460b      	mov	r3, r1
 800efd8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800efe0:	78fa      	ldrb	r2, [r7, #3]
 800efe2:	4611      	mov	r1, r2
 800efe4:	4618      	mov	r0, r3
 800efe6:	f7f7 fd36 	bl	8006a56 <HAL_PCD_EP_GetRxCount>
 800efea:	4603      	mov	r3, r0
}
 800efec:	4618      	mov	r0, r3
 800efee:	3708      	adds	r7, #8
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}

0800eff4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b082      	sub	sp, #8
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
 800effc:	460b      	mov	r3, r1
 800effe:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800f000:	78fb      	ldrb	r3, [r7, #3]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d002      	beq.n	800f00c <HAL_PCDEx_LPM_Callback+0x18>
 800f006:	2b01      	cmp	r3, #1
 800f008:	d01f      	beq.n	800f04a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800f00a:	e03b      	b.n	800f084 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	6a1b      	ldr	r3, [r3, #32]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d007      	beq.n	800f024 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800f014:	f000 f83c 	bl	800f090 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f018:	4b1c      	ldr	r3, [pc, #112]	@ (800f08c <HAL_PCDEx_LPM_Callback+0x98>)
 800f01a:	691b      	ldr	r3, [r3, #16]
 800f01c:	4a1b      	ldr	r2, [pc, #108]	@ (800f08c <HAL_PCDEx_LPM_Callback+0x98>)
 800f01e:	f023 0306 	bic.w	r3, r3, #6
 800f022:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	687a      	ldr	r2, [r7, #4]
 800f030:	6812      	ldr	r2, [r2, #0]
 800f032:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f036:	f023 0301 	bic.w	r3, r3, #1
 800f03a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800f042:	4618      	mov	r0, r3
 800f044:	f7fe fa7d 	bl	800d542 <USBD_LL_Resume>
    break;
 800f048:	e01c      	b.n	800f084 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	687a      	ldr	r2, [r7, #4]
 800f056:	6812      	ldr	r2, [r2, #0]
 800f058:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f05c:	f043 0301 	orr.w	r3, r3, #1
 800f060:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800f068:	4618      	mov	r0, r3
 800f06a:	f7fe fa54 	bl	800d516 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6a1b      	ldr	r3, [r3, #32]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d005      	beq.n	800f082 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f076:	4b05      	ldr	r3, [pc, #20]	@ (800f08c <HAL_PCDEx_LPM_Callback+0x98>)
 800f078:	691b      	ldr	r3, [r3, #16]
 800f07a:	4a04      	ldr	r2, [pc, #16]	@ (800f08c <HAL_PCDEx_LPM_Callback+0x98>)
 800f07c:	f043 0306 	orr.w	r3, r3, #6
 800f080:	6113      	str	r3, [r2, #16]
    break;
 800f082:	bf00      	nop
}
 800f084:	bf00      	nop
 800f086:	3708      	adds	r7, #8
 800f088:	46bd      	mov	sp, r7
 800f08a:	bd80      	pop	{r7, pc}
 800f08c:	e000ed00 	.word	0xe000ed00

0800f090 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800f094:	f7f3 fd34 	bl	8002b00 <SystemClock_Config>
}
 800f098:	bf00      	nop
 800f09a:	bd80      	pop	{r7, pc}

0800f09c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f09c:	b480      	push	{r7}
 800f09e:	b085      	sub	sp, #20
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f0aa:	79fb      	ldrb	r3, [r7, #7]
 800f0ac:	2b03      	cmp	r3, #3
 800f0ae:	d817      	bhi.n	800f0e0 <USBD_Get_USB_Status+0x44>
 800f0b0:	a201      	add	r2, pc, #4	@ (adr r2, 800f0b8 <USBD_Get_USB_Status+0x1c>)
 800f0b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0b6:	bf00      	nop
 800f0b8:	0800f0c9 	.word	0x0800f0c9
 800f0bc:	0800f0cf 	.word	0x0800f0cf
 800f0c0:	0800f0d5 	.word	0x0800f0d5
 800f0c4:	0800f0db 	.word	0x0800f0db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	73fb      	strb	r3, [r7, #15]
    break;
 800f0cc:	e00b      	b.n	800f0e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f0ce:	2303      	movs	r3, #3
 800f0d0:	73fb      	strb	r3, [r7, #15]
    break;
 800f0d2:	e008      	b.n	800f0e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f0d4:	2301      	movs	r3, #1
 800f0d6:	73fb      	strb	r3, [r7, #15]
    break;
 800f0d8:	e005      	b.n	800f0e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f0da:	2303      	movs	r3, #3
 800f0dc:	73fb      	strb	r3, [r7, #15]
    break;
 800f0de:	e002      	b.n	800f0e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f0e0:	2303      	movs	r3, #3
 800f0e2:	73fb      	strb	r3, [r7, #15]
    break;
 800f0e4:	bf00      	nop
  }
  return usb_status;
 800f0e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	3714      	adds	r7, #20
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f2:	4770      	bx	lr

0800f0f4 <atoi>:
 800f0f4:	220a      	movs	r2, #10
 800f0f6:	2100      	movs	r1, #0
 800f0f8:	f000 b938 	b.w	800f36c <strtol>

0800f0fc <malloc>:
 800f0fc:	4b02      	ldr	r3, [pc, #8]	@ (800f108 <malloc+0xc>)
 800f0fe:	4601      	mov	r1, r0
 800f100:	6818      	ldr	r0, [r3, #0]
 800f102:	f000 b82d 	b.w	800f160 <_malloc_r>
 800f106:	bf00      	nop
 800f108:	20000138 	.word	0x20000138

0800f10c <free>:
 800f10c:	4b02      	ldr	r3, [pc, #8]	@ (800f118 <free+0xc>)
 800f10e:	4601      	mov	r1, r0
 800f110:	6818      	ldr	r0, [r3, #0]
 800f112:	f000 b987 	b.w	800f424 <_free_r>
 800f116:	bf00      	nop
 800f118:	20000138 	.word	0x20000138

0800f11c <sbrk_aligned>:
 800f11c:	b570      	push	{r4, r5, r6, lr}
 800f11e:	4e0f      	ldr	r6, [pc, #60]	@ (800f15c <sbrk_aligned+0x40>)
 800f120:	460c      	mov	r4, r1
 800f122:	6831      	ldr	r1, [r6, #0]
 800f124:	4605      	mov	r5, r0
 800f126:	b911      	cbnz	r1, 800f12e <sbrk_aligned+0x12>
 800f128:	f000 f932 	bl	800f390 <_sbrk_r>
 800f12c:	6030      	str	r0, [r6, #0]
 800f12e:	4621      	mov	r1, r4
 800f130:	4628      	mov	r0, r5
 800f132:	f000 f92d 	bl	800f390 <_sbrk_r>
 800f136:	1c43      	adds	r3, r0, #1
 800f138:	d103      	bne.n	800f142 <sbrk_aligned+0x26>
 800f13a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800f13e:	4620      	mov	r0, r4
 800f140:	bd70      	pop	{r4, r5, r6, pc}
 800f142:	1cc4      	adds	r4, r0, #3
 800f144:	f024 0403 	bic.w	r4, r4, #3
 800f148:	42a0      	cmp	r0, r4
 800f14a:	d0f8      	beq.n	800f13e <sbrk_aligned+0x22>
 800f14c:	1a21      	subs	r1, r4, r0
 800f14e:	4628      	mov	r0, r5
 800f150:	f000 f91e 	bl	800f390 <_sbrk_r>
 800f154:	3001      	adds	r0, #1
 800f156:	d1f2      	bne.n	800f13e <sbrk_aligned+0x22>
 800f158:	e7ef      	b.n	800f13a <sbrk_aligned+0x1e>
 800f15a:	bf00      	nop
 800f15c:	200020ec 	.word	0x200020ec

0800f160 <_malloc_r>:
 800f160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f164:	1ccd      	adds	r5, r1, #3
 800f166:	f025 0503 	bic.w	r5, r5, #3
 800f16a:	3508      	adds	r5, #8
 800f16c:	2d0c      	cmp	r5, #12
 800f16e:	bf38      	it	cc
 800f170:	250c      	movcc	r5, #12
 800f172:	2d00      	cmp	r5, #0
 800f174:	4606      	mov	r6, r0
 800f176:	db01      	blt.n	800f17c <_malloc_r+0x1c>
 800f178:	42a9      	cmp	r1, r5
 800f17a:	d904      	bls.n	800f186 <_malloc_r+0x26>
 800f17c:	230c      	movs	r3, #12
 800f17e:	6033      	str	r3, [r6, #0]
 800f180:	2000      	movs	r0, #0
 800f182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f186:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f25c <_malloc_r+0xfc>
 800f18a:	f000 f869 	bl	800f260 <__malloc_lock>
 800f18e:	f8d8 3000 	ldr.w	r3, [r8]
 800f192:	461c      	mov	r4, r3
 800f194:	bb44      	cbnz	r4, 800f1e8 <_malloc_r+0x88>
 800f196:	4629      	mov	r1, r5
 800f198:	4630      	mov	r0, r6
 800f19a:	f7ff ffbf 	bl	800f11c <sbrk_aligned>
 800f19e:	1c43      	adds	r3, r0, #1
 800f1a0:	4604      	mov	r4, r0
 800f1a2:	d158      	bne.n	800f256 <_malloc_r+0xf6>
 800f1a4:	f8d8 4000 	ldr.w	r4, [r8]
 800f1a8:	4627      	mov	r7, r4
 800f1aa:	2f00      	cmp	r7, #0
 800f1ac:	d143      	bne.n	800f236 <_malloc_r+0xd6>
 800f1ae:	2c00      	cmp	r4, #0
 800f1b0:	d04b      	beq.n	800f24a <_malloc_r+0xea>
 800f1b2:	6823      	ldr	r3, [r4, #0]
 800f1b4:	4639      	mov	r1, r7
 800f1b6:	4630      	mov	r0, r6
 800f1b8:	eb04 0903 	add.w	r9, r4, r3
 800f1bc:	f000 f8e8 	bl	800f390 <_sbrk_r>
 800f1c0:	4581      	cmp	r9, r0
 800f1c2:	d142      	bne.n	800f24a <_malloc_r+0xea>
 800f1c4:	6821      	ldr	r1, [r4, #0]
 800f1c6:	1a6d      	subs	r5, r5, r1
 800f1c8:	4629      	mov	r1, r5
 800f1ca:	4630      	mov	r0, r6
 800f1cc:	f7ff ffa6 	bl	800f11c <sbrk_aligned>
 800f1d0:	3001      	adds	r0, #1
 800f1d2:	d03a      	beq.n	800f24a <_malloc_r+0xea>
 800f1d4:	6823      	ldr	r3, [r4, #0]
 800f1d6:	442b      	add	r3, r5
 800f1d8:	6023      	str	r3, [r4, #0]
 800f1da:	f8d8 3000 	ldr.w	r3, [r8]
 800f1de:	685a      	ldr	r2, [r3, #4]
 800f1e0:	bb62      	cbnz	r2, 800f23c <_malloc_r+0xdc>
 800f1e2:	f8c8 7000 	str.w	r7, [r8]
 800f1e6:	e00f      	b.n	800f208 <_malloc_r+0xa8>
 800f1e8:	6822      	ldr	r2, [r4, #0]
 800f1ea:	1b52      	subs	r2, r2, r5
 800f1ec:	d420      	bmi.n	800f230 <_malloc_r+0xd0>
 800f1ee:	2a0b      	cmp	r2, #11
 800f1f0:	d917      	bls.n	800f222 <_malloc_r+0xc2>
 800f1f2:	1961      	adds	r1, r4, r5
 800f1f4:	42a3      	cmp	r3, r4
 800f1f6:	6025      	str	r5, [r4, #0]
 800f1f8:	bf18      	it	ne
 800f1fa:	6059      	strne	r1, [r3, #4]
 800f1fc:	6863      	ldr	r3, [r4, #4]
 800f1fe:	bf08      	it	eq
 800f200:	f8c8 1000 	streq.w	r1, [r8]
 800f204:	5162      	str	r2, [r4, r5]
 800f206:	604b      	str	r3, [r1, #4]
 800f208:	4630      	mov	r0, r6
 800f20a:	f000 f82f 	bl	800f26c <__malloc_unlock>
 800f20e:	f104 000b 	add.w	r0, r4, #11
 800f212:	1d23      	adds	r3, r4, #4
 800f214:	f020 0007 	bic.w	r0, r0, #7
 800f218:	1ac2      	subs	r2, r0, r3
 800f21a:	bf1c      	itt	ne
 800f21c:	1a1b      	subne	r3, r3, r0
 800f21e:	50a3      	strne	r3, [r4, r2]
 800f220:	e7af      	b.n	800f182 <_malloc_r+0x22>
 800f222:	6862      	ldr	r2, [r4, #4]
 800f224:	42a3      	cmp	r3, r4
 800f226:	bf0c      	ite	eq
 800f228:	f8c8 2000 	streq.w	r2, [r8]
 800f22c:	605a      	strne	r2, [r3, #4]
 800f22e:	e7eb      	b.n	800f208 <_malloc_r+0xa8>
 800f230:	4623      	mov	r3, r4
 800f232:	6864      	ldr	r4, [r4, #4]
 800f234:	e7ae      	b.n	800f194 <_malloc_r+0x34>
 800f236:	463c      	mov	r4, r7
 800f238:	687f      	ldr	r7, [r7, #4]
 800f23a:	e7b6      	b.n	800f1aa <_malloc_r+0x4a>
 800f23c:	461a      	mov	r2, r3
 800f23e:	685b      	ldr	r3, [r3, #4]
 800f240:	42a3      	cmp	r3, r4
 800f242:	d1fb      	bne.n	800f23c <_malloc_r+0xdc>
 800f244:	2300      	movs	r3, #0
 800f246:	6053      	str	r3, [r2, #4]
 800f248:	e7de      	b.n	800f208 <_malloc_r+0xa8>
 800f24a:	230c      	movs	r3, #12
 800f24c:	6033      	str	r3, [r6, #0]
 800f24e:	4630      	mov	r0, r6
 800f250:	f000 f80c 	bl	800f26c <__malloc_unlock>
 800f254:	e794      	b.n	800f180 <_malloc_r+0x20>
 800f256:	6005      	str	r5, [r0, #0]
 800f258:	e7d6      	b.n	800f208 <_malloc_r+0xa8>
 800f25a:	bf00      	nop
 800f25c:	200020f0 	.word	0x200020f0

0800f260 <__malloc_lock>:
 800f260:	4801      	ldr	r0, [pc, #4]	@ (800f268 <__malloc_lock+0x8>)
 800f262:	f000 b8cf 	b.w	800f404 <__retarget_lock_acquire_recursive>
 800f266:	bf00      	nop
 800f268:	20002230 	.word	0x20002230

0800f26c <__malloc_unlock>:
 800f26c:	4801      	ldr	r0, [pc, #4]	@ (800f274 <__malloc_unlock+0x8>)
 800f26e:	f000 b8ca 	b.w	800f406 <__retarget_lock_release_recursive>
 800f272:	bf00      	nop
 800f274:	20002230 	.word	0x20002230

0800f278 <_strtol_l.isra.0>:
 800f278:	2b24      	cmp	r3, #36	@ 0x24
 800f27a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f27e:	4686      	mov	lr, r0
 800f280:	4690      	mov	r8, r2
 800f282:	d801      	bhi.n	800f288 <_strtol_l.isra.0+0x10>
 800f284:	2b01      	cmp	r3, #1
 800f286:	d106      	bne.n	800f296 <_strtol_l.isra.0+0x1e>
 800f288:	f000 f892 	bl	800f3b0 <__errno>
 800f28c:	2316      	movs	r3, #22
 800f28e:	6003      	str	r3, [r0, #0]
 800f290:	2000      	movs	r0, #0
 800f292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f296:	4834      	ldr	r0, [pc, #208]	@ (800f368 <_strtol_l.isra.0+0xf0>)
 800f298:	460d      	mov	r5, r1
 800f29a:	462a      	mov	r2, r5
 800f29c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f2a0:	5d06      	ldrb	r6, [r0, r4]
 800f2a2:	f016 0608 	ands.w	r6, r6, #8
 800f2a6:	d1f8      	bne.n	800f29a <_strtol_l.isra.0+0x22>
 800f2a8:	2c2d      	cmp	r4, #45	@ 0x2d
 800f2aa:	d110      	bne.n	800f2ce <_strtol_l.isra.0+0x56>
 800f2ac:	782c      	ldrb	r4, [r5, #0]
 800f2ae:	2601      	movs	r6, #1
 800f2b0:	1c95      	adds	r5, r2, #2
 800f2b2:	f033 0210 	bics.w	r2, r3, #16
 800f2b6:	d115      	bne.n	800f2e4 <_strtol_l.isra.0+0x6c>
 800f2b8:	2c30      	cmp	r4, #48	@ 0x30
 800f2ba:	d10d      	bne.n	800f2d8 <_strtol_l.isra.0+0x60>
 800f2bc:	782a      	ldrb	r2, [r5, #0]
 800f2be:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f2c2:	2a58      	cmp	r2, #88	@ 0x58
 800f2c4:	d108      	bne.n	800f2d8 <_strtol_l.isra.0+0x60>
 800f2c6:	786c      	ldrb	r4, [r5, #1]
 800f2c8:	3502      	adds	r5, #2
 800f2ca:	2310      	movs	r3, #16
 800f2cc:	e00a      	b.n	800f2e4 <_strtol_l.isra.0+0x6c>
 800f2ce:	2c2b      	cmp	r4, #43	@ 0x2b
 800f2d0:	bf04      	itt	eq
 800f2d2:	782c      	ldrbeq	r4, [r5, #0]
 800f2d4:	1c95      	addeq	r5, r2, #2
 800f2d6:	e7ec      	b.n	800f2b2 <_strtol_l.isra.0+0x3a>
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d1f6      	bne.n	800f2ca <_strtol_l.isra.0+0x52>
 800f2dc:	2c30      	cmp	r4, #48	@ 0x30
 800f2de:	bf14      	ite	ne
 800f2e0:	230a      	movne	r3, #10
 800f2e2:	2308      	moveq	r3, #8
 800f2e4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f2e8:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	fbbc f9f3 	udiv	r9, ip, r3
 800f2f2:	4610      	mov	r0, r2
 800f2f4:	fb03 ca19 	mls	sl, r3, r9, ip
 800f2f8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f2fc:	2f09      	cmp	r7, #9
 800f2fe:	d80f      	bhi.n	800f320 <_strtol_l.isra.0+0xa8>
 800f300:	463c      	mov	r4, r7
 800f302:	42a3      	cmp	r3, r4
 800f304:	dd1b      	ble.n	800f33e <_strtol_l.isra.0+0xc6>
 800f306:	1c57      	adds	r7, r2, #1
 800f308:	d007      	beq.n	800f31a <_strtol_l.isra.0+0xa2>
 800f30a:	4581      	cmp	r9, r0
 800f30c:	d314      	bcc.n	800f338 <_strtol_l.isra.0+0xc0>
 800f30e:	d101      	bne.n	800f314 <_strtol_l.isra.0+0x9c>
 800f310:	45a2      	cmp	sl, r4
 800f312:	db11      	blt.n	800f338 <_strtol_l.isra.0+0xc0>
 800f314:	fb00 4003 	mla	r0, r0, r3, r4
 800f318:	2201      	movs	r2, #1
 800f31a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f31e:	e7eb      	b.n	800f2f8 <_strtol_l.isra.0+0x80>
 800f320:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f324:	2f19      	cmp	r7, #25
 800f326:	d801      	bhi.n	800f32c <_strtol_l.isra.0+0xb4>
 800f328:	3c37      	subs	r4, #55	@ 0x37
 800f32a:	e7ea      	b.n	800f302 <_strtol_l.isra.0+0x8a>
 800f32c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f330:	2f19      	cmp	r7, #25
 800f332:	d804      	bhi.n	800f33e <_strtol_l.isra.0+0xc6>
 800f334:	3c57      	subs	r4, #87	@ 0x57
 800f336:	e7e4      	b.n	800f302 <_strtol_l.isra.0+0x8a>
 800f338:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f33c:	e7ed      	b.n	800f31a <_strtol_l.isra.0+0xa2>
 800f33e:	1c53      	adds	r3, r2, #1
 800f340:	d108      	bne.n	800f354 <_strtol_l.isra.0+0xdc>
 800f342:	2322      	movs	r3, #34	@ 0x22
 800f344:	f8ce 3000 	str.w	r3, [lr]
 800f348:	4660      	mov	r0, ip
 800f34a:	f1b8 0f00 	cmp.w	r8, #0
 800f34e:	d0a0      	beq.n	800f292 <_strtol_l.isra.0+0x1a>
 800f350:	1e69      	subs	r1, r5, #1
 800f352:	e006      	b.n	800f362 <_strtol_l.isra.0+0xea>
 800f354:	b106      	cbz	r6, 800f358 <_strtol_l.isra.0+0xe0>
 800f356:	4240      	negs	r0, r0
 800f358:	f1b8 0f00 	cmp.w	r8, #0
 800f35c:	d099      	beq.n	800f292 <_strtol_l.isra.0+0x1a>
 800f35e:	2a00      	cmp	r2, #0
 800f360:	d1f6      	bne.n	800f350 <_strtol_l.isra.0+0xd8>
 800f362:	f8c8 1000 	str.w	r1, [r8]
 800f366:	e794      	b.n	800f292 <_strtol_l.isra.0+0x1a>
 800f368:	08011601 	.word	0x08011601

0800f36c <strtol>:
 800f36c:	4613      	mov	r3, r2
 800f36e:	460a      	mov	r2, r1
 800f370:	4601      	mov	r1, r0
 800f372:	4802      	ldr	r0, [pc, #8]	@ (800f37c <strtol+0x10>)
 800f374:	6800      	ldr	r0, [r0, #0]
 800f376:	f7ff bf7f 	b.w	800f278 <_strtol_l.isra.0>
 800f37a:	bf00      	nop
 800f37c:	20000138 	.word	0x20000138

0800f380 <memset>:
 800f380:	4402      	add	r2, r0
 800f382:	4603      	mov	r3, r0
 800f384:	4293      	cmp	r3, r2
 800f386:	d100      	bne.n	800f38a <memset+0xa>
 800f388:	4770      	bx	lr
 800f38a:	f803 1b01 	strb.w	r1, [r3], #1
 800f38e:	e7f9      	b.n	800f384 <memset+0x4>

0800f390 <_sbrk_r>:
 800f390:	b538      	push	{r3, r4, r5, lr}
 800f392:	4d06      	ldr	r5, [pc, #24]	@ (800f3ac <_sbrk_r+0x1c>)
 800f394:	2300      	movs	r3, #0
 800f396:	4604      	mov	r4, r0
 800f398:	4608      	mov	r0, r1
 800f39a:	602b      	str	r3, [r5, #0]
 800f39c:	f7f4 ff26 	bl	80041ec <_sbrk>
 800f3a0:	1c43      	adds	r3, r0, #1
 800f3a2:	d102      	bne.n	800f3aa <_sbrk_r+0x1a>
 800f3a4:	682b      	ldr	r3, [r5, #0]
 800f3a6:	b103      	cbz	r3, 800f3aa <_sbrk_r+0x1a>
 800f3a8:	6023      	str	r3, [r4, #0]
 800f3aa:	bd38      	pop	{r3, r4, r5, pc}
 800f3ac:	2000222c 	.word	0x2000222c

0800f3b0 <__errno>:
 800f3b0:	4b01      	ldr	r3, [pc, #4]	@ (800f3b8 <__errno+0x8>)
 800f3b2:	6818      	ldr	r0, [r3, #0]
 800f3b4:	4770      	bx	lr
 800f3b6:	bf00      	nop
 800f3b8:	20000138 	.word	0x20000138

0800f3bc <__libc_init_array>:
 800f3bc:	b570      	push	{r4, r5, r6, lr}
 800f3be:	4d0d      	ldr	r5, [pc, #52]	@ (800f3f4 <__libc_init_array+0x38>)
 800f3c0:	4c0d      	ldr	r4, [pc, #52]	@ (800f3f8 <__libc_init_array+0x3c>)
 800f3c2:	1b64      	subs	r4, r4, r5
 800f3c4:	10a4      	asrs	r4, r4, #2
 800f3c6:	2600      	movs	r6, #0
 800f3c8:	42a6      	cmp	r6, r4
 800f3ca:	d109      	bne.n	800f3e0 <__libc_init_array+0x24>
 800f3cc:	4d0b      	ldr	r5, [pc, #44]	@ (800f3fc <__libc_init_array+0x40>)
 800f3ce:	4c0c      	ldr	r4, [pc, #48]	@ (800f400 <__libc_init_array+0x44>)
 800f3d0:	f002 f8d6 	bl	8011580 <_init>
 800f3d4:	1b64      	subs	r4, r4, r5
 800f3d6:	10a4      	asrs	r4, r4, #2
 800f3d8:	2600      	movs	r6, #0
 800f3da:	42a6      	cmp	r6, r4
 800f3dc:	d105      	bne.n	800f3ea <__libc_init_array+0x2e>
 800f3de:	bd70      	pop	{r4, r5, r6, pc}
 800f3e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3e4:	4798      	blx	r3
 800f3e6:	3601      	adds	r6, #1
 800f3e8:	e7ee      	b.n	800f3c8 <__libc_init_array+0xc>
 800f3ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3ee:	4798      	blx	r3
 800f3f0:	3601      	adds	r6, #1
 800f3f2:	e7f2      	b.n	800f3da <__libc_init_array+0x1e>
 800f3f4:	08011938 	.word	0x08011938
 800f3f8:	08011938 	.word	0x08011938
 800f3fc:	08011938 	.word	0x08011938
 800f400:	0801193c 	.word	0x0801193c

0800f404 <__retarget_lock_acquire_recursive>:
 800f404:	4770      	bx	lr

0800f406 <__retarget_lock_release_recursive>:
 800f406:	4770      	bx	lr

0800f408 <memcpy>:
 800f408:	440a      	add	r2, r1
 800f40a:	4291      	cmp	r1, r2
 800f40c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800f410:	d100      	bne.n	800f414 <memcpy+0xc>
 800f412:	4770      	bx	lr
 800f414:	b510      	push	{r4, lr}
 800f416:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f41a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f41e:	4291      	cmp	r1, r2
 800f420:	d1f9      	bne.n	800f416 <memcpy+0xe>
 800f422:	bd10      	pop	{r4, pc}

0800f424 <_free_r>:
 800f424:	b538      	push	{r3, r4, r5, lr}
 800f426:	4605      	mov	r5, r0
 800f428:	2900      	cmp	r1, #0
 800f42a:	d041      	beq.n	800f4b0 <_free_r+0x8c>
 800f42c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f430:	1f0c      	subs	r4, r1, #4
 800f432:	2b00      	cmp	r3, #0
 800f434:	bfb8      	it	lt
 800f436:	18e4      	addlt	r4, r4, r3
 800f438:	f7ff ff12 	bl	800f260 <__malloc_lock>
 800f43c:	4a1d      	ldr	r2, [pc, #116]	@ (800f4b4 <_free_r+0x90>)
 800f43e:	6813      	ldr	r3, [r2, #0]
 800f440:	b933      	cbnz	r3, 800f450 <_free_r+0x2c>
 800f442:	6063      	str	r3, [r4, #4]
 800f444:	6014      	str	r4, [r2, #0]
 800f446:	4628      	mov	r0, r5
 800f448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f44c:	f7ff bf0e 	b.w	800f26c <__malloc_unlock>
 800f450:	42a3      	cmp	r3, r4
 800f452:	d908      	bls.n	800f466 <_free_r+0x42>
 800f454:	6820      	ldr	r0, [r4, #0]
 800f456:	1821      	adds	r1, r4, r0
 800f458:	428b      	cmp	r3, r1
 800f45a:	bf01      	itttt	eq
 800f45c:	6819      	ldreq	r1, [r3, #0]
 800f45e:	685b      	ldreq	r3, [r3, #4]
 800f460:	1809      	addeq	r1, r1, r0
 800f462:	6021      	streq	r1, [r4, #0]
 800f464:	e7ed      	b.n	800f442 <_free_r+0x1e>
 800f466:	461a      	mov	r2, r3
 800f468:	685b      	ldr	r3, [r3, #4]
 800f46a:	b10b      	cbz	r3, 800f470 <_free_r+0x4c>
 800f46c:	42a3      	cmp	r3, r4
 800f46e:	d9fa      	bls.n	800f466 <_free_r+0x42>
 800f470:	6811      	ldr	r1, [r2, #0]
 800f472:	1850      	adds	r0, r2, r1
 800f474:	42a0      	cmp	r0, r4
 800f476:	d10b      	bne.n	800f490 <_free_r+0x6c>
 800f478:	6820      	ldr	r0, [r4, #0]
 800f47a:	4401      	add	r1, r0
 800f47c:	1850      	adds	r0, r2, r1
 800f47e:	4283      	cmp	r3, r0
 800f480:	6011      	str	r1, [r2, #0]
 800f482:	d1e0      	bne.n	800f446 <_free_r+0x22>
 800f484:	6818      	ldr	r0, [r3, #0]
 800f486:	685b      	ldr	r3, [r3, #4]
 800f488:	6053      	str	r3, [r2, #4]
 800f48a:	4408      	add	r0, r1
 800f48c:	6010      	str	r0, [r2, #0]
 800f48e:	e7da      	b.n	800f446 <_free_r+0x22>
 800f490:	d902      	bls.n	800f498 <_free_r+0x74>
 800f492:	230c      	movs	r3, #12
 800f494:	602b      	str	r3, [r5, #0]
 800f496:	e7d6      	b.n	800f446 <_free_r+0x22>
 800f498:	6820      	ldr	r0, [r4, #0]
 800f49a:	1821      	adds	r1, r4, r0
 800f49c:	428b      	cmp	r3, r1
 800f49e:	bf04      	itt	eq
 800f4a0:	6819      	ldreq	r1, [r3, #0]
 800f4a2:	685b      	ldreq	r3, [r3, #4]
 800f4a4:	6063      	str	r3, [r4, #4]
 800f4a6:	bf04      	itt	eq
 800f4a8:	1809      	addeq	r1, r1, r0
 800f4aa:	6021      	streq	r1, [r4, #0]
 800f4ac:	6054      	str	r4, [r2, #4]
 800f4ae:	e7ca      	b.n	800f446 <_free_r+0x22>
 800f4b0:	bd38      	pop	{r3, r4, r5, pc}
 800f4b2:	bf00      	nop
 800f4b4:	200020f0 	.word	0x200020f0

0800f4b8 <fmod>:
 800f4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4ba:	ed2d 8b02 	vpush	{d8}
 800f4be:	ec57 6b10 	vmov	r6, r7, d0
 800f4c2:	ec55 4b11 	vmov	r4, r5, d1
 800f4c6:	f000 fbf9 	bl	800fcbc <__ieee754_fmod>
 800f4ca:	4622      	mov	r2, r4
 800f4cc:	462b      	mov	r3, r5
 800f4ce:	4630      	mov	r0, r6
 800f4d0:	4639      	mov	r1, r7
 800f4d2:	eeb0 8a40 	vmov.f32	s16, s0
 800f4d6:	eef0 8a60 	vmov.f32	s17, s1
 800f4da:	f7f1 faeb 	bl	8000ab4 <__aeabi_dcmpun>
 800f4de:	b990      	cbnz	r0, 800f506 <fmod+0x4e>
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	4620      	mov	r0, r4
 800f4e6:	4629      	mov	r1, r5
 800f4e8:	f7f1 fab2 	bl	8000a50 <__aeabi_dcmpeq>
 800f4ec:	b158      	cbz	r0, 800f506 <fmod+0x4e>
 800f4ee:	f7ff ff5f 	bl	800f3b0 <__errno>
 800f4f2:	2321      	movs	r3, #33	@ 0x21
 800f4f4:	6003      	str	r3, [r0, #0]
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	4610      	mov	r0, r2
 800f4fc:	4619      	mov	r1, r3
 800f4fe:	f7f1 f969 	bl	80007d4 <__aeabi_ddiv>
 800f502:	ec41 0b18 	vmov	d8, r0, r1
 800f506:	eeb0 0a48 	vmov.f32	s0, s16
 800f50a:	eef0 0a68 	vmov.f32	s1, s17
 800f50e:	ecbd 8b02 	vpop	{d8}
 800f512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f514 <pow>:
 800f514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f516:	ed2d 8b02 	vpush	{d8}
 800f51a:	eeb0 8a40 	vmov.f32	s16, s0
 800f51e:	eef0 8a60 	vmov.f32	s17, s1
 800f522:	ec55 4b11 	vmov	r4, r5, d1
 800f526:	f000 fcd3 	bl	800fed0 <__ieee754_pow>
 800f52a:	4622      	mov	r2, r4
 800f52c:	462b      	mov	r3, r5
 800f52e:	4620      	mov	r0, r4
 800f530:	4629      	mov	r1, r5
 800f532:	ec57 6b10 	vmov	r6, r7, d0
 800f536:	f7f1 fabd 	bl	8000ab4 <__aeabi_dcmpun>
 800f53a:	2800      	cmp	r0, #0
 800f53c:	d13b      	bne.n	800f5b6 <pow+0xa2>
 800f53e:	ec51 0b18 	vmov	r0, r1, d8
 800f542:	2200      	movs	r2, #0
 800f544:	2300      	movs	r3, #0
 800f546:	f7f1 fa83 	bl	8000a50 <__aeabi_dcmpeq>
 800f54a:	b1b8      	cbz	r0, 800f57c <pow+0x68>
 800f54c:	2200      	movs	r2, #0
 800f54e:	2300      	movs	r3, #0
 800f550:	4620      	mov	r0, r4
 800f552:	4629      	mov	r1, r5
 800f554:	f7f1 fa7c 	bl	8000a50 <__aeabi_dcmpeq>
 800f558:	2800      	cmp	r0, #0
 800f55a:	d146      	bne.n	800f5ea <pow+0xd6>
 800f55c:	ec45 4b10 	vmov	d0, r4, r5
 800f560:	f000 f8ca 	bl	800f6f8 <finite>
 800f564:	b338      	cbz	r0, 800f5b6 <pow+0xa2>
 800f566:	2200      	movs	r2, #0
 800f568:	2300      	movs	r3, #0
 800f56a:	4620      	mov	r0, r4
 800f56c:	4629      	mov	r1, r5
 800f56e:	f7f1 fa79 	bl	8000a64 <__aeabi_dcmplt>
 800f572:	b300      	cbz	r0, 800f5b6 <pow+0xa2>
 800f574:	f7ff ff1c 	bl	800f3b0 <__errno>
 800f578:	2322      	movs	r3, #34	@ 0x22
 800f57a:	e01b      	b.n	800f5b4 <pow+0xa0>
 800f57c:	ec47 6b10 	vmov	d0, r6, r7
 800f580:	f000 f8ba 	bl	800f6f8 <finite>
 800f584:	b9e0      	cbnz	r0, 800f5c0 <pow+0xac>
 800f586:	eeb0 0a48 	vmov.f32	s0, s16
 800f58a:	eef0 0a68 	vmov.f32	s1, s17
 800f58e:	f000 f8b3 	bl	800f6f8 <finite>
 800f592:	b1a8      	cbz	r0, 800f5c0 <pow+0xac>
 800f594:	ec45 4b10 	vmov	d0, r4, r5
 800f598:	f000 f8ae 	bl	800f6f8 <finite>
 800f59c:	b180      	cbz	r0, 800f5c0 <pow+0xac>
 800f59e:	4632      	mov	r2, r6
 800f5a0:	463b      	mov	r3, r7
 800f5a2:	4630      	mov	r0, r6
 800f5a4:	4639      	mov	r1, r7
 800f5a6:	f7f1 fa85 	bl	8000ab4 <__aeabi_dcmpun>
 800f5aa:	2800      	cmp	r0, #0
 800f5ac:	d0e2      	beq.n	800f574 <pow+0x60>
 800f5ae:	f7ff feff 	bl	800f3b0 <__errno>
 800f5b2:	2321      	movs	r3, #33	@ 0x21
 800f5b4:	6003      	str	r3, [r0, #0]
 800f5b6:	ecbd 8b02 	vpop	{d8}
 800f5ba:	ec47 6b10 	vmov	d0, r6, r7
 800f5be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	4630      	mov	r0, r6
 800f5c6:	4639      	mov	r1, r7
 800f5c8:	f7f1 fa42 	bl	8000a50 <__aeabi_dcmpeq>
 800f5cc:	2800      	cmp	r0, #0
 800f5ce:	d0f2      	beq.n	800f5b6 <pow+0xa2>
 800f5d0:	eeb0 0a48 	vmov.f32	s0, s16
 800f5d4:	eef0 0a68 	vmov.f32	s1, s17
 800f5d8:	f000 f88e 	bl	800f6f8 <finite>
 800f5dc:	2800      	cmp	r0, #0
 800f5de:	d0ea      	beq.n	800f5b6 <pow+0xa2>
 800f5e0:	ec45 4b10 	vmov	d0, r4, r5
 800f5e4:	f000 f888 	bl	800f6f8 <finite>
 800f5e8:	e7c3      	b.n	800f572 <pow+0x5e>
 800f5ea:	4f01      	ldr	r7, [pc, #4]	@ (800f5f0 <pow+0xdc>)
 800f5ec:	2600      	movs	r6, #0
 800f5ee:	e7e2      	b.n	800f5b6 <pow+0xa2>
 800f5f0:	3ff00000 	.word	0x3ff00000

0800f5f4 <sqrt>:
 800f5f4:	b538      	push	{r3, r4, r5, lr}
 800f5f6:	ed2d 8b02 	vpush	{d8}
 800f5fa:	ec55 4b10 	vmov	r4, r5, d0
 800f5fe:	f000 f887 	bl	800f710 <__ieee754_sqrt>
 800f602:	4622      	mov	r2, r4
 800f604:	462b      	mov	r3, r5
 800f606:	4620      	mov	r0, r4
 800f608:	4629      	mov	r1, r5
 800f60a:	eeb0 8a40 	vmov.f32	s16, s0
 800f60e:	eef0 8a60 	vmov.f32	s17, s1
 800f612:	f7f1 fa4f 	bl	8000ab4 <__aeabi_dcmpun>
 800f616:	b990      	cbnz	r0, 800f63e <sqrt+0x4a>
 800f618:	2200      	movs	r2, #0
 800f61a:	2300      	movs	r3, #0
 800f61c:	4620      	mov	r0, r4
 800f61e:	4629      	mov	r1, r5
 800f620:	f7f1 fa20 	bl	8000a64 <__aeabi_dcmplt>
 800f624:	b158      	cbz	r0, 800f63e <sqrt+0x4a>
 800f626:	f7ff fec3 	bl	800f3b0 <__errno>
 800f62a:	2321      	movs	r3, #33	@ 0x21
 800f62c:	6003      	str	r3, [r0, #0]
 800f62e:	2200      	movs	r2, #0
 800f630:	2300      	movs	r3, #0
 800f632:	4610      	mov	r0, r2
 800f634:	4619      	mov	r1, r3
 800f636:	f7f1 f8cd 	bl	80007d4 <__aeabi_ddiv>
 800f63a:	ec41 0b18 	vmov	d8, r0, r1
 800f63e:	eeb0 0a48 	vmov.f32	s0, s16
 800f642:	eef0 0a68 	vmov.f32	s1, s17
 800f646:	ecbd 8b02 	vpop	{d8}
 800f64a:	bd38      	pop	{r3, r4, r5, pc}
 800f64c:	0000      	movs	r0, r0
	...

0800f650 <sin>:
 800f650:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f652:	ec53 2b10 	vmov	r2, r3, d0
 800f656:	4826      	ldr	r0, [pc, #152]	@ (800f6f0 <sin+0xa0>)
 800f658:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f65c:	4281      	cmp	r1, r0
 800f65e:	d807      	bhi.n	800f670 <sin+0x20>
 800f660:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800f6e8 <sin+0x98>
 800f664:	2000      	movs	r0, #0
 800f666:	b005      	add	sp, #20
 800f668:	f85d eb04 	ldr.w	lr, [sp], #4
 800f66c:	f000 ba6c 	b.w	800fb48 <__kernel_sin>
 800f670:	4820      	ldr	r0, [pc, #128]	@ (800f6f4 <sin+0xa4>)
 800f672:	4281      	cmp	r1, r0
 800f674:	d908      	bls.n	800f688 <sin+0x38>
 800f676:	4610      	mov	r0, r2
 800f678:	4619      	mov	r1, r3
 800f67a:	f7f0 fdc9 	bl	8000210 <__aeabi_dsub>
 800f67e:	ec41 0b10 	vmov	d0, r0, r1
 800f682:	b005      	add	sp, #20
 800f684:	f85d fb04 	ldr.w	pc, [sp], #4
 800f688:	4668      	mov	r0, sp
 800f68a:	f001 f96d 	bl	8010968 <__ieee754_rem_pio2>
 800f68e:	f000 0003 	and.w	r0, r0, #3
 800f692:	2801      	cmp	r0, #1
 800f694:	d00c      	beq.n	800f6b0 <sin+0x60>
 800f696:	2802      	cmp	r0, #2
 800f698:	d011      	beq.n	800f6be <sin+0x6e>
 800f69a:	b9e8      	cbnz	r0, 800f6d8 <sin+0x88>
 800f69c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f6a0:	ed9d 0b00 	vldr	d0, [sp]
 800f6a4:	2001      	movs	r0, #1
 800f6a6:	f000 fa4f 	bl	800fb48 <__kernel_sin>
 800f6aa:	ec51 0b10 	vmov	r0, r1, d0
 800f6ae:	e7e6      	b.n	800f67e <sin+0x2e>
 800f6b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f6b4:	ed9d 0b00 	vldr	d0, [sp]
 800f6b8:	f000 f97e 	bl	800f9b8 <__kernel_cos>
 800f6bc:	e7f5      	b.n	800f6aa <sin+0x5a>
 800f6be:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f6c2:	ed9d 0b00 	vldr	d0, [sp]
 800f6c6:	2001      	movs	r0, #1
 800f6c8:	f000 fa3e 	bl	800fb48 <__kernel_sin>
 800f6cc:	ec53 2b10 	vmov	r2, r3, d0
 800f6d0:	4610      	mov	r0, r2
 800f6d2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f6d6:	e7d2      	b.n	800f67e <sin+0x2e>
 800f6d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f6dc:	ed9d 0b00 	vldr	d0, [sp]
 800f6e0:	f000 f96a 	bl	800f9b8 <__kernel_cos>
 800f6e4:	e7f2      	b.n	800f6cc <sin+0x7c>
 800f6e6:	bf00      	nop
	...
 800f6f0:	3fe921fb 	.word	0x3fe921fb
 800f6f4:	7fefffff 	.word	0x7fefffff

0800f6f8 <finite>:
 800f6f8:	b082      	sub	sp, #8
 800f6fa:	ed8d 0b00 	vstr	d0, [sp]
 800f6fe:	9801      	ldr	r0, [sp, #4]
 800f700:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800f704:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800f708:	0fc0      	lsrs	r0, r0, #31
 800f70a:	b002      	add	sp, #8
 800f70c:	4770      	bx	lr
	...

0800f710 <__ieee754_sqrt>:
 800f710:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f714:	4a66      	ldr	r2, [pc, #408]	@ (800f8b0 <__ieee754_sqrt+0x1a0>)
 800f716:	ec55 4b10 	vmov	r4, r5, d0
 800f71a:	43aa      	bics	r2, r5
 800f71c:	462b      	mov	r3, r5
 800f71e:	4621      	mov	r1, r4
 800f720:	d110      	bne.n	800f744 <__ieee754_sqrt+0x34>
 800f722:	4622      	mov	r2, r4
 800f724:	4620      	mov	r0, r4
 800f726:	4629      	mov	r1, r5
 800f728:	f7f0 ff2a 	bl	8000580 <__aeabi_dmul>
 800f72c:	4602      	mov	r2, r0
 800f72e:	460b      	mov	r3, r1
 800f730:	4620      	mov	r0, r4
 800f732:	4629      	mov	r1, r5
 800f734:	f7f0 fd6e 	bl	8000214 <__adddf3>
 800f738:	4604      	mov	r4, r0
 800f73a:	460d      	mov	r5, r1
 800f73c:	ec45 4b10 	vmov	d0, r4, r5
 800f740:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f744:	2d00      	cmp	r5, #0
 800f746:	dc0e      	bgt.n	800f766 <__ieee754_sqrt+0x56>
 800f748:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800f74c:	4322      	orrs	r2, r4
 800f74e:	d0f5      	beq.n	800f73c <__ieee754_sqrt+0x2c>
 800f750:	b19d      	cbz	r5, 800f77a <__ieee754_sqrt+0x6a>
 800f752:	4622      	mov	r2, r4
 800f754:	4620      	mov	r0, r4
 800f756:	4629      	mov	r1, r5
 800f758:	f7f0 fd5a 	bl	8000210 <__aeabi_dsub>
 800f75c:	4602      	mov	r2, r0
 800f75e:	460b      	mov	r3, r1
 800f760:	f7f1 f838 	bl	80007d4 <__aeabi_ddiv>
 800f764:	e7e8      	b.n	800f738 <__ieee754_sqrt+0x28>
 800f766:	152a      	asrs	r2, r5, #20
 800f768:	d115      	bne.n	800f796 <__ieee754_sqrt+0x86>
 800f76a:	2000      	movs	r0, #0
 800f76c:	e009      	b.n	800f782 <__ieee754_sqrt+0x72>
 800f76e:	0acb      	lsrs	r3, r1, #11
 800f770:	3a15      	subs	r2, #21
 800f772:	0549      	lsls	r1, r1, #21
 800f774:	2b00      	cmp	r3, #0
 800f776:	d0fa      	beq.n	800f76e <__ieee754_sqrt+0x5e>
 800f778:	e7f7      	b.n	800f76a <__ieee754_sqrt+0x5a>
 800f77a:	462a      	mov	r2, r5
 800f77c:	e7fa      	b.n	800f774 <__ieee754_sqrt+0x64>
 800f77e:	005b      	lsls	r3, r3, #1
 800f780:	3001      	adds	r0, #1
 800f782:	02dc      	lsls	r4, r3, #11
 800f784:	d5fb      	bpl.n	800f77e <__ieee754_sqrt+0x6e>
 800f786:	1e44      	subs	r4, r0, #1
 800f788:	1b12      	subs	r2, r2, r4
 800f78a:	f1c0 0420 	rsb	r4, r0, #32
 800f78e:	fa21 f404 	lsr.w	r4, r1, r4
 800f792:	4323      	orrs	r3, r4
 800f794:	4081      	lsls	r1, r0
 800f796:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f79a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800f79e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f7a2:	07d2      	lsls	r2, r2, #31
 800f7a4:	bf5c      	itt	pl
 800f7a6:	005b      	lslpl	r3, r3, #1
 800f7a8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800f7ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f7b0:	bf58      	it	pl
 800f7b2:	0049      	lslpl	r1, r1, #1
 800f7b4:	2600      	movs	r6, #0
 800f7b6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800f7ba:	107f      	asrs	r7, r7, #1
 800f7bc:	0049      	lsls	r1, r1, #1
 800f7be:	2016      	movs	r0, #22
 800f7c0:	4632      	mov	r2, r6
 800f7c2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800f7c6:	1915      	adds	r5, r2, r4
 800f7c8:	429d      	cmp	r5, r3
 800f7ca:	bfde      	ittt	le
 800f7cc:	192a      	addle	r2, r5, r4
 800f7ce:	1b5b      	suble	r3, r3, r5
 800f7d0:	1936      	addle	r6, r6, r4
 800f7d2:	0fcd      	lsrs	r5, r1, #31
 800f7d4:	3801      	subs	r0, #1
 800f7d6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800f7da:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f7de:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f7e2:	d1f0      	bne.n	800f7c6 <__ieee754_sqrt+0xb6>
 800f7e4:	4605      	mov	r5, r0
 800f7e6:	2420      	movs	r4, #32
 800f7e8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800f7ec:	4293      	cmp	r3, r2
 800f7ee:	eb0c 0e00 	add.w	lr, ip, r0
 800f7f2:	dc02      	bgt.n	800f7fa <__ieee754_sqrt+0xea>
 800f7f4:	d113      	bne.n	800f81e <__ieee754_sqrt+0x10e>
 800f7f6:	458e      	cmp	lr, r1
 800f7f8:	d811      	bhi.n	800f81e <__ieee754_sqrt+0x10e>
 800f7fa:	f1be 0f00 	cmp.w	lr, #0
 800f7fe:	eb0e 000c 	add.w	r0, lr, ip
 800f802:	da3f      	bge.n	800f884 <__ieee754_sqrt+0x174>
 800f804:	2800      	cmp	r0, #0
 800f806:	db3d      	blt.n	800f884 <__ieee754_sqrt+0x174>
 800f808:	f102 0801 	add.w	r8, r2, #1
 800f80c:	1a9b      	subs	r3, r3, r2
 800f80e:	458e      	cmp	lr, r1
 800f810:	bf88      	it	hi
 800f812:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800f816:	eba1 010e 	sub.w	r1, r1, lr
 800f81a:	4465      	add	r5, ip
 800f81c:	4642      	mov	r2, r8
 800f81e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800f822:	3c01      	subs	r4, #1
 800f824:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800f828:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f82c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800f830:	d1dc      	bne.n	800f7ec <__ieee754_sqrt+0xdc>
 800f832:	4319      	orrs	r1, r3
 800f834:	d01b      	beq.n	800f86e <__ieee754_sqrt+0x15e>
 800f836:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800f8b4 <__ieee754_sqrt+0x1a4>
 800f83a:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800f8b8 <__ieee754_sqrt+0x1a8>
 800f83e:	e9da 0100 	ldrd	r0, r1, [sl]
 800f842:	e9db 2300 	ldrd	r2, r3, [fp]
 800f846:	f7f0 fce3 	bl	8000210 <__aeabi_dsub>
 800f84a:	e9da 8900 	ldrd	r8, r9, [sl]
 800f84e:	4602      	mov	r2, r0
 800f850:	460b      	mov	r3, r1
 800f852:	4640      	mov	r0, r8
 800f854:	4649      	mov	r1, r9
 800f856:	f7f1 f90f 	bl	8000a78 <__aeabi_dcmple>
 800f85a:	b140      	cbz	r0, 800f86e <__ieee754_sqrt+0x15e>
 800f85c:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 800f860:	e9da 0100 	ldrd	r0, r1, [sl]
 800f864:	e9db 2300 	ldrd	r2, r3, [fp]
 800f868:	d10e      	bne.n	800f888 <__ieee754_sqrt+0x178>
 800f86a:	3601      	adds	r6, #1
 800f86c:	4625      	mov	r5, r4
 800f86e:	1073      	asrs	r3, r6, #1
 800f870:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800f874:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800f878:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800f87c:	086b      	lsrs	r3, r5, #1
 800f87e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800f882:	e759      	b.n	800f738 <__ieee754_sqrt+0x28>
 800f884:	4690      	mov	r8, r2
 800f886:	e7c1      	b.n	800f80c <__ieee754_sqrt+0xfc>
 800f888:	f7f0 fcc4 	bl	8000214 <__adddf3>
 800f88c:	e9da 8900 	ldrd	r8, r9, [sl]
 800f890:	4602      	mov	r2, r0
 800f892:	460b      	mov	r3, r1
 800f894:	4640      	mov	r0, r8
 800f896:	4649      	mov	r1, r9
 800f898:	f7f1 f8e4 	bl	8000a64 <__aeabi_dcmplt>
 800f89c:	b120      	cbz	r0, 800f8a8 <__ieee754_sqrt+0x198>
 800f89e:	1cab      	adds	r3, r5, #2
 800f8a0:	bf08      	it	eq
 800f8a2:	3601      	addeq	r6, #1
 800f8a4:	3502      	adds	r5, #2
 800f8a6:	e7e2      	b.n	800f86e <__ieee754_sqrt+0x15e>
 800f8a8:	1c6b      	adds	r3, r5, #1
 800f8aa:	f023 0501 	bic.w	r5, r3, #1
 800f8ae:	e7de      	b.n	800f86e <__ieee754_sqrt+0x15e>
 800f8b0:	7ff00000 	.word	0x7ff00000
 800f8b4:	08011710 	.word	0x08011710
 800f8b8:	08011708 	.word	0x08011708
 800f8bc:	00000000 	.word	0x00000000

0800f8c0 <floor>:
 800f8c0:	ec51 0b10 	vmov	r0, r1, d0
 800f8c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8cc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800f8d0:	2e13      	cmp	r6, #19
 800f8d2:	460c      	mov	r4, r1
 800f8d4:	4605      	mov	r5, r0
 800f8d6:	4680      	mov	r8, r0
 800f8d8:	dc34      	bgt.n	800f944 <floor+0x84>
 800f8da:	2e00      	cmp	r6, #0
 800f8dc:	da17      	bge.n	800f90e <floor+0x4e>
 800f8de:	a332      	add	r3, pc, #200	@ (adr r3, 800f9a8 <floor+0xe8>)
 800f8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8e4:	f7f0 fc96 	bl	8000214 <__adddf3>
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	f7f1 f8d8 	bl	8000aa0 <__aeabi_dcmpgt>
 800f8f0:	b150      	cbz	r0, 800f908 <floor+0x48>
 800f8f2:	2c00      	cmp	r4, #0
 800f8f4:	da55      	bge.n	800f9a2 <floor+0xe2>
 800f8f6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800f8fa:	432c      	orrs	r4, r5
 800f8fc:	2500      	movs	r5, #0
 800f8fe:	42ac      	cmp	r4, r5
 800f900:	4c2b      	ldr	r4, [pc, #172]	@ (800f9b0 <floor+0xf0>)
 800f902:	bf08      	it	eq
 800f904:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800f908:	4621      	mov	r1, r4
 800f90a:	4628      	mov	r0, r5
 800f90c:	e023      	b.n	800f956 <floor+0x96>
 800f90e:	4f29      	ldr	r7, [pc, #164]	@ (800f9b4 <floor+0xf4>)
 800f910:	4137      	asrs	r7, r6
 800f912:	ea01 0307 	and.w	r3, r1, r7
 800f916:	4303      	orrs	r3, r0
 800f918:	d01d      	beq.n	800f956 <floor+0x96>
 800f91a:	a323      	add	r3, pc, #140	@ (adr r3, 800f9a8 <floor+0xe8>)
 800f91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f920:	f7f0 fc78 	bl	8000214 <__adddf3>
 800f924:	2200      	movs	r2, #0
 800f926:	2300      	movs	r3, #0
 800f928:	f7f1 f8ba 	bl	8000aa0 <__aeabi_dcmpgt>
 800f92c:	2800      	cmp	r0, #0
 800f92e:	d0eb      	beq.n	800f908 <floor+0x48>
 800f930:	2c00      	cmp	r4, #0
 800f932:	bfbe      	ittt	lt
 800f934:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800f938:	4133      	asrlt	r3, r6
 800f93a:	18e4      	addlt	r4, r4, r3
 800f93c:	ea24 0407 	bic.w	r4, r4, r7
 800f940:	2500      	movs	r5, #0
 800f942:	e7e1      	b.n	800f908 <floor+0x48>
 800f944:	2e33      	cmp	r6, #51	@ 0x33
 800f946:	dd0a      	ble.n	800f95e <floor+0x9e>
 800f948:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800f94c:	d103      	bne.n	800f956 <floor+0x96>
 800f94e:	4602      	mov	r2, r0
 800f950:	460b      	mov	r3, r1
 800f952:	f7f0 fc5f 	bl	8000214 <__adddf3>
 800f956:	ec41 0b10 	vmov	d0, r0, r1
 800f95a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f95e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800f962:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800f966:	40df      	lsrs	r7, r3
 800f968:	4207      	tst	r7, r0
 800f96a:	d0f4      	beq.n	800f956 <floor+0x96>
 800f96c:	a30e      	add	r3, pc, #56	@ (adr r3, 800f9a8 <floor+0xe8>)
 800f96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f972:	f7f0 fc4f 	bl	8000214 <__adddf3>
 800f976:	2200      	movs	r2, #0
 800f978:	2300      	movs	r3, #0
 800f97a:	f7f1 f891 	bl	8000aa0 <__aeabi_dcmpgt>
 800f97e:	2800      	cmp	r0, #0
 800f980:	d0c2      	beq.n	800f908 <floor+0x48>
 800f982:	2c00      	cmp	r4, #0
 800f984:	da0a      	bge.n	800f99c <floor+0xdc>
 800f986:	2e14      	cmp	r6, #20
 800f988:	d101      	bne.n	800f98e <floor+0xce>
 800f98a:	3401      	adds	r4, #1
 800f98c:	e006      	b.n	800f99c <floor+0xdc>
 800f98e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800f992:	2301      	movs	r3, #1
 800f994:	40b3      	lsls	r3, r6
 800f996:	441d      	add	r5, r3
 800f998:	4545      	cmp	r5, r8
 800f99a:	d3f6      	bcc.n	800f98a <floor+0xca>
 800f99c:	ea25 0507 	bic.w	r5, r5, r7
 800f9a0:	e7b2      	b.n	800f908 <floor+0x48>
 800f9a2:	2500      	movs	r5, #0
 800f9a4:	462c      	mov	r4, r5
 800f9a6:	e7af      	b.n	800f908 <floor+0x48>
 800f9a8:	8800759c 	.word	0x8800759c
 800f9ac:	7e37e43c 	.word	0x7e37e43c
 800f9b0:	bff00000 	.word	0xbff00000
 800f9b4:	000fffff 	.word	0x000fffff

0800f9b8 <__kernel_cos>:
 800f9b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9bc:	ec57 6b10 	vmov	r6, r7, d0
 800f9c0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f9c4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800f9c8:	ed8d 1b00 	vstr	d1, [sp]
 800f9cc:	d206      	bcs.n	800f9dc <__kernel_cos+0x24>
 800f9ce:	4630      	mov	r0, r6
 800f9d0:	4639      	mov	r1, r7
 800f9d2:	f7f1 f885 	bl	8000ae0 <__aeabi_d2iz>
 800f9d6:	2800      	cmp	r0, #0
 800f9d8:	f000 8088 	beq.w	800faec <__kernel_cos+0x134>
 800f9dc:	4632      	mov	r2, r6
 800f9de:	463b      	mov	r3, r7
 800f9e0:	4630      	mov	r0, r6
 800f9e2:	4639      	mov	r1, r7
 800f9e4:	f7f0 fdcc 	bl	8000580 <__aeabi_dmul>
 800f9e8:	4b51      	ldr	r3, [pc, #324]	@ (800fb30 <__kernel_cos+0x178>)
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	4604      	mov	r4, r0
 800f9ee:	460d      	mov	r5, r1
 800f9f0:	f7f0 fdc6 	bl	8000580 <__aeabi_dmul>
 800f9f4:	a340      	add	r3, pc, #256	@ (adr r3, 800faf8 <__kernel_cos+0x140>)
 800f9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9fa:	4682      	mov	sl, r0
 800f9fc:	468b      	mov	fp, r1
 800f9fe:	4620      	mov	r0, r4
 800fa00:	4629      	mov	r1, r5
 800fa02:	f7f0 fdbd 	bl	8000580 <__aeabi_dmul>
 800fa06:	a33e      	add	r3, pc, #248	@ (adr r3, 800fb00 <__kernel_cos+0x148>)
 800fa08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa0c:	f7f0 fc02 	bl	8000214 <__adddf3>
 800fa10:	4622      	mov	r2, r4
 800fa12:	462b      	mov	r3, r5
 800fa14:	f7f0 fdb4 	bl	8000580 <__aeabi_dmul>
 800fa18:	a33b      	add	r3, pc, #236	@ (adr r3, 800fb08 <__kernel_cos+0x150>)
 800fa1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa1e:	f7f0 fbf7 	bl	8000210 <__aeabi_dsub>
 800fa22:	4622      	mov	r2, r4
 800fa24:	462b      	mov	r3, r5
 800fa26:	f7f0 fdab 	bl	8000580 <__aeabi_dmul>
 800fa2a:	a339      	add	r3, pc, #228	@ (adr r3, 800fb10 <__kernel_cos+0x158>)
 800fa2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa30:	f7f0 fbf0 	bl	8000214 <__adddf3>
 800fa34:	4622      	mov	r2, r4
 800fa36:	462b      	mov	r3, r5
 800fa38:	f7f0 fda2 	bl	8000580 <__aeabi_dmul>
 800fa3c:	a336      	add	r3, pc, #216	@ (adr r3, 800fb18 <__kernel_cos+0x160>)
 800fa3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa42:	f7f0 fbe5 	bl	8000210 <__aeabi_dsub>
 800fa46:	4622      	mov	r2, r4
 800fa48:	462b      	mov	r3, r5
 800fa4a:	f7f0 fd99 	bl	8000580 <__aeabi_dmul>
 800fa4e:	a334      	add	r3, pc, #208	@ (adr r3, 800fb20 <__kernel_cos+0x168>)
 800fa50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa54:	f7f0 fbde 	bl	8000214 <__adddf3>
 800fa58:	4622      	mov	r2, r4
 800fa5a:	462b      	mov	r3, r5
 800fa5c:	f7f0 fd90 	bl	8000580 <__aeabi_dmul>
 800fa60:	4622      	mov	r2, r4
 800fa62:	462b      	mov	r3, r5
 800fa64:	f7f0 fd8c 	bl	8000580 <__aeabi_dmul>
 800fa68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa6c:	4604      	mov	r4, r0
 800fa6e:	460d      	mov	r5, r1
 800fa70:	4630      	mov	r0, r6
 800fa72:	4639      	mov	r1, r7
 800fa74:	f7f0 fd84 	bl	8000580 <__aeabi_dmul>
 800fa78:	460b      	mov	r3, r1
 800fa7a:	4602      	mov	r2, r0
 800fa7c:	4629      	mov	r1, r5
 800fa7e:	4620      	mov	r0, r4
 800fa80:	f7f0 fbc6 	bl	8000210 <__aeabi_dsub>
 800fa84:	4b2b      	ldr	r3, [pc, #172]	@ (800fb34 <__kernel_cos+0x17c>)
 800fa86:	4598      	cmp	r8, r3
 800fa88:	4606      	mov	r6, r0
 800fa8a:	460f      	mov	r7, r1
 800fa8c:	d810      	bhi.n	800fab0 <__kernel_cos+0xf8>
 800fa8e:	4602      	mov	r2, r0
 800fa90:	460b      	mov	r3, r1
 800fa92:	4650      	mov	r0, sl
 800fa94:	4659      	mov	r1, fp
 800fa96:	f7f0 fbbb 	bl	8000210 <__aeabi_dsub>
 800fa9a:	460b      	mov	r3, r1
 800fa9c:	4926      	ldr	r1, [pc, #152]	@ (800fb38 <__kernel_cos+0x180>)
 800fa9e:	4602      	mov	r2, r0
 800faa0:	2000      	movs	r0, #0
 800faa2:	f7f0 fbb5 	bl	8000210 <__aeabi_dsub>
 800faa6:	ec41 0b10 	vmov	d0, r0, r1
 800faaa:	b003      	add	sp, #12
 800faac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fab0:	4b22      	ldr	r3, [pc, #136]	@ (800fb3c <__kernel_cos+0x184>)
 800fab2:	4921      	ldr	r1, [pc, #132]	@ (800fb38 <__kernel_cos+0x180>)
 800fab4:	4598      	cmp	r8, r3
 800fab6:	bf8c      	ite	hi
 800fab8:	4d21      	ldrhi	r5, [pc, #132]	@ (800fb40 <__kernel_cos+0x188>)
 800faba:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800fabe:	2400      	movs	r4, #0
 800fac0:	4622      	mov	r2, r4
 800fac2:	462b      	mov	r3, r5
 800fac4:	2000      	movs	r0, #0
 800fac6:	f7f0 fba3 	bl	8000210 <__aeabi_dsub>
 800faca:	4622      	mov	r2, r4
 800facc:	4680      	mov	r8, r0
 800face:	4689      	mov	r9, r1
 800fad0:	462b      	mov	r3, r5
 800fad2:	4650      	mov	r0, sl
 800fad4:	4659      	mov	r1, fp
 800fad6:	f7f0 fb9b 	bl	8000210 <__aeabi_dsub>
 800fada:	4632      	mov	r2, r6
 800fadc:	463b      	mov	r3, r7
 800fade:	f7f0 fb97 	bl	8000210 <__aeabi_dsub>
 800fae2:	4602      	mov	r2, r0
 800fae4:	460b      	mov	r3, r1
 800fae6:	4640      	mov	r0, r8
 800fae8:	4649      	mov	r1, r9
 800faea:	e7da      	b.n	800faa2 <__kernel_cos+0xea>
 800faec:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800fb28 <__kernel_cos+0x170>
 800faf0:	e7db      	b.n	800faaa <__kernel_cos+0xf2>
 800faf2:	bf00      	nop
 800faf4:	f3af 8000 	nop.w
 800faf8:	be8838d4 	.word	0xbe8838d4
 800fafc:	bda8fae9 	.word	0xbda8fae9
 800fb00:	bdb4b1c4 	.word	0xbdb4b1c4
 800fb04:	3e21ee9e 	.word	0x3e21ee9e
 800fb08:	809c52ad 	.word	0x809c52ad
 800fb0c:	3e927e4f 	.word	0x3e927e4f
 800fb10:	19cb1590 	.word	0x19cb1590
 800fb14:	3efa01a0 	.word	0x3efa01a0
 800fb18:	16c15177 	.word	0x16c15177
 800fb1c:	3f56c16c 	.word	0x3f56c16c
 800fb20:	5555554c 	.word	0x5555554c
 800fb24:	3fa55555 	.word	0x3fa55555
 800fb28:	00000000 	.word	0x00000000
 800fb2c:	3ff00000 	.word	0x3ff00000
 800fb30:	3fe00000 	.word	0x3fe00000
 800fb34:	3fd33332 	.word	0x3fd33332
 800fb38:	3ff00000 	.word	0x3ff00000
 800fb3c:	3fe90000 	.word	0x3fe90000
 800fb40:	3fd20000 	.word	0x3fd20000
 800fb44:	00000000 	.word	0x00000000

0800fb48 <__kernel_sin>:
 800fb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb4c:	ec55 4b10 	vmov	r4, r5, d0
 800fb50:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800fb54:	b085      	sub	sp, #20
 800fb56:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800fb5a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800fb5e:	4680      	mov	r8, r0
 800fb60:	d205      	bcs.n	800fb6e <__kernel_sin+0x26>
 800fb62:	4620      	mov	r0, r4
 800fb64:	4629      	mov	r1, r5
 800fb66:	f7f0 ffbb 	bl	8000ae0 <__aeabi_d2iz>
 800fb6a:	2800      	cmp	r0, #0
 800fb6c:	d052      	beq.n	800fc14 <__kernel_sin+0xcc>
 800fb6e:	4622      	mov	r2, r4
 800fb70:	462b      	mov	r3, r5
 800fb72:	4620      	mov	r0, r4
 800fb74:	4629      	mov	r1, r5
 800fb76:	f7f0 fd03 	bl	8000580 <__aeabi_dmul>
 800fb7a:	4682      	mov	sl, r0
 800fb7c:	468b      	mov	fp, r1
 800fb7e:	4602      	mov	r2, r0
 800fb80:	460b      	mov	r3, r1
 800fb82:	4620      	mov	r0, r4
 800fb84:	4629      	mov	r1, r5
 800fb86:	f7f0 fcfb 	bl	8000580 <__aeabi_dmul>
 800fb8a:	a342      	add	r3, pc, #264	@ (adr r3, 800fc94 <__kernel_sin+0x14c>)
 800fb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb90:	e9cd 0100 	strd	r0, r1, [sp]
 800fb94:	4650      	mov	r0, sl
 800fb96:	4659      	mov	r1, fp
 800fb98:	f7f0 fcf2 	bl	8000580 <__aeabi_dmul>
 800fb9c:	a33f      	add	r3, pc, #252	@ (adr r3, 800fc9c <__kernel_sin+0x154>)
 800fb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fba2:	f7f0 fb35 	bl	8000210 <__aeabi_dsub>
 800fba6:	4652      	mov	r2, sl
 800fba8:	465b      	mov	r3, fp
 800fbaa:	f7f0 fce9 	bl	8000580 <__aeabi_dmul>
 800fbae:	a33d      	add	r3, pc, #244	@ (adr r3, 800fca4 <__kernel_sin+0x15c>)
 800fbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbb4:	f7f0 fb2e 	bl	8000214 <__adddf3>
 800fbb8:	4652      	mov	r2, sl
 800fbba:	465b      	mov	r3, fp
 800fbbc:	f7f0 fce0 	bl	8000580 <__aeabi_dmul>
 800fbc0:	a33a      	add	r3, pc, #232	@ (adr r3, 800fcac <__kernel_sin+0x164>)
 800fbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbc6:	f7f0 fb23 	bl	8000210 <__aeabi_dsub>
 800fbca:	4652      	mov	r2, sl
 800fbcc:	465b      	mov	r3, fp
 800fbce:	f7f0 fcd7 	bl	8000580 <__aeabi_dmul>
 800fbd2:	a338      	add	r3, pc, #224	@ (adr r3, 800fcb4 <__kernel_sin+0x16c>)
 800fbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbd8:	f7f0 fb1c 	bl	8000214 <__adddf3>
 800fbdc:	4606      	mov	r6, r0
 800fbde:	460f      	mov	r7, r1
 800fbe0:	f1b8 0f00 	cmp.w	r8, #0
 800fbe4:	d11b      	bne.n	800fc1e <__kernel_sin+0xd6>
 800fbe6:	4602      	mov	r2, r0
 800fbe8:	460b      	mov	r3, r1
 800fbea:	4650      	mov	r0, sl
 800fbec:	4659      	mov	r1, fp
 800fbee:	f7f0 fcc7 	bl	8000580 <__aeabi_dmul>
 800fbf2:	a325      	add	r3, pc, #148	@ (adr r3, 800fc88 <__kernel_sin+0x140>)
 800fbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbf8:	f7f0 fb0a 	bl	8000210 <__aeabi_dsub>
 800fbfc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc00:	f7f0 fcbe 	bl	8000580 <__aeabi_dmul>
 800fc04:	4602      	mov	r2, r0
 800fc06:	460b      	mov	r3, r1
 800fc08:	4620      	mov	r0, r4
 800fc0a:	4629      	mov	r1, r5
 800fc0c:	f7f0 fb02 	bl	8000214 <__adddf3>
 800fc10:	4604      	mov	r4, r0
 800fc12:	460d      	mov	r5, r1
 800fc14:	ec45 4b10 	vmov	d0, r4, r5
 800fc18:	b005      	add	sp, #20
 800fc1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc22:	4b1b      	ldr	r3, [pc, #108]	@ (800fc90 <__kernel_sin+0x148>)
 800fc24:	2200      	movs	r2, #0
 800fc26:	f7f0 fcab 	bl	8000580 <__aeabi_dmul>
 800fc2a:	4632      	mov	r2, r6
 800fc2c:	4680      	mov	r8, r0
 800fc2e:	4689      	mov	r9, r1
 800fc30:	463b      	mov	r3, r7
 800fc32:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc36:	f7f0 fca3 	bl	8000580 <__aeabi_dmul>
 800fc3a:	4602      	mov	r2, r0
 800fc3c:	460b      	mov	r3, r1
 800fc3e:	4640      	mov	r0, r8
 800fc40:	4649      	mov	r1, r9
 800fc42:	f7f0 fae5 	bl	8000210 <__aeabi_dsub>
 800fc46:	4652      	mov	r2, sl
 800fc48:	465b      	mov	r3, fp
 800fc4a:	f7f0 fc99 	bl	8000580 <__aeabi_dmul>
 800fc4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fc52:	f7f0 fadd 	bl	8000210 <__aeabi_dsub>
 800fc56:	a30c      	add	r3, pc, #48	@ (adr r3, 800fc88 <__kernel_sin+0x140>)
 800fc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc5c:	4606      	mov	r6, r0
 800fc5e:	460f      	mov	r7, r1
 800fc60:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc64:	f7f0 fc8c 	bl	8000580 <__aeabi_dmul>
 800fc68:	4602      	mov	r2, r0
 800fc6a:	460b      	mov	r3, r1
 800fc6c:	4630      	mov	r0, r6
 800fc6e:	4639      	mov	r1, r7
 800fc70:	f7f0 fad0 	bl	8000214 <__adddf3>
 800fc74:	4602      	mov	r2, r0
 800fc76:	460b      	mov	r3, r1
 800fc78:	4620      	mov	r0, r4
 800fc7a:	4629      	mov	r1, r5
 800fc7c:	f7f0 fac8 	bl	8000210 <__aeabi_dsub>
 800fc80:	e7c6      	b.n	800fc10 <__kernel_sin+0xc8>
 800fc82:	bf00      	nop
 800fc84:	f3af 8000 	nop.w
 800fc88:	55555549 	.word	0x55555549
 800fc8c:	3fc55555 	.word	0x3fc55555
 800fc90:	3fe00000 	.word	0x3fe00000
 800fc94:	5acfd57c 	.word	0x5acfd57c
 800fc98:	3de5d93a 	.word	0x3de5d93a
 800fc9c:	8a2b9ceb 	.word	0x8a2b9ceb
 800fca0:	3e5ae5e6 	.word	0x3e5ae5e6
 800fca4:	57b1fe7d 	.word	0x57b1fe7d
 800fca8:	3ec71de3 	.word	0x3ec71de3
 800fcac:	19c161d5 	.word	0x19c161d5
 800fcb0:	3f2a01a0 	.word	0x3f2a01a0
 800fcb4:	1110f8a6 	.word	0x1110f8a6
 800fcb8:	3f811111 	.word	0x3f811111

0800fcbc <__ieee754_fmod>:
 800fcbc:	ec53 2b11 	vmov	r2, r3, d1
 800fcc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcc4:	f023 4800 	bic.w	r8, r3, #2147483648	@ 0x80000000
 800fcc8:	ea52 0408 	orrs.w	r4, r2, r8
 800fccc:	ec51 0b10 	vmov	r0, r1, d0
 800fcd0:	461e      	mov	r6, r3
 800fcd2:	4696      	mov	lr, r2
 800fcd4:	4694      	mov	ip, r2
 800fcd6:	d00c      	beq.n	800fcf2 <__ieee754_fmod+0x36>
 800fcd8:	4d76      	ldr	r5, [pc, #472]	@ (800feb4 <__ieee754_fmod+0x1f8>)
 800fcda:	f021 4900 	bic.w	r9, r1, #2147483648	@ 0x80000000
 800fcde:	45a9      	cmp	r9, r5
 800fce0:	460c      	mov	r4, r1
 800fce2:	d806      	bhi.n	800fcf2 <__ieee754_fmod+0x36>
 800fce4:	4255      	negs	r5, r2
 800fce6:	4f74      	ldr	r7, [pc, #464]	@ (800feb8 <__ieee754_fmod+0x1fc>)
 800fce8:	4315      	orrs	r5, r2
 800fcea:	ea48 75d5 	orr.w	r5, r8, r5, lsr #31
 800fcee:	42bd      	cmp	r5, r7
 800fcf0:	d909      	bls.n	800fd06 <__ieee754_fmod+0x4a>
 800fcf2:	f7f0 fc45 	bl	8000580 <__aeabi_dmul>
 800fcf6:	4602      	mov	r2, r0
 800fcf8:	460b      	mov	r3, r1
 800fcfa:	f7f0 fd6b 	bl	80007d4 <__aeabi_ddiv>
 800fcfe:	ec41 0b10 	vmov	d0, r0, r1
 800fd02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd06:	45c1      	cmp	r9, r8
 800fd08:	4682      	mov	sl, r0
 800fd0a:	4607      	mov	r7, r0
 800fd0c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800fd10:	dc09      	bgt.n	800fd26 <__ieee754_fmod+0x6a>
 800fd12:	dbf4      	blt.n	800fcfe <__ieee754_fmod+0x42>
 800fd14:	4282      	cmp	r2, r0
 800fd16:	d8f2      	bhi.n	800fcfe <__ieee754_fmod+0x42>
 800fd18:	d105      	bne.n	800fd26 <__ieee754_fmod+0x6a>
 800fd1a:	4b68      	ldr	r3, [pc, #416]	@ (800febc <__ieee754_fmod+0x200>)
 800fd1c:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800fd20:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fd24:	e7eb      	b.n	800fcfe <__ieee754_fmod+0x42>
 800fd26:	4964      	ldr	r1, [pc, #400]	@ (800feb8 <__ieee754_fmod+0x1fc>)
 800fd28:	420c      	tst	r4, r1
 800fd2a:	d148      	bne.n	800fdbe <__ieee754_fmod+0x102>
 800fd2c:	f1b9 0f00 	cmp.w	r9, #0
 800fd30:	d13d      	bne.n	800fdae <__ieee754_fmod+0xf2>
 800fd32:	4a63      	ldr	r2, [pc, #396]	@ (800fec0 <__ieee754_fmod+0x204>)
 800fd34:	4653      	mov	r3, sl
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	dc36      	bgt.n	800fda8 <__ieee754_fmod+0xec>
 800fd3a:	420e      	tst	r6, r1
 800fd3c:	d14f      	bne.n	800fdde <__ieee754_fmod+0x122>
 800fd3e:	f1b8 0f00 	cmp.w	r8, #0
 800fd42:	d144      	bne.n	800fdce <__ieee754_fmod+0x112>
 800fd44:	4b5e      	ldr	r3, [pc, #376]	@ (800fec0 <__ieee754_fmod+0x204>)
 800fd46:	4671      	mov	r1, lr
 800fd48:	2900      	cmp	r1, #0
 800fd4a:	dc3d      	bgt.n	800fdc8 <__ieee754_fmod+0x10c>
 800fd4c:	485d      	ldr	r0, [pc, #372]	@ (800fec4 <__ieee754_fmod+0x208>)
 800fd4e:	4282      	cmp	r2, r0
 800fd50:	db4a      	blt.n	800fde8 <__ieee754_fmod+0x12c>
 800fd52:	f3c4 0113 	ubfx	r1, r4, #0, #20
 800fd56:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800fd5a:	485a      	ldr	r0, [pc, #360]	@ (800fec4 <__ieee754_fmod+0x208>)
 800fd5c:	4283      	cmp	r3, r0
 800fd5e:	db57      	blt.n	800fe10 <__ieee754_fmod+0x154>
 800fd60:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800fd64:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800fd68:	1ad0      	subs	r0, r2, r3
 800fd6a:	1b8a      	subs	r2, r1, r6
 800fd6c:	eba7 040c 	sub.w	r4, r7, ip
 800fd70:	2800      	cmp	r0, #0
 800fd72:	d162      	bne.n	800fe3a <__ieee754_fmod+0x17e>
 800fd74:	4567      	cmp	r7, ip
 800fd76:	bf38      	it	cc
 800fd78:	f102 32ff 	addcc.w	r2, r2, #4294967295	@ 0xffffffff
 800fd7c:	2a00      	cmp	r2, #0
 800fd7e:	bfbc      	itt	lt
 800fd80:	463c      	movlt	r4, r7
 800fd82:	460a      	movlt	r2, r1
 800fd84:	ea52 0104 	orrs.w	r1, r2, r4
 800fd88:	d0c7      	beq.n	800fd1a <__ieee754_fmod+0x5e>
 800fd8a:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 800fd8e:	db69      	blt.n	800fe64 <__ieee754_fmod+0x1a8>
 800fd90:	494c      	ldr	r1, [pc, #304]	@ (800fec4 <__ieee754_fmod+0x208>)
 800fd92:	428b      	cmp	r3, r1
 800fd94:	db6c      	blt.n	800fe70 <__ieee754_fmod+0x1b4>
 800fd96:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 800fd9a:	432a      	orrs	r2, r5
 800fd9c:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800fda0:	ea42 5103 	orr.w	r1, r2, r3, lsl #20
 800fda4:	4620      	mov	r0, r4
 800fda6:	e7aa      	b.n	800fcfe <__ieee754_fmod+0x42>
 800fda8:	3a01      	subs	r2, #1
 800fdaa:	005b      	lsls	r3, r3, #1
 800fdac:	e7c3      	b.n	800fd36 <__ieee754_fmod+0x7a>
 800fdae:	4a45      	ldr	r2, [pc, #276]	@ (800fec4 <__ieee754_fmod+0x208>)
 800fdb0:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	ddc0      	ble.n	800fd3a <__ieee754_fmod+0x7e>
 800fdb8:	3a01      	subs	r2, #1
 800fdba:	005b      	lsls	r3, r3, #1
 800fdbc:	e7fa      	b.n	800fdb4 <__ieee754_fmod+0xf8>
 800fdbe:	ea4f 5229 	mov.w	r2, r9, asr #20
 800fdc2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800fdc6:	e7b8      	b.n	800fd3a <__ieee754_fmod+0x7e>
 800fdc8:	3b01      	subs	r3, #1
 800fdca:	0049      	lsls	r1, r1, #1
 800fdcc:	e7bc      	b.n	800fd48 <__ieee754_fmod+0x8c>
 800fdce:	4b3d      	ldr	r3, [pc, #244]	@ (800fec4 <__ieee754_fmod+0x208>)
 800fdd0:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 800fdd4:	2900      	cmp	r1, #0
 800fdd6:	ddb9      	ble.n	800fd4c <__ieee754_fmod+0x90>
 800fdd8:	3b01      	subs	r3, #1
 800fdda:	0049      	lsls	r1, r1, #1
 800fddc:	e7fa      	b.n	800fdd4 <__ieee754_fmod+0x118>
 800fdde:	ea4f 5328 	mov.w	r3, r8, asr #20
 800fde2:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800fde6:	e7b1      	b.n	800fd4c <__ieee754_fmod+0x90>
 800fde8:	1a80      	subs	r0, r0, r2
 800fdea:	281f      	cmp	r0, #31
 800fdec:	dc0a      	bgt.n	800fe04 <__ieee754_fmod+0x148>
 800fdee:	f202 411e 	addw	r1, r2, #1054	@ 0x41e
 800fdf2:	fa09 f900 	lsl.w	r9, r9, r0
 800fdf6:	fa2a f101 	lsr.w	r1, sl, r1
 800fdfa:	ea41 0109 	orr.w	r1, r1, r9
 800fdfe:	fa0a f700 	lsl.w	r7, sl, r0
 800fe02:	e7aa      	b.n	800fd5a <__ieee754_fmod+0x9e>
 800fe04:	4930      	ldr	r1, [pc, #192]	@ (800fec8 <__ieee754_fmod+0x20c>)
 800fe06:	1a89      	subs	r1, r1, r2
 800fe08:	fa0a f101 	lsl.w	r1, sl, r1
 800fe0c:	2700      	movs	r7, #0
 800fe0e:	e7a4      	b.n	800fd5a <__ieee754_fmod+0x9e>
 800fe10:	1ac0      	subs	r0, r0, r3
 800fe12:	281f      	cmp	r0, #31
 800fe14:	dc0a      	bgt.n	800fe2c <__ieee754_fmod+0x170>
 800fe16:	f203 461e 	addw	r6, r3, #1054	@ 0x41e
 800fe1a:	fa08 f800 	lsl.w	r8, r8, r0
 800fe1e:	fa2e f606 	lsr.w	r6, lr, r6
 800fe22:	ea46 0608 	orr.w	r6, r6, r8
 800fe26:	fa0e fc00 	lsl.w	ip, lr, r0
 800fe2a:	e79d      	b.n	800fd68 <__ieee754_fmod+0xac>
 800fe2c:	4e26      	ldr	r6, [pc, #152]	@ (800fec8 <__ieee754_fmod+0x20c>)
 800fe2e:	1af6      	subs	r6, r6, r3
 800fe30:	fa0e f606 	lsl.w	r6, lr, r6
 800fe34:	f04f 0c00 	mov.w	ip, #0
 800fe38:	e796      	b.n	800fd68 <__ieee754_fmod+0xac>
 800fe3a:	4567      	cmp	r7, ip
 800fe3c:	bf38      	it	cc
 800fe3e:	f102 32ff 	addcc.w	r2, r2, #4294967295	@ 0xffffffff
 800fe42:	2a00      	cmp	r2, #0
 800fe44:	da05      	bge.n	800fe52 <__ieee754_fmod+0x196>
 800fe46:	0ffa      	lsrs	r2, r7, #31
 800fe48:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800fe4c:	007f      	lsls	r7, r7, #1
 800fe4e:	3801      	subs	r0, #1
 800fe50:	e78b      	b.n	800fd6a <__ieee754_fmod+0xae>
 800fe52:	ea52 0104 	orrs.w	r1, r2, r4
 800fe56:	f43f af60 	beq.w	800fd1a <__ieee754_fmod+0x5e>
 800fe5a:	0fe1      	lsrs	r1, r4, #31
 800fe5c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800fe60:	0067      	lsls	r7, r4, #1
 800fe62:	e7f4      	b.n	800fe4e <__ieee754_fmod+0x192>
 800fe64:	0fe1      	lsrs	r1, r4, #31
 800fe66:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800fe6a:	0064      	lsls	r4, r4, #1
 800fe6c:	3b01      	subs	r3, #1
 800fe6e:	e78c      	b.n	800fd8a <__ieee754_fmod+0xce>
 800fe70:	1ac9      	subs	r1, r1, r3
 800fe72:	2914      	cmp	r1, #20
 800fe74:	dc0a      	bgt.n	800fe8c <__ieee754_fmod+0x1d0>
 800fe76:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 800fe7a:	fa02 f303 	lsl.w	r3, r2, r3
 800fe7e:	40cc      	lsrs	r4, r1
 800fe80:	4323      	orrs	r3, r4
 800fe82:	410a      	asrs	r2, r1
 800fe84:	ea42 0105 	orr.w	r1, r2, r5
 800fe88:	4618      	mov	r0, r3
 800fe8a:	e738      	b.n	800fcfe <__ieee754_fmod+0x42>
 800fe8c:	291f      	cmp	r1, #31
 800fe8e:	dc07      	bgt.n	800fea0 <__ieee754_fmod+0x1e4>
 800fe90:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 800fe94:	40cc      	lsrs	r4, r1
 800fe96:	fa02 f303 	lsl.w	r3, r2, r3
 800fe9a:	4323      	orrs	r3, r4
 800fe9c:	462a      	mov	r2, r5
 800fe9e:	e7f1      	b.n	800fe84 <__ieee754_fmod+0x1c8>
 800fea0:	f1c3 437f 	rsb	r3, r3, #4278190080	@ 0xff000000
 800fea4:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 800fea8:	f503 437b 	add.w	r3, r3, #64256	@ 0xfb00
 800feac:	33e2      	adds	r3, #226	@ 0xe2
 800feae:	fa42 f303 	asr.w	r3, r2, r3
 800feb2:	e7f3      	b.n	800fe9c <__ieee754_fmod+0x1e0>
 800feb4:	7fefffff 	.word	0x7fefffff
 800feb8:	7ff00000 	.word	0x7ff00000
 800febc:	08011718 	.word	0x08011718
 800fec0:	fffffbed 	.word	0xfffffbed
 800fec4:	fffffc02 	.word	0xfffffc02
 800fec8:	fffffbe2 	.word	0xfffffbe2
 800fecc:	00000000 	.word	0x00000000

0800fed0 <__ieee754_pow>:
 800fed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fed4:	b091      	sub	sp, #68	@ 0x44
 800fed6:	ed8d 1b00 	vstr	d1, [sp]
 800feda:	e9dd 1900 	ldrd	r1, r9, [sp]
 800fede:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800fee2:	ea5a 0001 	orrs.w	r0, sl, r1
 800fee6:	ec57 6b10 	vmov	r6, r7, d0
 800feea:	d113      	bne.n	800ff14 <__ieee754_pow+0x44>
 800feec:	19b3      	adds	r3, r6, r6
 800feee:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800fef2:	4152      	adcs	r2, r2
 800fef4:	4298      	cmp	r0, r3
 800fef6:	4b9a      	ldr	r3, [pc, #616]	@ (8010160 <__ieee754_pow+0x290>)
 800fef8:	4193      	sbcs	r3, r2
 800fefa:	f080 84ee 	bcs.w	80108da <__ieee754_pow+0xa0a>
 800fefe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff02:	4630      	mov	r0, r6
 800ff04:	4639      	mov	r1, r7
 800ff06:	f7f0 f985 	bl	8000214 <__adddf3>
 800ff0a:	ec41 0b10 	vmov	d0, r0, r1
 800ff0e:	b011      	add	sp, #68	@ 0x44
 800ff10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff14:	4a93      	ldr	r2, [pc, #588]	@ (8010164 <__ieee754_pow+0x294>)
 800ff16:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 800ff1a:	4295      	cmp	r5, r2
 800ff1c:	46b8      	mov	r8, r7
 800ff1e:	4633      	mov	r3, r6
 800ff20:	d80a      	bhi.n	800ff38 <__ieee754_pow+0x68>
 800ff22:	d104      	bne.n	800ff2e <__ieee754_pow+0x5e>
 800ff24:	2e00      	cmp	r6, #0
 800ff26:	d1ea      	bne.n	800fefe <__ieee754_pow+0x2e>
 800ff28:	45aa      	cmp	sl, r5
 800ff2a:	d8e8      	bhi.n	800fefe <__ieee754_pow+0x2e>
 800ff2c:	e001      	b.n	800ff32 <__ieee754_pow+0x62>
 800ff2e:	4592      	cmp	sl, r2
 800ff30:	d802      	bhi.n	800ff38 <__ieee754_pow+0x68>
 800ff32:	4592      	cmp	sl, r2
 800ff34:	d10f      	bne.n	800ff56 <__ieee754_pow+0x86>
 800ff36:	b171      	cbz	r1, 800ff56 <__ieee754_pow+0x86>
 800ff38:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800ff3c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800ff40:	ea58 0803 	orrs.w	r8, r8, r3
 800ff44:	d1db      	bne.n	800fefe <__ieee754_pow+0x2e>
 800ff46:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ff4a:	18db      	adds	r3, r3, r3
 800ff4c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800ff50:	4152      	adcs	r2, r2
 800ff52:	4598      	cmp	r8, r3
 800ff54:	e7cf      	b.n	800fef6 <__ieee754_pow+0x26>
 800ff56:	f1b8 0f00 	cmp.w	r8, #0
 800ff5a:	46ab      	mov	fp, r5
 800ff5c:	da43      	bge.n	800ffe6 <__ieee754_pow+0x116>
 800ff5e:	4a82      	ldr	r2, [pc, #520]	@ (8010168 <__ieee754_pow+0x298>)
 800ff60:	4592      	cmp	sl, r2
 800ff62:	d856      	bhi.n	8010012 <__ieee754_pow+0x142>
 800ff64:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800ff68:	4592      	cmp	sl, r2
 800ff6a:	f240 84c5 	bls.w	80108f8 <__ieee754_pow+0xa28>
 800ff6e:	ea4f 522a 	mov.w	r2, sl, asr #20
 800ff72:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800ff76:	2a14      	cmp	r2, #20
 800ff78:	dd18      	ble.n	800ffac <__ieee754_pow+0xdc>
 800ff7a:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800ff7e:	fa21 f402 	lsr.w	r4, r1, r2
 800ff82:	fa04 f202 	lsl.w	r2, r4, r2
 800ff86:	428a      	cmp	r2, r1
 800ff88:	f040 84b6 	bne.w	80108f8 <__ieee754_pow+0xa28>
 800ff8c:	f004 0401 	and.w	r4, r4, #1
 800ff90:	f1c4 0402 	rsb	r4, r4, #2
 800ff94:	2900      	cmp	r1, #0
 800ff96:	d159      	bne.n	801004c <__ieee754_pow+0x17c>
 800ff98:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800ff9c:	d148      	bne.n	8010030 <__ieee754_pow+0x160>
 800ff9e:	4632      	mov	r2, r6
 800ffa0:	463b      	mov	r3, r7
 800ffa2:	4630      	mov	r0, r6
 800ffa4:	4639      	mov	r1, r7
 800ffa6:	f7f0 faeb 	bl	8000580 <__aeabi_dmul>
 800ffaa:	e7ae      	b.n	800ff0a <__ieee754_pow+0x3a>
 800ffac:	2900      	cmp	r1, #0
 800ffae:	d14c      	bne.n	801004a <__ieee754_pow+0x17a>
 800ffb0:	f1c2 0214 	rsb	r2, r2, #20
 800ffb4:	fa4a f402 	asr.w	r4, sl, r2
 800ffb8:	fa04 f202 	lsl.w	r2, r4, r2
 800ffbc:	4552      	cmp	r2, sl
 800ffbe:	f040 8498 	bne.w	80108f2 <__ieee754_pow+0xa22>
 800ffc2:	f004 0401 	and.w	r4, r4, #1
 800ffc6:	f1c4 0402 	rsb	r4, r4, #2
 800ffca:	4a68      	ldr	r2, [pc, #416]	@ (801016c <__ieee754_pow+0x29c>)
 800ffcc:	4592      	cmp	sl, r2
 800ffce:	d1e3      	bne.n	800ff98 <__ieee754_pow+0xc8>
 800ffd0:	f1b9 0f00 	cmp.w	r9, #0
 800ffd4:	f280 8489 	bge.w	80108ea <__ieee754_pow+0xa1a>
 800ffd8:	4964      	ldr	r1, [pc, #400]	@ (801016c <__ieee754_pow+0x29c>)
 800ffda:	4632      	mov	r2, r6
 800ffdc:	463b      	mov	r3, r7
 800ffde:	2000      	movs	r0, #0
 800ffe0:	f7f0 fbf8 	bl	80007d4 <__aeabi_ddiv>
 800ffe4:	e791      	b.n	800ff0a <__ieee754_pow+0x3a>
 800ffe6:	2400      	movs	r4, #0
 800ffe8:	bb81      	cbnz	r1, 801004c <__ieee754_pow+0x17c>
 800ffea:	4a5e      	ldr	r2, [pc, #376]	@ (8010164 <__ieee754_pow+0x294>)
 800ffec:	4592      	cmp	sl, r2
 800ffee:	d1ec      	bne.n	800ffca <__ieee754_pow+0xfa>
 800fff0:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 800fff4:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800fff8:	431a      	orrs	r2, r3
 800fffa:	f000 846e 	beq.w	80108da <__ieee754_pow+0xa0a>
 800fffe:	4b5c      	ldr	r3, [pc, #368]	@ (8010170 <__ieee754_pow+0x2a0>)
 8010000:	429d      	cmp	r5, r3
 8010002:	d908      	bls.n	8010016 <__ieee754_pow+0x146>
 8010004:	f1b9 0f00 	cmp.w	r9, #0
 8010008:	f280 846b 	bge.w	80108e2 <__ieee754_pow+0xa12>
 801000c:	2000      	movs	r0, #0
 801000e:	2100      	movs	r1, #0
 8010010:	e77b      	b.n	800ff0a <__ieee754_pow+0x3a>
 8010012:	2402      	movs	r4, #2
 8010014:	e7e8      	b.n	800ffe8 <__ieee754_pow+0x118>
 8010016:	f1b9 0f00 	cmp.w	r9, #0
 801001a:	f04f 0000 	mov.w	r0, #0
 801001e:	f04f 0100 	mov.w	r1, #0
 8010022:	f6bf af72 	bge.w	800ff0a <__ieee754_pow+0x3a>
 8010026:	e9dd 0300 	ldrd	r0, r3, [sp]
 801002a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801002e:	e76c      	b.n	800ff0a <__ieee754_pow+0x3a>
 8010030:	4a50      	ldr	r2, [pc, #320]	@ (8010174 <__ieee754_pow+0x2a4>)
 8010032:	4591      	cmp	r9, r2
 8010034:	d10a      	bne.n	801004c <__ieee754_pow+0x17c>
 8010036:	f1b8 0f00 	cmp.w	r8, #0
 801003a:	db07      	blt.n	801004c <__ieee754_pow+0x17c>
 801003c:	ec47 6b10 	vmov	d0, r6, r7
 8010040:	b011      	add	sp, #68	@ 0x44
 8010042:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010046:	f7ff bb63 	b.w	800f710 <__ieee754_sqrt>
 801004a:	2400      	movs	r4, #0
 801004c:	ec47 6b10 	vmov	d0, r6, r7
 8010050:	9302      	str	r3, [sp, #8]
 8010052:	f000 fe85 	bl	8010d60 <fabs>
 8010056:	9b02      	ldr	r3, [sp, #8]
 8010058:	ec51 0b10 	vmov	r0, r1, d0
 801005c:	bb43      	cbnz	r3, 80100b0 <__ieee754_pow+0x1e0>
 801005e:	4b43      	ldr	r3, [pc, #268]	@ (801016c <__ieee754_pow+0x29c>)
 8010060:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8010064:	429a      	cmp	r2, r3
 8010066:	d000      	beq.n	801006a <__ieee754_pow+0x19a>
 8010068:	bb15      	cbnz	r5, 80100b0 <__ieee754_pow+0x1e0>
 801006a:	f1b9 0f00 	cmp.w	r9, #0
 801006e:	da05      	bge.n	801007c <__ieee754_pow+0x1ac>
 8010070:	4602      	mov	r2, r0
 8010072:	460b      	mov	r3, r1
 8010074:	2000      	movs	r0, #0
 8010076:	493d      	ldr	r1, [pc, #244]	@ (801016c <__ieee754_pow+0x29c>)
 8010078:	f7f0 fbac 	bl	80007d4 <__aeabi_ddiv>
 801007c:	f1b8 0f00 	cmp.w	r8, #0
 8010080:	f6bf af43 	bge.w	800ff0a <__ieee754_pow+0x3a>
 8010084:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8010088:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 801008c:	4325      	orrs	r5, r4
 801008e:	d108      	bne.n	80100a2 <__ieee754_pow+0x1d2>
 8010090:	4602      	mov	r2, r0
 8010092:	460b      	mov	r3, r1
 8010094:	4610      	mov	r0, r2
 8010096:	4619      	mov	r1, r3
 8010098:	f7f0 f8ba 	bl	8000210 <__aeabi_dsub>
 801009c:	4602      	mov	r2, r0
 801009e:	460b      	mov	r3, r1
 80100a0:	e79e      	b.n	800ffe0 <__ieee754_pow+0x110>
 80100a2:	2c01      	cmp	r4, #1
 80100a4:	f47f af31 	bne.w	800ff0a <__ieee754_pow+0x3a>
 80100a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80100ac:	4619      	mov	r1, r3
 80100ae:	e72c      	b.n	800ff0a <__ieee754_pow+0x3a>
 80100b0:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 80100b4:	3b01      	subs	r3, #1
 80100b6:	ea53 0204 	orrs.w	r2, r3, r4
 80100ba:	d102      	bne.n	80100c2 <__ieee754_pow+0x1f2>
 80100bc:	4632      	mov	r2, r6
 80100be:	463b      	mov	r3, r7
 80100c0:	e7e8      	b.n	8010094 <__ieee754_pow+0x1c4>
 80100c2:	3c01      	subs	r4, #1
 80100c4:	431c      	orrs	r4, r3
 80100c6:	d016      	beq.n	80100f6 <__ieee754_pow+0x226>
 80100c8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010150 <__ieee754_pow+0x280>
 80100cc:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80100d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80100d4:	f240 8110 	bls.w	80102f8 <__ieee754_pow+0x428>
 80100d8:	4b27      	ldr	r3, [pc, #156]	@ (8010178 <__ieee754_pow+0x2a8>)
 80100da:	459a      	cmp	sl, r3
 80100dc:	4b24      	ldr	r3, [pc, #144]	@ (8010170 <__ieee754_pow+0x2a0>)
 80100de:	d916      	bls.n	801010e <__ieee754_pow+0x23e>
 80100e0:	429d      	cmp	r5, r3
 80100e2:	d80b      	bhi.n	80100fc <__ieee754_pow+0x22c>
 80100e4:	f1b9 0f00 	cmp.w	r9, #0
 80100e8:	da0b      	bge.n	8010102 <__ieee754_pow+0x232>
 80100ea:	2000      	movs	r0, #0
 80100ec:	b011      	add	sp, #68	@ 0x44
 80100ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100f2:	f000 beed 	b.w	8010ed0 <__math_oflow>
 80100f6:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8010158 <__ieee754_pow+0x288>
 80100fa:	e7e7      	b.n	80100cc <__ieee754_pow+0x1fc>
 80100fc:	f1b9 0f00 	cmp.w	r9, #0
 8010100:	dcf3      	bgt.n	80100ea <__ieee754_pow+0x21a>
 8010102:	2000      	movs	r0, #0
 8010104:	b011      	add	sp, #68	@ 0x44
 8010106:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801010a:	f000 bed9 	b.w	8010ec0 <__math_uflow>
 801010e:	429d      	cmp	r5, r3
 8010110:	d20c      	bcs.n	801012c <__ieee754_pow+0x25c>
 8010112:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010116:	2200      	movs	r2, #0
 8010118:	2300      	movs	r3, #0
 801011a:	f7f0 fca3 	bl	8000a64 <__aeabi_dcmplt>
 801011e:	3800      	subs	r0, #0
 8010120:	bf18      	it	ne
 8010122:	2001      	movne	r0, #1
 8010124:	f1b9 0f00 	cmp.w	r9, #0
 8010128:	daec      	bge.n	8010104 <__ieee754_pow+0x234>
 801012a:	e7df      	b.n	80100ec <__ieee754_pow+0x21c>
 801012c:	4b0f      	ldr	r3, [pc, #60]	@ (801016c <__ieee754_pow+0x29c>)
 801012e:	429d      	cmp	r5, r3
 8010130:	f04f 0200 	mov.w	r2, #0
 8010134:	d922      	bls.n	801017c <__ieee754_pow+0x2ac>
 8010136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801013a:	2300      	movs	r3, #0
 801013c:	f7f0 fc92 	bl	8000a64 <__aeabi_dcmplt>
 8010140:	3800      	subs	r0, #0
 8010142:	bf18      	it	ne
 8010144:	2001      	movne	r0, #1
 8010146:	f1b9 0f00 	cmp.w	r9, #0
 801014a:	dccf      	bgt.n	80100ec <__ieee754_pow+0x21c>
 801014c:	e7da      	b.n	8010104 <__ieee754_pow+0x234>
 801014e:	bf00      	nop
 8010150:	00000000 	.word	0x00000000
 8010154:	3ff00000 	.word	0x3ff00000
 8010158:	00000000 	.word	0x00000000
 801015c:	bff00000 	.word	0xbff00000
 8010160:	fff00000 	.word	0xfff00000
 8010164:	7ff00000 	.word	0x7ff00000
 8010168:	433fffff 	.word	0x433fffff
 801016c:	3ff00000 	.word	0x3ff00000
 8010170:	3fefffff 	.word	0x3fefffff
 8010174:	3fe00000 	.word	0x3fe00000
 8010178:	43f00000 	.word	0x43f00000
 801017c:	4b5a      	ldr	r3, [pc, #360]	@ (80102e8 <__ieee754_pow+0x418>)
 801017e:	f7f0 f847 	bl	8000210 <__aeabi_dsub>
 8010182:	a351      	add	r3, pc, #324	@ (adr r3, 80102c8 <__ieee754_pow+0x3f8>)
 8010184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010188:	4604      	mov	r4, r0
 801018a:	460d      	mov	r5, r1
 801018c:	f7f0 f9f8 	bl	8000580 <__aeabi_dmul>
 8010190:	a34f      	add	r3, pc, #316	@ (adr r3, 80102d0 <__ieee754_pow+0x400>)
 8010192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010196:	4606      	mov	r6, r0
 8010198:	460f      	mov	r7, r1
 801019a:	4620      	mov	r0, r4
 801019c:	4629      	mov	r1, r5
 801019e:	f7f0 f9ef 	bl	8000580 <__aeabi_dmul>
 80101a2:	4b52      	ldr	r3, [pc, #328]	@ (80102ec <__ieee754_pow+0x41c>)
 80101a4:	4682      	mov	sl, r0
 80101a6:	468b      	mov	fp, r1
 80101a8:	2200      	movs	r2, #0
 80101aa:	4620      	mov	r0, r4
 80101ac:	4629      	mov	r1, r5
 80101ae:	f7f0 f9e7 	bl	8000580 <__aeabi_dmul>
 80101b2:	4602      	mov	r2, r0
 80101b4:	460b      	mov	r3, r1
 80101b6:	a148      	add	r1, pc, #288	@ (adr r1, 80102d8 <__ieee754_pow+0x408>)
 80101b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80101bc:	f7f0 f828 	bl	8000210 <__aeabi_dsub>
 80101c0:	4622      	mov	r2, r4
 80101c2:	462b      	mov	r3, r5
 80101c4:	f7f0 f9dc 	bl	8000580 <__aeabi_dmul>
 80101c8:	4602      	mov	r2, r0
 80101ca:	460b      	mov	r3, r1
 80101cc:	2000      	movs	r0, #0
 80101ce:	4948      	ldr	r1, [pc, #288]	@ (80102f0 <__ieee754_pow+0x420>)
 80101d0:	f7f0 f81e 	bl	8000210 <__aeabi_dsub>
 80101d4:	4622      	mov	r2, r4
 80101d6:	4680      	mov	r8, r0
 80101d8:	4689      	mov	r9, r1
 80101da:	462b      	mov	r3, r5
 80101dc:	4620      	mov	r0, r4
 80101de:	4629      	mov	r1, r5
 80101e0:	f7f0 f9ce 	bl	8000580 <__aeabi_dmul>
 80101e4:	4602      	mov	r2, r0
 80101e6:	460b      	mov	r3, r1
 80101e8:	4640      	mov	r0, r8
 80101ea:	4649      	mov	r1, r9
 80101ec:	f7f0 f9c8 	bl	8000580 <__aeabi_dmul>
 80101f0:	a33b      	add	r3, pc, #236	@ (adr r3, 80102e0 <__ieee754_pow+0x410>)
 80101f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f6:	f7f0 f9c3 	bl	8000580 <__aeabi_dmul>
 80101fa:	4602      	mov	r2, r0
 80101fc:	460b      	mov	r3, r1
 80101fe:	4650      	mov	r0, sl
 8010200:	4659      	mov	r1, fp
 8010202:	f7f0 f805 	bl	8000210 <__aeabi_dsub>
 8010206:	4602      	mov	r2, r0
 8010208:	460b      	mov	r3, r1
 801020a:	4680      	mov	r8, r0
 801020c:	4689      	mov	r9, r1
 801020e:	4630      	mov	r0, r6
 8010210:	4639      	mov	r1, r7
 8010212:	f7ef ffff 	bl	8000214 <__adddf3>
 8010216:	2400      	movs	r4, #0
 8010218:	4632      	mov	r2, r6
 801021a:	463b      	mov	r3, r7
 801021c:	4620      	mov	r0, r4
 801021e:	460d      	mov	r5, r1
 8010220:	f7ef fff6 	bl	8000210 <__aeabi_dsub>
 8010224:	4602      	mov	r2, r0
 8010226:	460b      	mov	r3, r1
 8010228:	4640      	mov	r0, r8
 801022a:	4649      	mov	r1, r9
 801022c:	f7ef fff0 	bl	8000210 <__aeabi_dsub>
 8010230:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010234:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010238:	2300      	movs	r3, #0
 801023a:	9304      	str	r3, [sp, #16]
 801023c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8010240:	4606      	mov	r6, r0
 8010242:	460f      	mov	r7, r1
 8010244:	465b      	mov	r3, fp
 8010246:	4652      	mov	r2, sl
 8010248:	e9dd 0100 	ldrd	r0, r1, [sp]
 801024c:	f7ef ffe0 	bl	8000210 <__aeabi_dsub>
 8010250:	4622      	mov	r2, r4
 8010252:	462b      	mov	r3, r5
 8010254:	f7f0 f994 	bl	8000580 <__aeabi_dmul>
 8010258:	e9dd 2300 	ldrd	r2, r3, [sp]
 801025c:	4680      	mov	r8, r0
 801025e:	4689      	mov	r9, r1
 8010260:	4630      	mov	r0, r6
 8010262:	4639      	mov	r1, r7
 8010264:	f7f0 f98c 	bl	8000580 <__aeabi_dmul>
 8010268:	4602      	mov	r2, r0
 801026a:	460b      	mov	r3, r1
 801026c:	4640      	mov	r0, r8
 801026e:	4649      	mov	r1, r9
 8010270:	f7ef ffd0 	bl	8000214 <__adddf3>
 8010274:	465b      	mov	r3, fp
 8010276:	4606      	mov	r6, r0
 8010278:	460f      	mov	r7, r1
 801027a:	4652      	mov	r2, sl
 801027c:	4620      	mov	r0, r4
 801027e:	4629      	mov	r1, r5
 8010280:	f7f0 f97e 	bl	8000580 <__aeabi_dmul>
 8010284:	460b      	mov	r3, r1
 8010286:	4602      	mov	r2, r0
 8010288:	4680      	mov	r8, r0
 801028a:	4689      	mov	r9, r1
 801028c:	4630      	mov	r0, r6
 801028e:	4639      	mov	r1, r7
 8010290:	f7ef ffc0 	bl	8000214 <__adddf3>
 8010294:	4b17      	ldr	r3, [pc, #92]	@ (80102f4 <__ieee754_pow+0x424>)
 8010296:	4299      	cmp	r1, r3
 8010298:	4604      	mov	r4, r0
 801029a:	460d      	mov	r5, r1
 801029c:	468b      	mov	fp, r1
 801029e:	f340 820b 	ble.w	80106b8 <__ieee754_pow+0x7e8>
 80102a2:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80102a6:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80102aa:	4303      	orrs	r3, r0
 80102ac:	f000 81ea 	beq.w	8010684 <__ieee754_pow+0x7b4>
 80102b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102b4:	2200      	movs	r2, #0
 80102b6:	2300      	movs	r3, #0
 80102b8:	f7f0 fbd4 	bl	8000a64 <__aeabi_dcmplt>
 80102bc:	3800      	subs	r0, #0
 80102be:	bf18      	it	ne
 80102c0:	2001      	movne	r0, #1
 80102c2:	e713      	b.n	80100ec <__ieee754_pow+0x21c>
 80102c4:	f3af 8000 	nop.w
 80102c8:	60000000 	.word	0x60000000
 80102cc:	3ff71547 	.word	0x3ff71547
 80102d0:	f85ddf44 	.word	0xf85ddf44
 80102d4:	3e54ae0b 	.word	0x3e54ae0b
 80102d8:	55555555 	.word	0x55555555
 80102dc:	3fd55555 	.word	0x3fd55555
 80102e0:	652b82fe 	.word	0x652b82fe
 80102e4:	3ff71547 	.word	0x3ff71547
 80102e8:	3ff00000 	.word	0x3ff00000
 80102ec:	3fd00000 	.word	0x3fd00000
 80102f0:	3fe00000 	.word	0x3fe00000
 80102f4:	408fffff 	.word	0x408fffff
 80102f8:	4bd5      	ldr	r3, [pc, #852]	@ (8010650 <__ieee754_pow+0x780>)
 80102fa:	ea08 0303 	and.w	r3, r8, r3
 80102fe:	2200      	movs	r2, #0
 8010300:	b92b      	cbnz	r3, 801030e <__ieee754_pow+0x43e>
 8010302:	4bd4      	ldr	r3, [pc, #848]	@ (8010654 <__ieee754_pow+0x784>)
 8010304:	f7f0 f93c 	bl	8000580 <__aeabi_dmul>
 8010308:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 801030c:	468b      	mov	fp, r1
 801030e:	ea4f 532b 	mov.w	r3, fp, asr #20
 8010312:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8010316:	4413      	add	r3, r2
 8010318:	930a      	str	r3, [sp, #40]	@ 0x28
 801031a:	4bcf      	ldr	r3, [pc, #828]	@ (8010658 <__ieee754_pow+0x788>)
 801031c:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8010320:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8010324:	459b      	cmp	fp, r3
 8010326:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801032a:	dd08      	ble.n	801033e <__ieee754_pow+0x46e>
 801032c:	4bcb      	ldr	r3, [pc, #812]	@ (801065c <__ieee754_pow+0x78c>)
 801032e:	459b      	cmp	fp, r3
 8010330:	f340 81a5 	ble.w	801067e <__ieee754_pow+0x7ae>
 8010334:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010336:	3301      	adds	r3, #1
 8010338:	930a      	str	r3, [sp, #40]	@ 0x28
 801033a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801033e:	f04f 0a00 	mov.w	sl, #0
 8010342:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8010346:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010348:	4bc5      	ldr	r3, [pc, #788]	@ (8010660 <__ieee754_pow+0x790>)
 801034a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801034e:	ed93 7b00 	vldr	d7, [r3]
 8010352:	4629      	mov	r1, r5
 8010354:	ec53 2b17 	vmov	r2, r3, d7
 8010358:	ed8d 7b06 	vstr	d7, [sp, #24]
 801035c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010360:	f7ef ff56 	bl	8000210 <__aeabi_dsub>
 8010364:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010368:	4606      	mov	r6, r0
 801036a:	460f      	mov	r7, r1
 801036c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010370:	f7ef ff50 	bl	8000214 <__adddf3>
 8010374:	4602      	mov	r2, r0
 8010376:	460b      	mov	r3, r1
 8010378:	2000      	movs	r0, #0
 801037a:	49ba      	ldr	r1, [pc, #744]	@ (8010664 <__ieee754_pow+0x794>)
 801037c:	f7f0 fa2a 	bl	80007d4 <__aeabi_ddiv>
 8010380:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8010384:	4602      	mov	r2, r0
 8010386:	460b      	mov	r3, r1
 8010388:	4630      	mov	r0, r6
 801038a:	4639      	mov	r1, r7
 801038c:	f7f0 f8f8 	bl	8000580 <__aeabi_dmul>
 8010390:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010394:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8010398:	106d      	asrs	r5, r5, #1
 801039a:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801039e:	f04f 0b00 	mov.w	fp, #0
 80103a2:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80103a6:	4661      	mov	r1, ip
 80103a8:	2200      	movs	r2, #0
 80103aa:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80103ae:	4658      	mov	r0, fp
 80103b0:	46e1      	mov	r9, ip
 80103b2:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80103b6:	4614      	mov	r4, r2
 80103b8:	461d      	mov	r5, r3
 80103ba:	f7f0 f8e1 	bl	8000580 <__aeabi_dmul>
 80103be:	4602      	mov	r2, r0
 80103c0:	460b      	mov	r3, r1
 80103c2:	4630      	mov	r0, r6
 80103c4:	4639      	mov	r1, r7
 80103c6:	f7ef ff23 	bl	8000210 <__aeabi_dsub>
 80103ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80103ce:	4606      	mov	r6, r0
 80103d0:	460f      	mov	r7, r1
 80103d2:	4620      	mov	r0, r4
 80103d4:	4629      	mov	r1, r5
 80103d6:	f7ef ff1b 	bl	8000210 <__aeabi_dsub>
 80103da:	4602      	mov	r2, r0
 80103dc:	460b      	mov	r3, r1
 80103de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80103e2:	f7ef ff15 	bl	8000210 <__aeabi_dsub>
 80103e6:	465a      	mov	r2, fp
 80103e8:	464b      	mov	r3, r9
 80103ea:	f7f0 f8c9 	bl	8000580 <__aeabi_dmul>
 80103ee:	4602      	mov	r2, r0
 80103f0:	460b      	mov	r3, r1
 80103f2:	4630      	mov	r0, r6
 80103f4:	4639      	mov	r1, r7
 80103f6:	f7ef ff0b 	bl	8000210 <__aeabi_dsub>
 80103fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80103fe:	f7f0 f8bf 	bl	8000580 <__aeabi_dmul>
 8010402:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010406:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801040a:	4610      	mov	r0, r2
 801040c:	4619      	mov	r1, r3
 801040e:	f7f0 f8b7 	bl	8000580 <__aeabi_dmul>
 8010412:	a37d      	add	r3, pc, #500	@ (adr r3, 8010608 <__ieee754_pow+0x738>)
 8010414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010418:	4604      	mov	r4, r0
 801041a:	460d      	mov	r5, r1
 801041c:	f7f0 f8b0 	bl	8000580 <__aeabi_dmul>
 8010420:	a37b      	add	r3, pc, #492	@ (adr r3, 8010610 <__ieee754_pow+0x740>)
 8010422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010426:	f7ef fef5 	bl	8000214 <__adddf3>
 801042a:	4622      	mov	r2, r4
 801042c:	462b      	mov	r3, r5
 801042e:	f7f0 f8a7 	bl	8000580 <__aeabi_dmul>
 8010432:	a379      	add	r3, pc, #484	@ (adr r3, 8010618 <__ieee754_pow+0x748>)
 8010434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010438:	f7ef feec 	bl	8000214 <__adddf3>
 801043c:	4622      	mov	r2, r4
 801043e:	462b      	mov	r3, r5
 8010440:	f7f0 f89e 	bl	8000580 <__aeabi_dmul>
 8010444:	a376      	add	r3, pc, #472	@ (adr r3, 8010620 <__ieee754_pow+0x750>)
 8010446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801044a:	f7ef fee3 	bl	8000214 <__adddf3>
 801044e:	4622      	mov	r2, r4
 8010450:	462b      	mov	r3, r5
 8010452:	f7f0 f895 	bl	8000580 <__aeabi_dmul>
 8010456:	a374      	add	r3, pc, #464	@ (adr r3, 8010628 <__ieee754_pow+0x758>)
 8010458:	e9d3 2300 	ldrd	r2, r3, [r3]
 801045c:	f7ef feda 	bl	8000214 <__adddf3>
 8010460:	4622      	mov	r2, r4
 8010462:	462b      	mov	r3, r5
 8010464:	f7f0 f88c 	bl	8000580 <__aeabi_dmul>
 8010468:	a371      	add	r3, pc, #452	@ (adr r3, 8010630 <__ieee754_pow+0x760>)
 801046a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801046e:	f7ef fed1 	bl	8000214 <__adddf3>
 8010472:	4622      	mov	r2, r4
 8010474:	4606      	mov	r6, r0
 8010476:	460f      	mov	r7, r1
 8010478:	462b      	mov	r3, r5
 801047a:	4620      	mov	r0, r4
 801047c:	4629      	mov	r1, r5
 801047e:	f7f0 f87f 	bl	8000580 <__aeabi_dmul>
 8010482:	4602      	mov	r2, r0
 8010484:	460b      	mov	r3, r1
 8010486:	4630      	mov	r0, r6
 8010488:	4639      	mov	r1, r7
 801048a:	f7f0 f879 	bl	8000580 <__aeabi_dmul>
 801048e:	465a      	mov	r2, fp
 8010490:	4604      	mov	r4, r0
 8010492:	460d      	mov	r5, r1
 8010494:	464b      	mov	r3, r9
 8010496:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801049a:	f7ef febb 	bl	8000214 <__adddf3>
 801049e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80104a2:	f7f0 f86d 	bl	8000580 <__aeabi_dmul>
 80104a6:	4622      	mov	r2, r4
 80104a8:	462b      	mov	r3, r5
 80104aa:	f7ef feb3 	bl	8000214 <__adddf3>
 80104ae:	465a      	mov	r2, fp
 80104b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80104b4:	464b      	mov	r3, r9
 80104b6:	4658      	mov	r0, fp
 80104b8:	4649      	mov	r1, r9
 80104ba:	f7f0 f861 	bl	8000580 <__aeabi_dmul>
 80104be:	4b6a      	ldr	r3, [pc, #424]	@ (8010668 <__ieee754_pow+0x798>)
 80104c0:	2200      	movs	r2, #0
 80104c2:	4606      	mov	r6, r0
 80104c4:	460f      	mov	r7, r1
 80104c6:	f7ef fea5 	bl	8000214 <__adddf3>
 80104ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80104ce:	f7ef fea1 	bl	8000214 <__adddf3>
 80104d2:	46d8      	mov	r8, fp
 80104d4:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80104d8:	460d      	mov	r5, r1
 80104da:	465a      	mov	r2, fp
 80104dc:	460b      	mov	r3, r1
 80104de:	4640      	mov	r0, r8
 80104e0:	4649      	mov	r1, r9
 80104e2:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80104e6:	f7f0 f84b 	bl	8000580 <__aeabi_dmul>
 80104ea:	465c      	mov	r4, fp
 80104ec:	4680      	mov	r8, r0
 80104ee:	4689      	mov	r9, r1
 80104f0:	4b5d      	ldr	r3, [pc, #372]	@ (8010668 <__ieee754_pow+0x798>)
 80104f2:	2200      	movs	r2, #0
 80104f4:	4620      	mov	r0, r4
 80104f6:	4629      	mov	r1, r5
 80104f8:	f7ef fe8a 	bl	8000210 <__aeabi_dsub>
 80104fc:	4632      	mov	r2, r6
 80104fe:	463b      	mov	r3, r7
 8010500:	f7ef fe86 	bl	8000210 <__aeabi_dsub>
 8010504:	4602      	mov	r2, r0
 8010506:	460b      	mov	r3, r1
 8010508:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801050c:	f7ef fe80 	bl	8000210 <__aeabi_dsub>
 8010510:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010514:	f7f0 f834 	bl	8000580 <__aeabi_dmul>
 8010518:	4622      	mov	r2, r4
 801051a:	4606      	mov	r6, r0
 801051c:	460f      	mov	r7, r1
 801051e:	462b      	mov	r3, r5
 8010520:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010524:	f7f0 f82c 	bl	8000580 <__aeabi_dmul>
 8010528:	4602      	mov	r2, r0
 801052a:	460b      	mov	r3, r1
 801052c:	4630      	mov	r0, r6
 801052e:	4639      	mov	r1, r7
 8010530:	f7ef fe70 	bl	8000214 <__adddf3>
 8010534:	4606      	mov	r6, r0
 8010536:	460f      	mov	r7, r1
 8010538:	4602      	mov	r2, r0
 801053a:	460b      	mov	r3, r1
 801053c:	4640      	mov	r0, r8
 801053e:	4649      	mov	r1, r9
 8010540:	f7ef fe68 	bl	8000214 <__adddf3>
 8010544:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8010548:	a33b      	add	r3, pc, #236	@ (adr r3, 8010638 <__ieee754_pow+0x768>)
 801054a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801054e:	4658      	mov	r0, fp
 8010550:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8010554:	460d      	mov	r5, r1
 8010556:	f7f0 f813 	bl	8000580 <__aeabi_dmul>
 801055a:	465c      	mov	r4, fp
 801055c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010560:	4642      	mov	r2, r8
 8010562:	464b      	mov	r3, r9
 8010564:	4620      	mov	r0, r4
 8010566:	4629      	mov	r1, r5
 8010568:	f7ef fe52 	bl	8000210 <__aeabi_dsub>
 801056c:	4602      	mov	r2, r0
 801056e:	460b      	mov	r3, r1
 8010570:	4630      	mov	r0, r6
 8010572:	4639      	mov	r1, r7
 8010574:	f7ef fe4c 	bl	8000210 <__aeabi_dsub>
 8010578:	a331      	add	r3, pc, #196	@ (adr r3, 8010640 <__ieee754_pow+0x770>)
 801057a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801057e:	f7ef ffff 	bl	8000580 <__aeabi_dmul>
 8010582:	a331      	add	r3, pc, #196	@ (adr r3, 8010648 <__ieee754_pow+0x778>)
 8010584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010588:	4606      	mov	r6, r0
 801058a:	460f      	mov	r7, r1
 801058c:	4620      	mov	r0, r4
 801058e:	4629      	mov	r1, r5
 8010590:	f7ef fff6 	bl	8000580 <__aeabi_dmul>
 8010594:	4602      	mov	r2, r0
 8010596:	460b      	mov	r3, r1
 8010598:	4630      	mov	r0, r6
 801059a:	4639      	mov	r1, r7
 801059c:	f7ef fe3a 	bl	8000214 <__adddf3>
 80105a0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80105a2:	4b32      	ldr	r3, [pc, #200]	@ (801066c <__ieee754_pow+0x79c>)
 80105a4:	4413      	add	r3, r2
 80105a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105aa:	f7ef fe33 	bl	8000214 <__adddf3>
 80105ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80105b2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80105b4:	f7ef ff7a 	bl	80004ac <__aeabi_i2d>
 80105b8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80105ba:	4b2d      	ldr	r3, [pc, #180]	@ (8010670 <__ieee754_pow+0x7a0>)
 80105bc:	4413      	add	r3, r2
 80105be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80105c2:	4606      	mov	r6, r0
 80105c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80105c8:	460f      	mov	r7, r1
 80105ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80105ce:	f7ef fe21 	bl	8000214 <__adddf3>
 80105d2:	4642      	mov	r2, r8
 80105d4:	464b      	mov	r3, r9
 80105d6:	f7ef fe1d 	bl	8000214 <__adddf3>
 80105da:	4632      	mov	r2, r6
 80105dc:	463b      	mov	r3, r7
 80105de:	f7ef fe19 	bl	8000214 <__adddf3>
 80105e2:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80105e6:	4632      	mov	r2, r6
 80105e8:	463b      	mov	r3, r7
 80105ea:	4658      	mov	r0, fp
 80105ec:	460d      	mov	r5, r1
 80105ee:	f7ef fe0f 	bl	8000210 <__aeabi_dsub>
 80105f2:	4642      	mov	r2, r8
 80105f4:	464b      	mov	r3, r9
 80105f6:	f7ef fe0b 	bl	8000210 <__aeabi_dsub>
 80105fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80105fe:	f7ef fe07 	bl	8000210 <__aeabi_dsub>
 8010602:	465c      	mov	r4, fp
 8010604:	e036      	b.n	8010674 <__ieee754_pow+0x7a4>
 8010606:	bf00      	nop
 8010608:	4a454eef 	.word	0x4a454eef
 801060c:	3fca7e28 	.word	0x3fca7e28
 8010610:	93c9db65 	.word	0x93c9db65
 8010614:	3fcd864a 	.word	0x3fcd864a
 8010618:	a91d4101 	.word	0xa91d4101
 801061c:	3fd17460 	.word	0x3fd17460
 8010620:	518f264d 	.word	0x518f264d
 8010624:	3fd55555 	.word	0x3fd55555
 8010628:	db6fabff 	.word	0xdb6fabff
 801062c:	3fdb6db6 	.word	0x3fdb6db6
 8010630:	33333303 	.word	0x33333303
 8010634:	3fe33333 	.word	0x3fe33333
 8010638:	e0000000 	.word	0xe0000000
 801063c:	3feec709 	.word	0x3feec709
 8010640:	dc3a03fd 	.word	0xdc3a03fd
 8010644:	3feec709 	.word	0x3feec709
 8010648:	145b01f5 	.word	0x145b01f5
 801064c:	be3e2fe0 	.word	0xbe3e2fe0
 8010650:	7ff00000 	.word	0x7ff00000
 8010654:	43400000 	.word	0x43400000
 8010658:	0003988e 	.word	0x0003988e
 801065c:	000bb679 	.word	0x000bb679
 8010660:	08011748 	.word	0x08011748
 8010664:	3ff00000 	.word	0x3ff00000
 8010668:	40080000 	.word	0x40080000
 801066c:	08011728 	.word	0x08011728
 8010670:	08011738 	.word	0x08011738
 8010674:	4602      	mov	r2, r0
 8010676:	460b      	mov	r3, r1
 8010678:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801067c:	e5d6      	b.n	801022c <__ieee754_pow+0x35c>
 801067e:	f04f 0a01 	mov.w	sl, #1
 8010682:	e65e      	b.n	8010342 <__ieee754_pow+0x472>
 8010684:	a3b5      	add	r3, pc, #724	@ (adr r3, 801095c <__ieee754_pow+0xa8c>)
 8010686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801068a:	4630      	mov	r0, r6
 801068c:	4639      	mov	r1, r7
 801068e:	f7ef fdc1 	bl	8000214 <__adddf3>
 8010692:	4642      	mov	r2, r8
 8010694:	e9cd 0100 	strd	r0, r1, [sp]
 8010698:	464b      	mov	r3, r9
 801069a:	4620      	mov	r0, r4
 801069c:	4629      	mov	r1, r5
 801069e:	f7ef fdb7 	bl	8000210 <__aeabi_dsub>
 80106a2:	4602      	mov	r2, r0
 80106a4:	460b      	mov	r3, r1
 80106a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80106aa:	f7f0 f9f9 	bl	8000aa0 <__aeabi_dcmpgt>
 80106ae:	2800      	cmp	r0, #0
 80106b0:	f47f adfe 	bne.w	80102b0 <__ieee754_pow+0x3e0>
 80106b4:	4ba2      	ldr	r3, [pc, #648]	@ (8010940 <__ieee754_pow+0xa70>)
 80106b6:	e022      	b.n	80106fe <__ieee754_pow+0x82e>
 80106b8:	4ca2      	ldr	r4, [pc, #648]	@ (8010944 <__ieee754_pow+0xa74>)
 80106ba:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80106be:	42a3      	cmp	r3, r4
 80106c0:	d919      	bls.n	80106f6 <__ieee754_pow+0x826>
 80106c2:	4ba1      	ldr	r3, [pc, #644]	@ (8010948 <__ieee754_pow+0xa78>)
 80106c4:	440b      	add	r3, r1
 80106c6:	4303      	orrs	r3, r0
 80106c8:	d009      	beq.n	80106de <__ieee754_pow+0x80e>
 80106ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80106ce:	2200      	movs	r2, #0
 80106d0:	2300      	movs	r3, #0
 80106d2:	f7f0 f9c7 	bl	8000a64 <__aeabi_dcmplt>
 80106d6:	3800      	subs	r0, #0
 80106d8:	bf18      	it	ne
 80106da:	2001      	movne	r0, #1
 80106dc:	e512      	b.n	8010104 <__ieee754_pow+0x234>
 80106de:	4642      	mov	r2, r8
 80106e0:	464b      	mov	r3, r9
 80106e2:	f7ef fd95 	bl	8000210 <__aeabi_dsub>
 80106e6:	4632      	mov	r2, r6
 80106e8:	463b      	mov	r3, r7
 80106ea:	f7f0 f9cf 	bl	8000a8c <__aeabi_dcmpge>
 80106ee:	2800      	cmp	r0, #0
 80106f0:	d1eb      	bne.n	80106ca <__ieee754_pow+0x7fa>
 80106f2:	4b96      	ldr	r3, [pc, #600]	@ (801094c <__ieee754_pow+0xa7c>)
 80106f4:	e003      	b.n	80106fe <__ieee754_pow+0x82e>
 80106f6:	4a96      	ldr	r2, [pc, #600]	@ (8010950 <__ieee754_pow+0xa80>)
 80106f8:	4293      	cmp	r3, r2
 80106fa:	f240 80e7 	bls.w	80108cc <__ieee754_pow+0x9fc>
 80106fe:	151b      	asrs	r3, r3, #20
 8010700:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8010704:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8010708:	fa4a fa03 	asr.w	sl, sl, r3
 801070c:	44da      	add	sl, fp
 801070e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8010712:	4890      	ldr	r0, [pc, #576]	@ (8010954 <__ieee754_pow+0xa84>)
 8010714:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8010718:	4108      	asrs	r0, r1
 801071a:	ea00 030a 	and.w	r3, r0, sl
 801071e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8010722:	f1c1 0114 	rsb	r1, r1, #20
 8010726:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 801072a:	fa4a fa01 	asr.w	sl, sl, r1
 801072e:	f1bb 0f00 	cmp.w	fp, #0
 8010732:	4640      	mov	r0, r8
 8010734:	4649      	mov	r1, r9
 8010736:	f04f 0200 	mov.w	r2, #0
 801073a:	bfb8      	it	lt
 801073c:	f1ca 0a00 	rsblt	sl, sl, #0
 8010740:	f7ef fd66 	bl	8000210 <__aeabi_dsub>
 8010744:	4680      	mov	r8, r0
 8010746:	4689      	mov	r9, r1
 8010748:	4632      	mov	r2, r6
 801074a:	463b      	mov	r3, r7
 801074c:	4640      	mov	r0, r8
 801074e:	4649      	mov	r1, r9
 8010750:	f7ef fd60 	bl	8000214 <__adddf3>
 8010754:	2400      	movs	r4, #0
 8010756:	a36a      	add	r3, pc, #424	@ (adr r3, 8010900 <__ieee754_pow+0xa30>)
 8010758:	e9d3 2300 	ldrd	r2, r3, [r3]
 801075c:	4620      	mov	r0, r4
 801075e:	460d      	mov	r5, r1
 8010760:	f7ef ff0e 	bl	8000580 <__aeabi_dmul>
 8010764:	4642      	mov	r2, r8
 8010766:	e9cd 0100 	strd	r0, r1, [sp]
 801076a:	464b      	mov	r3, r9
 801076c:	4620      	mov	r0, r4
 801076e:	4629      	mov	r1, r5
 8010770:	f7ef fd4e 	bl	8000210 <__aeabi_dsub>
 8010774:	4602      	mov	r2, r0
 8010776:	460b      	mov	r3, r1
 8010778:	4630      	mov	r0, r6
 801077a:	4639      	mov	r1, r7
 801077c:	f7ef fd48 	bl	8000210 <__aeabi_dsub>
 8010780:	a361      	add	r3, pc, #388	@ (adr r3, 8010908 <__ieee754_pow+0xa38>)
 8010782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010786:	f7ef fefb 	bl	8000580 <__aeabi_dmul>
 801078a:	a361      	add	r3, pc, #388	@ (adr r3, 8010910 <__ieee754_pow+0xa40>)
 801078c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010790:	4680      	mov	r8, r0
 8010792:	4689      	mov	r9, r1
 8010794:	4620      	mov	r0, r4
 8010796:	4629      	mov	r1, r5
 8010798:	f7ef fef2 	bl	8000580 <__aeabi_dmul>
 801079c:	4602      	mov	r2, r0
 801079e:	460b      	mov	r3, r1
 80107a0:	4640      	mov	r0, r8
 80107a2:	4649      	mov	r1, r9
 80107a4:	f7ef fd36 	bl	8000214 <__adddf3>
 80107a8:	4604      	mov	r4, r0
 80107aa:	460d      	mov	r5, r1
 80107ac:	4602      	mov	r2, r0
 80107ae:	460b      	mov	r3, r1
 80107b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80107b4:	f7ef fd2e 	bl	8000214 <__adddf3>
 80107b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80107bc:	4680      	mov	r8, r0
 80107be:	4689      	mov	r9, r1
 80107c0:	f7ef fd26 	bl	8000210 <__aeabi_dsub>
 80107c4:	4602      	mov	r2, r0
 80107c6:	460b      	mov	r3, r1
 80107c8:	4620      	mov	r0, r4
 80107ca:	4629      	mov	r1, r5
 80107cc:	f7ef fd20 	bl	8000210 <__aeabi_dsub>
 80107d0:	4642      	mov	r2, r8
 80107d2:	4606      	mov	r6, r0
 80107d4:	460f      	mov	r7, r1
 80107d6:	464b      	mov	r3, r9
 80107d8:	4640      	mov	r0, r8
 80107da:	4649      	mov	r1, r9
 80107dc:	f7ef fed0 	bl	8000580 <__aeabi_dmul>
 80107e0:	a34d      	add	r3, pc, #308	@ (adr r3, 8010918 <__ieee754_pow+0xa48>)
 80107e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107e6:	4604      	mov	r4, r0
 80107e8:	460d      	mov	r5, r1
 80107ea:	f7ef fec9 	bl	8000580 <__aeabi_dmul>
 80107ee:	a34c      	add	r3, pc, #304	@ (adr r3, 8010920 <__ieee754_pow+0xa50>)
 80107f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f4:	f7ef fd0c 	bl	8000210 <__aeabi_dsub>
 80107f8:	4622      	mov	r2, r4
 80107fa:	462b      	mov	r3, r5
 80107fc:	f7ef fec0 	bl	8000580 <__aeabi_dmul>
 8010800:	a349      	add	r3, pc, #292	@ (adr r3, 8010928 <__ieee754_pow+0xa58>)
 8010802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010806:	f7ef fd05 	bl	8000214 <__adddf3>
 801080a:	4622      	mov	r2, r4
 801080c:	462b      	mov	r3, r5
 801080e:	f7ef feb7 	bl	8000580 <__aeabi_dmul>
 8010812:	a347      	add	r3, pc, #284	@ (adr r3, 8010930 <__ieee754_pow+0xa60>)
 8010814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010818:	f7ef fcfa 	bl	8000210 <__aeabi_dsub>
 801081c:	4622      	mov	r2, r4
 801081e:	462b      	mov	r3, r5
 8010820:	f7ef feae 	bl	8000580 <__aeabi_dmul>
 8010824:	a344      	add	r3, pc, #272	@ (adr r3, 8010938 <__ieee754_pow+0xa68>)
 8010826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801082a:	f7ef fcf3 	bl	8000214 <__adddf3>
 801082e:	4622      	mov	r2, r4
 8010830:	462b      	mov	r3, r5
 8010832:	f7ef fea5 	bl	8000580 <__aeabi_dmul>
 8010836:	4602      	mov	r2, r0
 8010838:	460b      	mov	r3, r1
 801083a:	4640      	mov	r0, r8
 801083c:	4649      	mov	r1, r9
 801083e:	f7ef fce7 	bl	8000210 <__aeabi_dsub>
 8010842:	4604      	mov	r4, r0
 8010844:	460d      	mov	r5, r1
 8010846:	4602      	mov	r2, r0
 8010848:	460b      	mov	r3, r1
 801084a:	4640      	mov	r0, r8
 801084c:	4649      	mov	r1, r9
 801084e:	f7ef fe97 	bl	8000580 <__aeabi_dmul>
 8010852:	2200      	movs	r2, #0
 8010854:	e9cd 0100 	strd	r0, r1, [sp]
 8010858:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801085c:	4620      	mov	r0, r4
 801085e:	4629      	mov	r1, r5
 8010860:	f7ef fcd6 	bl	8000210 <__aeabi_dsub>
 8010864:	4602      	mov	r2, r0
 8010866:	460b      	mov	r3, r1
 8010868:	e9dd 0100 	ldrd	r0, r1, [sp]
 801086c:	f7ef ffb2 	bl	80007d4 <__aeabi_ddiv>
 8010870:	4632      	mov	r2, r6
 8010872:	4604      	mov	r4, r0
 8010874:	460d      	mov	r5, r1
 8010876:	463b      	mov	r3, r7
 8010878:	4640      	mov	r0, r8
 801087a:	4649      	mov	r1, r9
 801087c:	f7ef fe80 	bl	8000580 <__aeabi_dmul>
 8010880:	4632      	mov	r2, r6
 8010882:	463b      	mov	r3, r7
 8010884:	f7ef fcc6 	bl	8000214 <__adddf3>
 8010888:	4602      	mov	r2, r0
 801088a:	460b      	mov	r3, r1
 801088c:	4620      	mov	r0, r4
 801088e:	4629      	mov	r1, r5
 8010890:	f7ef fcbe 	bl	8000210 <__aeabi_dsub>
 8010894:	4642      	mov	r2, r8
 8010896:	464b      	mov	r3, r9
 8010898:	f7ef fcba 	bl	8000210 <__aeabi_dsub>
 801089c:	460b      	mov	r3, r1
 801089e:	4602      	mov	r2, r0
 80108a0:	492d      	ldr	r1, [pc, #180]	@ (8010958 <__ieee754_pow+0xa88>)
 80108a2:	2000      	movs	r0, #0
 80108a4:	f7ef fcb4 	bl	8000210 <__aeabi_dsub>
 80108a8:	ec41 0b10 	vmov	d0, r0, r1
 80108ac:	ee10 3a90 	vmov	r3, s1
 80108b0:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80108b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80108b8:	da0b      	bge.n	80108d2 <__ieee754_pow+0xa02>
 80108ba:	4650      	mov	r0, sl
 80108bc:	f000 fa58 	bl	8010d70 <scalbn>
 80108c0:	ec51 0b10 	vmov	r0, r1, d0
 80108c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80108c8:	f7ff bb6d 	b.w	800ffa6 <__ieee754_pow+0xd6>
 80108cc:	f8dd a010 	ldr.w	sl, [sp, #16]
 80108d0:	e73a      	b.n	8010748 <__ieee754_pow+0x878>
 80108d2:	ec51 0b10 	vmov	r0, r1, d0
 80108d6:	4619      	mov	r1, r3
 80108d8:	e7f4      	b.n	80108c4 <__ieee754_pow+0x9f4>
 80108da:	491f      	ldr	r1, [pc, #124]	@ (8010958 <__ieee754_pow+0xa88>)
 80108dc:	2000      	movs	r0, #0
 80108de:	f7ff bb14 	b.w	800ff0a <__ieee754_pow+0x3a>
 80108e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80108e6:	f7ff bb10 	b.w	800ff0a <__ieee754_pow+0x3a>
 80108ea:	4630      	mov	r0, r6
 80108ec:	4639      	mov	r1, r7
 80108ee:	f7ff bb0c 	b.w	800ff0a <__ieee754_pow+0x3a>
 80108f2:	460c      	mov	r4, r1
 80108f4:	f7ff bb69 	b.w	800ffca <__ieee754_pow+0xfa>
 80108f8:	2400      	movs	r4, #0
 80108fa:	f7ff bb4b 	b.w	800ff94 <__ieee754_pow+0xc4>
 80108fe:	bf00      	nop
 8010900:	00000000 	.word	0x00000000
 8010904:	3fe62e43 	.word	0x3fe62e43
 8010908:	fefa39ef 	.word	0xfefa39ef
 801090c:	3fe62e42 	.word	0x3fe62e42
 8010910:	0ca86c39 	.word	0x0ca86c39
 8010914:	be205c61 	.word	0xbe205c61
 8010918:	72bea4d0 	.word	0x72bea4d0
 801091c:	3e663769 	.word	0x3e663769
 8010920:	c5d26bf1 	.word	0xc5d26bf1
 8010924:	3ebbbd41 	.word	0x3ebbbd41
 8010928:	af25de2c 	.word	0xaf25de2c
 801092c:	3f11566a 	.word	0x3f11566a
 8010930:	16bebd93 	.word	0x16bebd93
 8010934:	3f66c16c 	.word	0x3f66c16c
 8010938:	5555553e 	.word	0x5555553e
 801093c:	3fc55555 	.word	0x3fc55555
 8010940:	40900000 	.word	0x40900000
 8010944:	4090cbff 	.word	0x4090cbff
 8010948:	3f6f3400 	.word	0x3f6f3400
 801094c:	4090cc00 	.word	0x4090cc00
 8010950:	3fe00000 	.word	0x3fe00000
 8010954:	fff00000 	.word	0xfff00000
 8010958:	3ff00000 	.word	0x3ff00000
 801095c:	652b82fe 	.word	0x652b82fe
 8010960:	3c971547 	.word	0x3c971547
 8010964:	00000000 	.word	0x00000000

08010968 <__ieee754_rem_pio2>:
 8010968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801096c:	ec57 6b10 	vmov	r6, r7, d0
 8010970:	4bc5      	ldr	r3, [pc, #788]	@ (8010c88 <__ieee754_rem_pio2+0x320>)
 8010972:	b08d      	sub	sp, #52	@ 0x34
 8010974:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8010978:	4598      	cmp	r8, r3
 801097a:	4604      	mov	r4, r0
 801097c:	9704      	str	r7, [sp, #16]
 801097e:	d807      	bhi.n	8010990 <__ieee754_rem_pio2+0x28>
 8010980:	2200      	movs	r2, #0
 8010982:	2300      	movs	r3, #0
 8010984:	ed80 0b00 	vstr	d0, [r0]
 8010988:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801098c:	2500      	movs	r5, #0
 801098e:	e028      	b.n	80109e2 <__ieee754_rem_pio2+0x7a>
 8010990:	4bbe      	ldr	r3, [pc, #760]	@ (8010c8c <__ieee754_rem_pio2+0x324>)
 8010992:	4598      	cmp	r8, r3
 8010994:	d878      	bhi.n	8010a88 <__ieee754_rem_pio2+0x120>
 8010996:	9b04      	ldr	r3, [sp, #16]
 8010998:	4dbd      	ldr	r5, [pc, #756]	@ (8010c90 <__ieee754_rem_pio2+0x328>)
 801099a:	2b00      	cmp	r3, #0
 801099c:	4630      	mov	r0, r6
 801099e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8010c50 <__ieee754_rem_pio2+0x2e8>)
 80109a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109a4:	4639      	mov	r1, r7
 80109a6:	dd38      	ble.n	8010a1a <__ieee754_rem_pio2+0xb2>
 80109a8:	f7ef fc32 	bl	8000210 <__aeabi_dsub>
 80109ac:	45a8      	cmp	r8, r5
 80109ae:	4606      	mov	r6, r0
 80109b0:	460f      	mov	r7, r1
 80109b2:	d01a      	beq.n	80109ea <__ieee754_rem_pio2+0x82>
 80109b4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8010c58 <__ieee754_rem_pio2+0x2f0>)
 80109b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ba:	f7ef fc29 	bl	8000210 <__aeabi_dsub>
 80109be:	4602      	mov	r2, r0
 80109c0:	460b      	mov	r3, r1
 80109c2:	4680      	mov	r8, r0
 80109c4:	4689      	mov	r9, r1
 80109c6:	4630      	mov	r0, r6
 80109c8:	4639      	mov	r1, r7
 80109ca:	f7ef fc21 	bl	8000210 <__aeabi_dsub>
 80109ce:	a3a2      	add	r3, pc, #648	@ (adr r3, 8010c58 <__ieee754_rem_pio2+0x2f0>)
 80109d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109d4:	f7ef fc1c 	bl	8000210 <__aeabi_dsub>
 80109d8:	e9c4 8900 	strd	r8, r9, [r4]
 80109dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80109e0:	2501      	movs	r5, #1
 80109e2:	4628      	mov	r0, r5
 80109e4:	b00d      	add	sp, #52	@ 0x34
 80109e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109ea:	a39d      	add	r3, pc, #628	@ (adr r3, 8010c60 <__ieee754_rem_pio2+0x2f8>)
 80109ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109f0:	f7ef fc0e 	bl	8000210 <__aeabi_dsub>
 80109f4:	a39c      	add	r3, pc, #624	@ (adr r3, 8010c68 <__ieee754_rem_pio2+0x300>)
 80109f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109fa:	4606      	mov	r6, r0
 80109fc:	460f      	mov	r7, r1
 80109fe:	f7ef fc07 	bl	8000210 <__aeabi_dsub>
 8010a02:	4602      	mov	r2, r0
 8010a04:	460b      	mov	r3, r1
 8010a06:	4680      	mov	r8, r0
 8010a08:	4689      	mov	r9, r1
 8010a0a:	4630      	mov	r0, r6
 8010a0c:	4639      	mov	r1, r7
 8010a0e:	f7ef fbff 	bl	8000210 <__aeabi_dsub>
 8010a12:	a395      	add	r3, pc, #596	@ (adr r3, 8010c68 <__ieee754_rem_pio2+0x300>)
 8010a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a18:	e7dc      	b.n	80109d4 <__ieee754_rem_pio2+0x6c>
 8010a1a:	f7ef fbfb 	bl	8000214 <__adddf3>
 8010a1e:	45a8      	cmp	r8, r5
 8010a20:	4606      	mov	r6, r0
 8010a22:	460f      	mov	r7, r1
 8010a24:	d018      	beq.n	8010a58 <__ieee754_rem_pio2+0xf0>
 8010a26:	a38c      	add	r3, pc, #560	@ (adr r3, 8010c58 <__ieee754_rem_pio2+0x2f0>)
 8010a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a2c:	f7ef fbf2 	bl	8000214 <__adddf3>
 8010a30:	4602      	mov	r2, r0
 8010a32:	460b      	mov	r3, r1
 8010a34:	4680      	mov	r8, r0
 8010a36:	4689      	mov	r9, r1
 8010a38:	4630      	mov	r0, r6
 8010a3a:	4639      	mov	r1, r7
 8010a3c:	f7ef fbe8 	bl	8000210 <__aeabi_dsub>
 8010a40:	a385      	add	r3, pc, #532	@ (adr r3, 8010c58 <__ieee754_rem_pio2+0x2f0>)
 8010a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a46:	f7ef fbe5 	bl	8000214 <__adddf3>
 8010a4a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8010a4e:	e9c4 8900 	strd	r8, r9, [r4]
 8010a52:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010a56:	e7c4      	b.n	80109e2 <__ieee754_rem_pio2+0x7a>
 8010a58:	a381      	add	r3, pc, #516	@ (adr r3, 8010c60 <__ieee754_rem_pio2+0x2f8>)
 8010a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a5e:	f7ef fbd9 	bl	8000214 <__adddf3>
 8010a62:	a381      	add	r3, pc, #516	@ (adr r3, 8010c68 <__ieee754_rem_pio2+0x300>)
 8010a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a68:	4606      	mov	r6, r0
 8010a6a:	460f      	mov	r7, r1
 8010a6c:	f7ef fbd2 	bl	8000214 <__adddf3>
 8010a70:	4602      	mov	r2, r0
 8010a72:	460b      	mov	r3, r1
 8010a74:	4680      	mov	r8, r0
 8010a76:	4689      	mov	r9, r1
 8010a78:	4630      	mov	r0, r6
 8010a7a:	4639      	mov	r1, r7
 8010a7c:	f7ef fbc8 	bl	8000210 <__aeabi_dsub>
 8010a80:	a379      	add	r3, pc, #484	@ (adr r3, 8010c68 <__ieee754_rem_pio2+0x300>)
 8010a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a86:	e7de      	b.n	8010a46 <__ieee754_rem_pio2+0xde>
 8010a88:	4b82      	ldr	r3, [pc, #520]	@ (8010c94 <__ieee754_rem_pio2+0x32c>)
 8010a8a:	4598      	cmp	r8, r3
 8010a8c:	f200 80d1 	bhi.w	8010c32 <__ieee754_rem_pio2+0x2ca>
 8010a90:	f000 f966 	bl	8010d60 <fabs>
 8010a94:	ec57 6b10 	vmov	r6, r7, d0
 8010a98:	a375      	add	r3, pc, #468	@ (adr r3, 8010c70 <__ieee754_rem_pio2+0x308>)
 8010a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a9e:	4630      	mov	r0, r6
 8010aa0:	4639      	mov	r1, r7
 8010aa2:	f7ef fd6d 	bl	8000580 <__aeabi_dmul>
 8010aa6:	4b7c      	ldr	r3, [pc, #496]	@ (8010c98 <__ieee754_rem_pio2+0x330>)
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	f7ef fbb3 	bl	8000214 <__adddf3>
 8010aae:	f7f0 f817 	bl	8000ae0 <__aeabi_d2iz>
 8010ab2:	4605      	mov	r5, r0
 8010ab4:	f7ef fcfa 	bl	80004ac <__aeabi_i2d>
 8010ab8:	4602      	mov	r2, r0
 8010aba:	460b      	mov	r3, r1
 8010abc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010ac0:	a363      	add	r3, pc, #396	@ (adr r3, 8010c50 <__ieee754_rem_pio2+0x2e8>)
 8010ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ac6:	f7ef fd5b 	bl	8000580 <__aeabi_dmul>
 8010aca:	4602      	mov	r2, r0
 8010acc:	460b      	mov	r3, r1
 8010ace:	4630      	mov	r0, r6
 8010ad0:	4639      	mov	r1, r7
 8010ad2:	f7ef fb9d 	bl	8000210 <__aeabi_dsub>
 8010ad6:	a360      	add	r3, pc, #384	@ (adr r3, 8010c58 <__ieee754_rem_pio2+0x2f0>)
 8010ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010adc:	4682      	mov	sl, r0
 8010ade:	468b      	mov	fp, r1
 8010ae0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ae4:	f7ef fd4c 	bl	8000580 <__aeabi_dmul>
 8010ae8:	2d1f      	cmp	r5, #31
 8010aea:	4606      	mov	r6, r0
 8010aec:	460f      	mov	r7, r1
 8010aee:	dc0c      	bgt.n	8010b0a <__ieee754_rem_pio2+0x1a2>
 8010af0:	4b6a      	ldr	r3, [pc, #424]	@ (8010c9c <__ieee754_rem_pio2+0x334>)
 8010af2:	1e6a      	subs	r2, r5, #1
 8010af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010af8:	4543      	cmp	r3, r8
 8010afa:	d006      	beq.n	8010b0a <__ieee754_rem_pio2+0x1a2>
 8010afc:	4632      	mov	r2, r6
 8010afe:	463b      	mov	r3, r7
 8010b00:	4650      	mov	r0, sl
 8010b02:	4659      	mov	r1, fp
 8010b04:	f7ef fb84 	bl	8000210 <__aeabi_dsub>
 8010b08:	e00e      	b.n	8010b28 <__ieee754_rem_pio2+0x1c0>
 8010b0a:	463b      	mov	r3, r7
 8010b0c:	4632      	mov	r2, r6
 8010b0e:	4650      	mov	r0, sl
 8010b10:	4659      	mov	r1, fp
 8010b12:	f7ef fb7d 	bl	8000210 <__aeabi_dsub>
 8010b16:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010b1a:	9305      	str	r3, [sp, #20]
 8010b1c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010b20:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8010b24:	2b10      	cmp	r3, #16
 8010b26:	dc02      	bgt.n	8010b2e <__ieee754_rem_pio2+0x1c6>
 8010b28:	e9c4 0100 	strd	r0, r1, [r4]
 8010b2c:	e039      	b.n	8010ba2 <__ieee754_rem_pio2+0x23a>
 8010b2e:	a34c      	add	r3, pc, #304	@ (adr r3, 8010c60 <__ieee754_rem_pio2+0x2f8>)
 8010b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010b38:	f7ef fd22 	bl	8000580 <__aeabi_dmul>
 8010b3c:	4606      	mov	r6, r0
 8010b3e:	460f      	mov	r7, r1
 8010b40:	4602      	mov	r2, r0
 8010b42:	460b      	mov	r3, r1
 8010b44:	4650      	mov	r0, sl
 8010b46:	4659      	mov	r1, fp
 8010b48:	f7ef fb62 	bl	8000210 <__aeabi_dsub>
 8010b4c:	4602      	mov	r2, r0
 8010b4e:	460b      	mov	r3, r1
 8010b50:	4680      	mov	r8, r0
 8010b52:	4689      	mov	r9, r1
 8010b54:	4650      	mov	r0, sl
 8010b56:	4659      	mov	r1, fp
 8010b58:	f7ef fb5a 	bl	8000210 <__aeabi_dsub>
 8010b5c:	4632      	mov	r2, r6
 8010b5e:	463b      	mov	r3, r7
 8010b60:	f7ef fb56 	bl	8000210 <__aeabi_dsub>
 8010b64:	a340      	add	r3, pc, #256	@ (adr r3, 8010c68 <__ieee754_rem_pio2+0x300>)
 8010b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b6a:	4606      	mov	r6, r0
 8010b6c:	460f      	mov	r7, r1
 8010b6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010b72:	f7ef fd05 	bl	8000580 <__aeabi_dmul>
 8010b76:	4632      	mov	r2, r6
 8010b78:	463b      	mov	r3, r7
 8010b7a:	f7ef fb49 	bl	8000210 <__aeabi_dsub>
 8010b7e:	4602      	mov	r2, r0
 8010b80:	460b      	mov	r3, r1
 8010b82:	4606      	mov	r6, r0
 8010b84:	460f      	mov	r7, r1
 8010b86:	4640      	mov	r0, r8
 8010b88:	4649      	mov	r1, r9
 8010b8a:	f7ef fb41 	bl	8000210 <__aeabi_dsub>
 8010b8e:	9a05      	ldr	r2, [sp, #20]
 8010b90:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010b94:	1ad3      	subs	r3, r2, r3
 8010b96:	2b31      	cmp	r3, #49	@ 0x31
 8010b98:	dc20      	bgt.n	8010bdc <__ieee754_rem_pio2+0x274>
 8010b9a:	e9c4 0100 	strd	r0, r1, [r4]
 8010b9e:	46c2      	mov	sl, r8
 8010ba0:	46cb      	mov	fp, r9
 8010ba2:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010ba6:	4650      	mov	r0, sl
 8010ba8:	4642      	mov	r2, r8
 8010baa:	464b      	mov	r3, r9
 8010bac:	4659      	mov	r1, fp
 8010bae:	f7ef fb2f 	bl	8000210 <__aeabi_dsub>
 8010bb2:	463b      	mov	r3, r7
 8010bb4:	4632      	mov	r2, r6
 8010bb6:	f7ef fb2b 	bl	8000210 <__aeabi_dsub>
 8010bba:	9b04      	ldr	r3, [sp, #16]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010bc2:	f6bf af0e 	bge.w	80109e2 <__ieee754_rem_pio2+0x7a>
 8010bc6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8010bca:	6063      	str	r3, [r4, #4]
 8010bcc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010bd0:	f8c4 8000 	str.w	r8, [r4]
 8010bd4:	60a0      	str	r0, [r4, #8]
 8010bd6:	60e3      	str	r3, [r4, #12]
 8010bd8:	426d      	negs	r5, r5
 8010bda:	e702      	b.n	80109e2 <__ieee754_rem_pio2+0x7a>
 8010bdc:	a326      	add	r3, pc, #152	@ (adr r3, 8010c78 <__ieee754_rem_pio2+0x310>)
 8010bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010be6:	f7ef fccb 	bl	8000580 <__aeabi_dmul>
 8010bea:	4606      	mov	r6, r0
 8010bec:	460f      	mov	r7, r1
 8010bee:	4602      	mov	r2, r0
 8010bf0:	460b      	mov	r3, r1
 8010bf2:	4640      	mov	r0, r8
 8010bf4:	4649      	mov	r1, r9
 8010bf6:	f7ef fb0b 	bl	8000210 <__aeabi_dsub>
 8010bfa:	4602      	mov	r2, r0
 8010bfc:	460b      	mov	r3, r1
 8010bfe:	4682      	mov	sl, r0
 8010c00:	468b      	mov	fp, r1
 8010c02:	4640      	mov	r0, r8
 8010c04:	4649      	mov	r1, r9
 8010c06:	f7ef fb03 	bl	8000210 <__aeabi_dsub>
 8010c0a:	4632      	mov	r2, r6
 8010c0c:	463b      	mov	r3, r7
 8010c0e:	f7ef faff 	bl	8000210 <__aeabi_dsub>
 8010c12:	a31b      	add	r3, pc, #108	@ (adr r3, 8010c80 <__ieee754_rem_pio2+0x318>)
 8010c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c18:	4606      	mov	r6, r0
 8010c1a:	460f      	mov	r7, r1
 8010c1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c20:	f7ef fcae 	bl	8000580 <__aeabi_dmul>
 8010c24:	4632      	mov	r2, r6
 8010c26:	463b      	mov	r3, r7
 8010c28:	f7ef faf2 	bl	8000210 <__aeabi_dsub>
 8010c2c:	4606      	mov	r6, r0
 8010c2e:	460f      	mov	r7, r1
 8010c30:	e764      	b.n	8010afc <__ieee754_rem_pio2+0x194>
 8010c32:	4b1b      	ldr	r3, [pc, #108]	@ (8010ca0 <__ieee754_rem_pio2+0x338>)
 8010c34:	4598      	cmp	r8, r3
 8010c36:	d935      	bls.n	8010ca4 <__ieee754_rem_pio2+0x33c>
 8010c38:	4632      	mov	r2, r6
 8010c3a:	463b      	mov	r3, r7
 8010c3c:	4630      	mov	r0, r6
 8010c3e:	4639      	mov	r1, r7
 8010c40:	f7ef fae6 	bl	8000210 <__aeabi_dsub>
 8010c44:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010c48:	e9c4 0100 	strd	r0, r1, [r4]
 8010c4c:	e69e      	b.n	801098c <__ieee754_rem_pio2+0x24>
 8010c4e:	bf00      	nop
 8010c50:	54400000 	.word	0x54400000
 8010c54:	3ff921fb 	.word	0x3ff921fb
 8010c58:	1a626331 	.word	0x1a626331
 8010c5c:	3dd0b461 	.word	0x3dd0b461
 8010c60:	1a600000 	.word	0x1a600000
 8010c64:	3dd0b461 	.word	0x3dd0b461
 8010c68:	2e037073 	.word	0x2e037073
 8010c6c:	3ba3198a 	.word	0x3ba3198a
 8010c70:	6dc9c883 	.word	0x6dc9c883
 8010c74:	3fe45f30 	.word	0x3fe45f30
 8010c78:	2e000000 	.word	0x2e000000
 8010c7c:	3ba3198a 	.word	0x3ba3198a
 8010c80:	252049c1 	.word	0x252049c1
 8010c84:	397b839a 	.word	0x397b839a
 8010c88:	3fe921fb 	.word	0x3fe921fb
 8010c8c:	4002d97b 	.word	0x4002d97b
 8010c90:	3ff921fb 	.word	0x3ff921fb
 8010c94:	413921fb 	.word	0x413921fb
 8010c98:	3fe00000 	.word	0x3fe00000
 8010c9c:	08011758 	.word	0x08011758
 8010ca0:	7fefffff 	.word	0x7fefffff
 8010ca4:	ea4f 5528 	mov.w	r5, r8, asr #20
 8010ca8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8010cac:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8010cb0:	4630      	mov	r0, r6
 8010cb2:	460f      	mov	r7, r1
 8010cb4:	f7ef ff14 	bl	8000ae0 <__aeabi_d2iz>
 8010cb8:	f7ef fbf8 	bl	80004ac <__aeabi_i2d>
 8010cbc:	4602      	mov	r2, r0
 8010cbe:	460b      	mov	r3, r1
 8010cc0:	4630      	mov	r0, r6
 8010cc2:	4639      	mov	r1, r7
 8010cc4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010cc8:	f7ef faa2 	bl	8000210 <__aeabi_dsub>
 8010ccc:	4b22      	ldr	r3, [pc, #136]	@ (8010d58 <__ieee754_rem_pio2+0x3f0>)
 8010cce:	2200      	movs	r2, #0
 8010cd0:	f7ef fc56 	bl	8000580 <__aeabi_dmul>
 8010cd4:	460f      	mov	r7, r1
 8010cd6:	4606      	mov	r6, r0
 8010cd8:	f7ef ff02 	bl	8000ae0 <__aeabi_d2iz>
 8010cdc:	f7ef fbe6 	bl	80004ac <__aeabi_i2d>
 8010ce0:	4602      	mov	r2, r0
 8010ce2:	460b      	mov	r3, r1
 8010ce4:	4630      	mov	r0, r6
 8010ce6:	4639      	mov	r1, r7
 8010ce8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010cec:	f7ef fa90 	bl	8000210 <__aeabi_dsub>
 8010cf0:	4b19      	ldr	r3, [pc, #100]	@ (8010d58 <__ieee754_rem_pio2+0x3f0>)
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	f7ef fc44 	bl	8000580 <__aeabi_dmul>
 8010cf8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8010cfc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8010d00:	f04f 0803 	mov.w	r8, #3
 8010d04:	2600      	movs	r6, #0
 8010d06:	2700      	movs	r7, #0
 8010d08:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8010d0c:	4632      	mov	r2, r6
 8010d0e:	463b      	mov	r3, r7
 8010d10:	46c2      	mov	sl, r8
 8010d12:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8010d16:	f7ef fe9b 	bl	8000a50 <__aeabi_dcmpeq>
 8010d1a:	2800      	cmp	r0, #0
 8010d1c:	d1f4      	bne.n	8010d08 <__ieee754_rem_pio2+0x3a0>
 8010d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8010d5c <__ieee754_rem_pio2+0x3f4>)
 8010d20:	9301      	str	r3, [sp, #4]
 8010d22:	2302      	movs	r3, #2
 8010d24:	9300      	str	r3, [sp, #0]
 8010d26:	462a      	mov	r2, r5
 8010d28:	4653      	mov	r3, sl
 8010d2a:	4621      	mov	r1, r4
 8010d2c:	a806      	add	r0, sp, #24
 8010d2e:	f000 f8d7 	bl	8010ee0 <__kernel_rem_pio2>
 8010d32:	9b04      	ldr	r3, [sp, #16]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	4605      	mov	r5, r0
 8010d38:	f6bf ae53 	bge.w	80109e2 <__ieee754_rem_pio2+0x7a>
 8010d3c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8010d40:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010d44:	e9c4 2300 	strd	r2, r3, [r4]
 8010d48:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8010d4c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010d50:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8010d54:	e740      	b.n	8010bd8 <__ieee754_rem_pio2+0x270>
 8010d56:	bf00      	nop
 8010d58:	41700000 	.word	0x41700000
 8010d5c:	080117d8 	.word	0x080117d8

08010d60 <fabs>:
 8010d60:	ec51 0b10 	vmov	r0, r1, d0
 8010d64:	4602      	mov	r2, r0
 8010d66:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010d6a:	ec43 2b10 	vmov	d0, r2, r3
 8010d6e:	4770      	bx	lr

08010d70 <scalbn>:
 8010d70:	b570      	push	{r4, r5, r6, lr}
 8010d72:	ec55 4b10 	vmov	r4, r5, d0
 8010d76:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8010d7a:	4606      	mov	r6, r0
 8010d7c:	462b      	mov	r3, r5
 8010d7e:	b991      	cbnz	r1, 8010da6 <scalbn+0x36>
 8010d80:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8010d84:	4323      	orrs	r3, r4
 8010d86:	d03b      	beq.n	8010e00 <scalbn+0x90>
 8010d88:	4b33      	ldr	r3, [pc, #204]	@ (8010e58 <scalbn+0xe8>)
 8010d8a:	4620      	mov	r0, r4
 8010d8c:	4629      	mov	r1, r5
 8010d8e:	2200      	movs	r2, #0
 8010d90:	f7ef fbf6 	bl	8000580 <__aeabi_dmul>
 8010d94:	4b31      	ldr	r3, [pc, #196]	@ (8010e5c <scalbn+0xec>)
 8010d96:	429e      	cmp	r6, r3
 8010d98:	4604      	mov	r4, r0
 8010d9a:	460d      	mov	r5, r1
 8010d9c:	da0f      	bge.n	8010dbe <scalbn+0x4e>
 8010d9e:	a326      	add	r3, pc, #152	@ (adr r3, 8010e38 <scalbn+0xc8>)
 8010da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010da4:	e01e      	b.n	8010de4 <scalbn+0x74>
 8010da6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8010daa:	4291      	cmp	r1, r2
 8010dac:	d10b      	bne.n	8010dc6 <scalbn+0x56>
 8010dae:	4622      	mov	r2, r4
 8010db0:	4620      	mov	r0, r4
 8010db2:	4629      	mov	r1, r5
 8010db4:	f7ef fa2e 	bl	8000214 <__adddf3>
 8010db8:	4604      	mov	r4, r0
 8010dba:	460d      	mov	r5, r1
 8010dbc:	e020      	b.n	8010e00 <scalbn+0x90>
 8010dbe:	460b      	mov	r3, r1
 8010dc0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010dc4:	3936      	subs	r1, #54	@ 0x36
 8010dc6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8010dca:	4296      	cmp	r6, r2
 8010dcc:	dd0d      	ble.n	8010dea <scalbn+0x7a>
 8010dce:	2d00      	cmp	r5, #0
 8010dd0:	a11b      	add	r1, pc, #108	@ (adr r1, 8010e40 <scalbn+0xd0>)
 8010dd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010dd6:	da02      	bge.n	8010dde <scalbn+0x6e>
 8010dd8:	a11b      	add	r1, pc, #108	@ (adr r1, 8010e48 <scalbn+0xd8>)
 8010dda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010dde:	a318      	add	r3, pc, #96	@ (adr r3, 8010e40 <scalbn+0xd0>)
 8010de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010de4:	f7ef fbcc 	bl	8000580 <__aeabi_dmul>
 8010de8:	e7e6      	b.n	8010db8 <scalbn+0x48>
 8010dea:	1872      	adds	r2, r6, r1
 8010dec:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8010df0:	428a      	cmp	r2, r1
 8010df2:	dcec      	bgt.n	8010dce <scalbn+0x5e>
 8010df4:	2a00      	cmp	r2, #0
 8010df6:	dd06      	ble.n	8010e06 <scalbn+0x96>
 8010df8:	f36f 531e 	bfc	r3, #20, #11
 8010dfc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010e00:	ec45 4b10 	vmov	d0, r4, r5
 8010e04:	bd70      	pop	{r4, r5, r6, pc}
 8010e06:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8010e0a:	da08      	bge.n	8010e1e <scalbn+0xae>
 8010e0c:	2d00      	cmp	r5, #0
 8010e0e:	a10a      	add	r1, pc, #40	@ (adr r1, 8010e38 <scalbn+0xc8>)
 8010e10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e14:	dac3      	bge.n	8010d9e <scalbn+0x2e>
 8010e16:	a10e      	add	r1, pc, #56	@ (adr r1, 8010e50 <scalbn+0xe0>)
 8010e18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e1c:	e7bf      	b.n	8010d9e <scalbn+0x2e>
 8010e1e:	3236      	adds	r2, #54	@ 0x36
 8010e20:	f36f 531e 	bfc	r3, #20, #11
 8010e24:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010e28:	4620      	mov	r0, r4
 8010e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8010e60 <scalbn+0xf0>)
 8010e2c:	4629      	mov	r1, r5
 8010e2e:	2200      	movs	r2, #0
 8010e30:	e7d8      	b.n	8010de4 <scalbn+0x74>
 8010e32:	bf00      	nop
 8010e34:	f3af 8000 	nop.w
 8010e38:	c2f8f359 	.word	0xc2f8f359
 8010e3c:	01a56e1f 	.word	0x01a56e1f
 8010e40:	8800759c 	.word	0x8800759c
 8010e44:	7e37e43c 	.word	0x7e37e43c
 8010e48:	8800759c 	.word	0x8800759c
 8010e4c:	fe37e43c 	.word	0xfe37e43c
 8010e50:	c2f8f359 	.word	0xc2f8f359
 8010e54:	81a56e1f 	.word	0x81a56e1f
 8010e58:	43500000 	.word	0x43500000
 8010e5c:	ffff3cb0 	.word	0xffff3cb0
 8010e60:	3c900000 	.word	0x3c900000

08010e64 <with_errno>:
 8010e64:	b510      	push	{r4, lr}
 8010e66:	ed2d 8b02 	vpush	{d8}
 8010e6a:	eeb0 8a40 	vmov.f32	s16, s0
 8010e6e:	eef0 8a60 	vmov.f32	s17, s1
 8010e72:	4604      	mov	r4, r0
 8010e74:	f7fe fa9c 	bl	800f3b0 <__errno>
 8010e78:	eeb0 0a48 	vmov.f32	s0, s16
 8010e7c:	eef0 0a68 	vmov.f32	s1, s17
 8010e80:	ecbd 8b02 	vpop	{d8}
 8010e84:	6004      	str	r4, [r0, #0]
 8010e86:	bd10      	pop	{r4, pc}

08010e88 <xflow>:
 8010e88:	4603      	mov	r3, r0
 8010e8a:	b507      	push	{r0, r1, r2, lr}
 8010e8c:	ec51 0b10 	vmov	r0, r1, d0
 8010e90:	b183      	cbz	r3, 8010eb4 <xflow+0x2c>
 8010e92:	4602      	mov	r2, r0
 8010e94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010e98:	e9cd 2300 	strd	r2, r3, [sp]
 8010e9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ea0:	f7ef fb6e 	bl	8000580 <__aeabi_dmul>
 8010ea4:	ec41 0b10 	vmov	d0, r0, r1
 8010ea8:	2022      	movs	r0, #34	@ 0x22
 8010eaa:	b003      	add	sp, #12
 8010eac:	f85d eb04 	ldr.w	lr, [sp], #4
 8010eb0:	f7ff bfd8 	b.w	8010e64 <with_errno>
 8010eb4:	4602      	mov	r2, r0
 8010eb6:	460b      	mov	r3, r1
 8010eb8:	e7ee      	b.n	8010e98 <xflow+0x10>
 8010eba:	0000      	movs	r0, r0
 8010ebc:	0000      	movs	r0, r0
	...

08010ec0 <__math_uflow>:
 8010ec0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010ec8 <__math_uflow+0x8>
 8010ec4:	f7ff bfe0 	b.w	8010e88 <xflow>
 8010ec8:	00000000 	.word	0x00000000
 8010ecc:	10000000 	.word	0x10000000

08010ed0 <__math_oflow>:
 8010ed0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010ed8 <__math_oflow+0x8>
 8010ed4:	f7ff bfd8 	b.w	8010e88 <xflow>
 8010ed8:	00000000 	.word	0x00000000
 8010edc:	70000000 	.word	0x70000000

08010ee0 <__kernel_rem_pio2>:
 8010ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ee4:	ed2d 8b02 	vpush	{d8}
 8010ee8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8010eec:	f112 0f14 	cmn.w	r2, #20
 8010ef0:	9306      	str	r3, [sp, #24]
 8010ef2:	9104      	str	r1, [sp, #16]
 8010ef4:	4bc2      	ldr	r3, [pc, #776]	@ (8011200 <__kernel_rem_pio2+0x320>)
 8010ef6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8010ef8:	9008      	str	r0, [sp, #32]
 8010efa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010efe:	9300      	str	r3, [sp, #0]
 8010f00:	9b06      	ldr	r3, [sp, #24]
 8010f02:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8010f06:	bfa8      	it	ge
 8010f08:	1ed4      	subge	r4, r2, #3
 8010f0a:	9305      	str	r3, [sp, #20]
 8010f0c:	bfb2      	itee	lt
 8010f0e:	2400      	movlt	r4, #0
 8010f10:	2318      	movge	r3, #24
 8010f12:	fb94 f4f3 	sdivge	r4, r4, r3
 8010f16:	f06f 0317 	mvn.w	r3, #23
 8010f1a:	fb04 3303 	mla	r3, r4, r3, r3
 8010f1e:	eb03 0b02 	add.w	fp, r3, r2
 8010f22:	9b00      	ldr	r3, [sp, #0]
 8010f24:	9a05      	ldr	r2, [sp, #20]
 8010f26:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 80111f0 <__kernel_rem_pio2+0x310>
 8010f2a:	eb03 0802 	add.w	r8, r3, r2
 8010f2e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8010f30:	1aa7      	subs	r7, r4, r2
 8010f32:	ae20      	add	r6, sp, #128	@ 0x80
 8010f34:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010f38:	2500      	movs	r5, #0
 8010f3a:	4545      	cmp	r5, r8
 8010f3c:	dd12      	ble.n	8010f64 <__kernel_rem_pio2+0x84>
 8010f3e:	9b06      	ldr	r3, [sp, #24]
 8010f40:	aa20      	add	r2, sp, #128	@ 0x80
 8010f42:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010f46:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8010f4a:	2700      	movs	r7, #0
 8010f4c:	9b00      	ldr	r3, [sp, #0]
 8010f4e:	429f      	cmp	r7, r3
 8010f50:	dc2e      	bgt.n	8010fb0 <__kernel_rem_pio2+0xd0>
 8010f52:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 80111f0 <__kernel_rem_pio2+0x310>
 8010f56:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010f5a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010f5e:	46a8      	mov	r8, r5
 8010f60:	2600      	movs	r6, #0
 8010f62:	e01b      	b.n	8010f9c <__kernel_rem_pio2+0xbc>
 8010f64:	42ef      	cmn	r7, r5
 8010f66:	d407      	bmi.n	8010f78 <__kernel_rem_pio2+0x98>
 8010f68:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010f6c:	f7ef fa9e 	bl	80004ac <__aeabi_i2d>
 8010f70:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010f74:	3501      	adds	r5, #1
 8010f76:	e7e0      	b.n	8010f3a <__kernel_rem_pio2+0x5a>
 8010f78:	ec51 0b18 	vmov	r0, r1, d8
 8010f7c:	e7f8      	b.n	8010f70 <__kernel_rem_pio2+0x90>
 8010f7e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8010f82:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010f86:	f7ef fafb 	bl	8000580 <__aeabi_dmul>
 8010f8a:	4602      	mov	r2, r0
 8010f8c:	460b      	mov	r3, r1
 8010f8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010f92:	f7ef f93f 	bl	8000214 <__adddf3>
 8010f96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010f9a:	3601      	adds	r6, #1
 8010f9c:	9b05      	ldr	r3, [sp, #20]
 8010f9e:	429e      	cmp	r6, r3
 8010fa0:	dded      	ble.n	8010f7e <__kernel_rem_pio2+0x9e>
 8010fa2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010fa6:	3701      	adds	r7, #1
 8010fa8:	ecaa 7b02 	vstmia	sl!, {d7}
 8010fac:	3508      	adds	r5, #8
 8010fae:	e7cd      	b.n	8010f4c <__kernel_rem_pio2+0x6c>
 8010fb0:	9b00      	ldr	r3, [sp, #0]
 8010fb2:	f8dd 8000 	ldr.w	r8, [sp]
 8010fb6:	aa0c      	add	r2, sp, #48	@ 0x30
 8010fb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010fbc:	930a      	str	r3, [sp, #40]	@ 0x28
 8010fbe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8010fc0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010fc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8010fc6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8010fca:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010fcc:	ab98      	add	r3, sp, #608	@ 0x260
 8010fce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010fd2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8010fd6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010fda:	ac0c      	add	r4, sp, #48	@ 0x30
 8010fdc:	ab70      	add	r3, sp, #448	@ 0x1c0
 8010fde:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8010fe2:	46a1      	mov	r9, r4
 8010fe4:	46c2      	mov	sl, r8
 8010fe6:	f1ba 0f00 	cmp.w	sl, #0
 8010fea:	dc77      	bgt.n	80110dc <__kernel_rem_pio2+0x1fc>
 8010fec:	4658      	mov	r0, fp
 8010fee:	ed9d 0b02 	vldr	d0, [sp, #8]
 8010ff2:	f7ff febd 	bl	8010d70 <scalbn>
 8010ff6:	ec57 6b10 	vmov	r6, r7, d0
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8011000:	4630      	mov	r0, r6
 8011002:	4639      	mov	r1, r7
 8011004:	f7ef fabc 	bl	8000580 <__aeabi_dmul>
 8011008:	ec41 0b10 	vmov	d0, r0, r1
 801100c:	f7fe fc58 	bl	800f8c0 <floor>
 8011010:	4b7c      	ldr	r3, [pc, #496]	@ (8011204 <__kernel_rem_pio2+0x324>)
 8011012:	ec51 0b10 	vmov	r0, r1, d0
 8011016:	2200      	movs	r2, #0
 8011018:	f7ef fab2 	bl	8000580 <__aeabi_dmul>
 801101c:	4602      	mov	r2, r0
 801101e:	460b      	mov	r3, r1
 8011020:	4630      	mov	r0, r6
 8011022:	4639      	mov	r1, r7
 8011024:	f7ef f8f4 	bl	8000210 <__aeabi_dsub>
 8011028:	460f      	mov	r7, r1
 801102a:	4606      	mov	r6, r0
 801102c:	f7ef fd58 	bl	8000ae0 <__aeabi_d2iz>
 8011030:	9002      	str	r0, [sp, #8]
 8011032:	f7ef fa3b 	bl	80004ac <__aeabi_i2d>
 8011036:	4602      	mov	r2, r0
 8011038:	460b      	mov	r3, r1
 801103a:	4630      	mov	r0, r6
 801103c:	4639      	mov	r1, r7
 801103e:	f7ef f8e7 	bl	8000210 <__aeabi_dsub>
 8011042:	f1bb 0f00 	cmp.w	fp, #0
 8011046:	4606      	mov	r6, r0
 8011048:	460f      	mov	r7, r1
 801104a:	dd6c      	ble.n	8011126 <__kernel_rem_pio2+0x246>
 801104c:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8011050:	ab0c      	add	r3, sp, #48	@ 0x30
 8011052:	9d02      	ldr	r5, [sp, #8]
 8011054:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011058:	f1cb 0018 	rsb	r0, fp, #24
 801105c:	fa43 f200 	asr.w	r2, r3, r0
 8011060:	4415      	add	r5, r2
 8011062:	4082      	lsls	r2, r0
 8011064:	1a9b      	subs	r3, r3, r2
 8011066:	aa0c      	add	r2, sp, #48	@ 0x30
 8011068:	9502      	str	r5, [sp, #8]
 801106a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801106e:	f1cb 0217 	rsb	r2, fp, #23
 8011072:	fa43 f902 	asr.w	r9, r3, r2
 8011076:	f1b9 0f00 	cmp.w	r9, #0
 801107a:	dd64      	ble.n	8011146 <__kernel_rem_pio2+0x266>
 801107c:	9b02      	ldr	r3, [sp, #8]
 801107e:	2200      	movs	r2, #0
 8011080:	3301      	adds	r3, #1
 8011082:	9302      	str	r3, [sp, #8]
 8011084:	4615      	mov	r5, r2
 8011086:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801108a:	4590      	cmp	r8, r2
 801108c:	f300 80a1 	bgt.w	80111d2 <__kernel_rem_pio2+0x2f2>
 8011090:	f1bb 0f00 	cmp.w	fp, #0
 8011094:	dd07      	ble.n	80110a6 <__kernel_rem_pio2+0x1c6>
 8011096:	f1bb 0f01 	cmp.w	fp, #1
 801109a:	f000 80c1 	beq.w	8011220 <__kernel_rem_pio2+0x340>
 801109e:	f1bb 0f02 	cmp.w	fp, #2
 80110a2:	f000 80c8 	beq.w	8011236 <__kernel_rem_pio2+0x356>
 80110a6:	f1b9 0f02 	cmp.w	r9, #2
 80110aa:	d14c      	bne.n	8011146 <__kernel_rem_pio2+0x266>
 80110ac:	4632      	mov	r2, r6
 80110ae:	463b      	mov	r3, r7
 80110b0:	4955      	ldr	r1, [pc, #340]	@ (8011208 <__kernel_rem_pio2+0x328>)
 80110b2:	2000      	movs	r0, #0
 80110b4:	f7ef f8ac 	bl	8000210 <__aeabi_dsub>
 80110b8:	4606      	mov	r6, r0
 80110ba:	460f      	mov	r7, r1
 80110bc:	2d00      	cmp	r5, #0
 80110be:	d042      	beq.n	8011146 <__kernel_rem_pio2+0x266>
 80110c0:	4658      	mov	r0, fp
 80110c2:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 80111f8 <__kernel_rem_pio2+0x318>
 80110c6:	f7ff fe53 	bl	8010d70 <scalbn>
 80110ca:	4630      	mov	r0, r6
 80110cc:	4639      	mov	r1, r7
 80110ce:	ec53 2b10 	vmov	r2, r3, d0
 80110d2:	f7ef f89d 	bl	8000210 <__aeabi_dsub>
 80110d6:	4606      	mov	r6, r0
 80110d8:	460f      	mov	r7, r1
 80110da:	e034      	b.n	8011146 <__kernel_rem_pio2+0x266>
 80110dc:	4b4b      	ldr	r3, [pc, #300]	@ (801120c <__kernel_rem_pio2+0x32c>)
 80110de:	2200      	movs	r2, #0
 80110e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80110e4:	f7ef fa4c 	bl	8000580 <__aeabi_dmul>
 80110e8:	f7ef fcfa 	bl	8000ae0 <__aeabi_d2iz>
 80110ec:	f7ef f9de 	bl	80004ac <__aeabi_i2d>
 80110f0:	4b47      	ldr	r3, [pc, #284]	@ (8011210 <__kernel_rem_pio2+0x330>)
 80110f2:	2200      	movs	r2, #0
 80110f4:	4606      	mov	r6, r0
 80110f6:	460f      	mov	r7, r1
 80110f8:	f7ef fa42 	bl	8000580 <__aeabi_dmul>
 80110fc:	4602      	mov	r2, r0
 80110fe:	460b      	mov	r3, r1
 8011100:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011104:	f7ef f884 	bl	8000210 <__aeabi_dsub>
 8011108:	f7ef fcea 	bl	8000ae0 <__aeabi_d2iz>
 801110c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8011110:	f849 0b04 	str.w	r0, [r9], #4
 8011114:	4639      	mov	r1, r7
 8011116:	4630      	mov	r0, r6
 8011118:	f7ef f87c 	bl	8000214 <__adddf3>
 801111c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8011120:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011124:	e75f      	b.n	8010fe6 <__kernel_rem_pio2+0x106>
 8011126:	d107      	bne.n	8011138 <__kernel_rem_pio2+0x258>
 8011128:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 801112c:	aa0c      	add	r2, sp, #48	@ 0x30
 801112e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011132:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8011136:	e79e      	b.n	8011076 <__kernel_rem_pio2+0x196>
 8011138:	4b36      	ldr	r3, [pc, #216]	@ (8011214 <__kernel_rem_pio2+0x334>)
 801113a:	2200      	movs	r2, #0
 801113c:	f7ef fca6 	bl	8000a8c <__aeabi_dcmpge>
 8011140:	2800      	cmp	r0, #0
 8011142:	d143      	bne.n	80111cc <__kernel_rem_pio2+0x2ec>
 8011144:	4681      	mov	r9, r0
 8011146:	2200      	movs	r2, #0
 8011148:	2300      	movs	r3, #0
 801114a:	4630      	mov	r0, r6
 801114c:	4639      	mov	r1, r7
 801114e:	f7ef fc7f 	bl	8000a50 <__aeabi_dcmpeq>
 8011152:	2800      	cmp	r0, #0
 8011154:	f000 80c1 	beq.w	80112da <__kernel_rem_pio2+0x3fa>
 8011158:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 801115c:	2200      	movs	r2, #0
 801115e:	9900      	ldr	r1, [sp, #0]
 8011160:	428b      	cmp	r3, r1
 8011162:	da70      	bge.n	8011246 <__kernel_rem_pio2+0x366>
 8011164:	2a00      	cmp	r2, #0
 8011166:	f000 808b 	beq.w	8011280 <__kernel_rem_pio2+0x3a0>
 801116a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801116e:	ab0c      	add	r3, sp, #48	@ 0x30
 8011170:	f1ab 0b18 	sub.w	fp, fp, #24
 8011174:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d0f6      	beq.n	801116a <__kernel_rem_pio2+0x28a>
 801117c:	4658      	mov	r0, fp
 801117e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 80111f8 <__kernel_rem_pio2+0x318>
 8011182:	f7ff fdf5 	bl	8010d70 <scalbn>
 8011186:	f108 0301 	add.w	r3, r8, #1
 801118a:	00da      	lsls	r2, r3, #3
 801118c:	9205      	str	r2, [sp, #20]
 801118e:	ec55 4b10 	vmov	r4, r5, d0
 8011192:	aa70      	add	r2, sp, #448	@ 0x1c0
 8011194:	f8df b074 	ldr.w	fp, [pc, #116]	@ 801120c <__kernel_rem_pio2+0x32c>
 8011198:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 801119c:	4646      	mov	r6, r8
 801119e:	f04f 0a00 	mov.w	sl, #0
 80111a2:	2e00      	cmp	r6, #0
 80111a4:	f280 80d1 	bge.w	801134a <__kernel_rem_pio2+0x46a>
 80111a8:	4644      	mov	r4, r8
 80111aa:	2c00      	cmp	r4, #0
 80111ac:	f2c0 80ff 	blt.w	80113ae <__kernel_rem_pio2+0x4ce>
 80111b0:	4b19      	ldr	r3, [pc, #100]	@ (8011218 <__kernel_rem_pio2+0x338>)
 80111b2:	461f      	mov	r7, r3
 80111b4:	ab70      	add	r3, sp, #448	@ 0x1c0
 80111b6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80111ba:	9306      	str	r3, [sp, #24]
 80111bc:	f04f 0a00 	mov.w	sl, #0
 80111c0:	f04f 0b00 	mov.w	fp, #0
 80111c4:	2600      	movs	r6, #0
 80111c6:	eba8 0504 	sub.w	r5, r8, r4
 80111ca:	e0e4      	b.n	8011396 <__kernel_rem_pio2+0x4b6>
 80111cc:	f04f 0902 	mov.w	r9, #2
 80111d0:	e754      	b.n	801107c <__kernel_rem_pio2+0x19c>
 80111d2:	f854 3b04 	ldr.w	r3, [r4], #4
 80111d6:	bb0d      	cbnz	r5, 801121c <__kernel_rem_pio2+0x33c>
 80111d8:	b123      	cbz	r3, 80111e4 <__kernel_rem_pio2+0x304>
 80111da:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80111de:	f844 3c04 	str.w	r3, [r4, #-4]
 80111e2:	2301      	movs	r3, #1
 80111e4:	3201      	adds	r2, #1
 80111e6:	461d      	mov	r5, r3
 80111e8:	e74f      	b.n	801108a <__kernel_rem_pio2+0x1aa>
 80111ea:	bf00      	nop
 80111ec:	f3af 8000 	nop.w
	...
 80111fc:	3ff00000 	.word	0x3ff00000
 8011200:	08011920 	.word	0x08011920
 8011204:	40200000 	.word	0x40200000
 8011208:	3ff00000 	.word	0x3ff00000
 801120c:	3e700000 	.word	0x3e700000
 8011210:	41700000 	.word	0x41700000
 8011214:	3fe00000 	.word	0x3fe00000
 8011218:	080118e0 	.word	0x080118e0
 801121c:	1acb      	subs	r3, r1, r3
 801121e:	e7de      	b.n	80111de <__kernel_rem_pio2+0x2fe>
 8011220:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8011224:	ab0c      	add	r3, sp, #48	@ 0x30
 8011226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801122a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801122e:	a90c      	add	r1, sp, #48	@ 0x30
 8011230:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011234:	e737      	b.n	80110a6 <__kernel_rem_pio2+0x1c6>
 8011236:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 801123a:	ab0c      	add	r3, sp, #48	@ 0x30
 801123c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011240:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011244:	e7f3      	b.n	801122e <__kernel_rem_pio2+0x34e>
 8011246:	a90c      	add	r1, sp, #48	@ 0x30
 8011248:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801124c:	3b01      	subs	r3, #1
 801124e:	430a      	orrs	r2, r1
 8011250:	e785      	b.n	801115e <__kernel_rem_pio2+0x27e>
 8011252:	3401      	adds	r4, #1
 8011254:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011258:	2a00      	cmp	r2, #0
 801125a:	d0fa      	beq.n	8011252 <__kernel_rem_pio2+0x372>
 801125c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801125e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011262:	eb0d 0503 	add.w	r5, sp, r3
 8011266:	9b06      	ldr	r3, [sp, #24]
 8011268:	aa20      	add	r2, sp, #128	@ 0x80
 801126a:	4443      	add	r3, r8
 801126c:	f108 0701 	add.w	r7, r8, #1
 8011270:	3d98      	subs	r5, #152	@ 0x98
 8011272:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8011276:	4444      	add	r4, r8
 8011278:	42bc      	cmp	r4, r7
 801127a:	da04      	bge.n	8011286 <__kernel_rem_pio2+0x3a6>
 801127c:	46a0      	mov	r8, r4
 801127e:	e6a2      	b.n	8010fc6 <__kernel_rem_pio2+0xe6>
 8011280:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011282:	2401      	movs	r4, #1
 8011284:	e7e6      	b.n	8011254 <__kernel_rem_pio2+0x374>
 8011286:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011288:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801128c:	f7ef f90e 	bl	80004ac <__aeabi_i2d>
 8011290:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8011550 <__kernel_rem_pio2+0x670>
 8011294:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011298:	ed8d 7b02 	vstr	d7, [sp, #8]
 801129c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80112a0:	46b2      	mov	sl, r6
 80112a2:	f04f 0800 	mov.w	r8, #0
 80112a6:	9b05      	ldr	r3, [sp, #20]
 80112a8:	4598      	cmp	r8, r3
 80112aa:	dd05      	ble.n	80112b8 <__kernel_rem_pio2+0x3d8>
 80112ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80112b0:	3701      	adds	r7, #1
 80112b2:	eca5 7b02 	vstmia	r5!, {d7}
 80112b6:	e7df      	b.n	8011278 <__kernel_rem_pio2+0x398>
 80112b8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80112bc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80112c0:	f7ef f95e 	bl	8000580 <__aeabi_dmul>
 80112c4:	4602      	mov	r2, r0
 80112c6:	460b      	mov	r3, r1
 80112c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80112cc:	f7ee ffa2 	bl	8000214 <__adddf3>
 80112d0:	f108 0801 	add.w	r8, r8, #1
 80112d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80112d8:	e7e5      	b.n	80112a6 <__kernel_rem_pio2+0x3c6>
 80112da:	f1cb 0000 	rsb	r0, fp, #0
 80112de:	ec47 6b10 	vmov	d0, r6, r7
 80112e2:	f7ff fd45 	bl	8010d70 <scalbn>
 80112e6:	ec55 4b10 	vmov	r4, r5, d0
 80112ea:	4b9b      	ldr	r3, [pc, #620]	@ (8011558 <__kernel_rem_pio2+0x678>)
 80112ec:	2200      	movs	r2, #0
 80112ee:	4620      	mov	r0, r4
 80112f0:	4629      	mov	r1, r5
 80112f2:	f7ef fbcb 	bl	8000a8c <__aeabi_dcmpge>
 80112f6:	b300      	cbz	r0, 801133a <__kernel_rem_pio2+0x45a>
 80112f8:	4b98      	ldr	r3, [pc, #608]	@ (801155c <__kernel_rem_pio2+0x67c>)
 80112fa:	2200      	movs	r2, #0
 80112fc:	4620      	mov	r0, r4
 80112fe:	4629      	mov	r1, r5
 8011300:	f7ef f93e 	bl	8000580 <__aeabi_dmul>
 8011304:	f7ef fbec 	bl	8000ae0 <__aeabi_d2iz>
 8011308:	4606      	mov	r6, r0
 801130a:	f7ef f8cf 	bl	80004ac <__aeabi_i2d>
 801130e:	4b92      	ldr	r3, [pc, #584]	@ (8011558 <__kernel_rem_pio2+0x678>)
 8011310:	2200      	movs	r2, #0
 8011312:	f7ef f935 	bl	8000580 <__aeabi_dmul>
 8011316:	460b      	mov	r3, r1
 8011318:	4602      	mov	r2, r0
 801131a:	4629      	mov	r1, r5
 801131c:	4620      	mov	r0, r4
 801131e:	f7ee ff77 	bl	8000210 <__aeabi_dsub>
 8011322:	f7ef fbdd 	bl	8000ae0 <__aeabi_d2iz>
 8011326:	ab0c      	add	r3, sp, #48	@ 0x30
 8011328:	f10b 0b18 	add.w	fp, fp, #24
 801132c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8011330:	f108 0801 	add.w	r8, r8, #1
 8011334:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8011338:	e720      	b.n	801117c <__kernel_rem_pio2+0x29c>
 801133a:	4620      	mov	r0, r4
 801133c:	4629      	mov	r1, r5
 801133e:	f7ef fbcf 	bl	8000ae0 <__aeabi_d2iz>
 8011342:	ab0c      	add	r3, sp, #48	@ 0x30
 8011344:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8011348:	e718      	b.n	801117c <__kernel_rem_pio2+0x29c>
 801134a:	ab0c      	add	r3, sp, #48	@ 0x30
 801134c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011350:	f7ef f8ac 	bl	80004ac <__aeabi_i2d>
 8011354:	4622      	mov	r2, r4
 8011356:	462b      	mov	r3, r5
 8011358:	f7ef f912 	bl	8000580 <__aeabi_dmul>
 801135c:	4652      	mov	r2, sl
 801135e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8011362:	465b      	mov	r3, fp
 8011364:	4620      	mov	r0, r4
 8011366:	4629      	mov	r1, r5
 8011368:	f7ef f90a 	bl	8000580 <__aeabi_dmul>
 801136c:	3e01      	subs	r6, #1
 801136e:	4604      	mov	r4, r0
 8011370:	460d      	mov	r5, r1
 8011372:	e716      	b.n	80111a2 <__kernel_rem_pio2+0x2c2>
 8011374:	9906      	ldr	r1, [sp, #24]
 8011376:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801137a:	9106      	str	r1, [sp, #24]
 801137c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8011380:	f7ef f8fe 	bl	8000580 <__aeabi_dmul>
 8011384:	4602      	mov	r2, r0
 8011386:	460b      	mov	r3, r1
 8011388:	4650      	mov	r0, sl
 801138a:	4659      	mov	r1, fp
 801138c:	f7ee ff42 	bl	8000214 <__adddf3>
 8011390:	3601      	adds	r6, #1
 8011392:	4682      	mov	sl, r0
 8011394:	468b      	mov	fp, r1
 8011396:	9b00      	ldr	r3, [sp, #0]
 8011398:	429e      	cmp	r6, r3
 801139a:	dc01      	bgt.n	80113a0 <__kernel_rem_pio2+0x4c0>
 801139c:	42ae      	cmp	r6, r5
 801139e:	dde9      	ble.n	8011374 <__kernel_rem_pio2+0x494>
 80113a0:	ab48      	add	r3, sp, #288	@ 0x120
 80113a2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80113a6:	e9c5 ab00 	strd	sl, fp, [r5]
 80113aa:	3c01      	subs	r4, #1
 80113ac:	e6fd      	b.n	80111aa <__kernel_rem_pio2+0x2ca>
 80113ae:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80113b0:	2b02      	cmp	r3, #2
 80113b2:	dc0b      	bgt.n	80113cc <__kernel_rem_pio2+0x4ec>
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	dc35      	bgt.n	8011424 <__kernel_rem_pio2+0x544>
 80113b8:	d059      	beq.n	801146e <__kernel_rem_pio2+0x58e>
 80113ba:	9b02      	ldr	r3, [sp, #8]
 80113bc:	f003 0007 	and.w	r0, r3, #7
 80113c0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80113c4:	ecbd 8b02 	vpop	{d8}
 80113c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113cc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80113ce:	2b03      	cmp	r3, #3
 80113d0:	d1f3      	bne.n	80113ba <__kernel_rem_pio2+0x4da>
 80113d2:	9b05      	ldr	r3, [sp, #20]
 80113d4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80113d8:	eb0d 0403 	add.w	r4, sp, r3
 80113dc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80113e0:	4625      	mov	r5, r4
 80113e2:	46c2      	mov	sl, r8
 80113e4:	f1ba 0f00 	cmp.w	sl, #0
 80113e8:	dc69      	bgt.n	80114be <__kernel_rem_pio2+0x5de>
 80113ea:	4645      	mov	r5, r8
 80113ec:	2d01      	cmp	r5, #1
 80113ee:	f300 8087 	bgt.w	8011500 <__kernel_rem_pio2+0x620>
 80113f2:	9c05      	ldr	r4, [sp, #20]
 80113f4:	ab48      	add	r3, sp, #288	@ 0x120
 80113f6:	441c      	add	r4, r3
 80113f8:	2000      	movs	r0, #0
 80113fa:	2100      	movs	r1, #0
 80113fc:	f1b8 0f01 	cmp.w	r8, #1
 8011400:	f300 809c 	bgt.w	801153c <__kernel_rem_pio2+0x65c>
 8011404:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8011408:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 801140c:	f1b9 0f00 	cmp.w	r9, #0
 8011410:	f040 80a6 	bne.w	8011560 <__kernel_rem_pio2+0x680>
 8011414:	9b04      	ldr	r3, [sp, #16]
 8011416:	e9c3 5600 	strd	r5, r6, [r3]
 801141a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801141e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011422:	e7ca      	b.n	80113ba <__kernel_rem_pio2+0x4da>
 8011424:	9d05      	ldr	r5, [sp, #20]
 8011426:	ab48      	add	r3, sp, #288	@ 0x120
 8011428:	441d      	add	r5, r3
 801142a:	4644      	mov	r4, r8
 801142c:	2000      	movs	r0, #0
 801142e:	2100      	movs	r1, #0
 8011430:	2c00      	cmp	r4, #0
 8011432:	da35      	bge.n	80114a0 <__kernel_rem_pio2+0x5c0>
 8011434:	f1b9 0f00 	cmp.w	r9, #0
 8011438:	d038      	beq.n	80114ac <__kernel_rem_pio2+0x5cc>
 801143a:	4602      	mov	r2, r0
 801143c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011440:	9c04      	ldr	r4, [sp, #16]
 8011442:	e9c4 2300 	strd	r2, r3, [r4]
 8011446:	4602      	mov	r2, r0
 8011448:	460b      	mov	r3, r1
 801144a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801144e:	f7ee fedf 	bl	8000210 <__aeabi_dsub>
 8011452:	ad4a      	add	r5, sp, #296	@ 0x128
 8011454:	2401      	movs	r4, #1
 8011456:	45a0      	cmp	r8, r4
 8011458:	da2b      	bge.n	80114b2 <__kernel_rem_pio2+0x5d2>
 801145a:	f1b9 0f00 	cmp.w	r9, #0
 801145e:	d002      	beq.n	8011466 <__kernel_rem_pio2+0x586>
 8011460:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011464:	4619      	mov	r1, r3
 8011466:	9b04      	ldr	r3, [sp, #16]
 8011468:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801146c:	e7a5      	b.n	80113ba <__kernel_rem_pio2+0x4da>
 801146e:	9c05      	ldr	r4, [sp, #20]
 8011470:	ab48      	add	r3, sp, #288	@ 0x120
 8011472:	441c      	add	r4, r3
 8011474:	2000      	movs	r0, #0
 8011476:	2100      	movs	r1, #0
 8011478:	f1b8 0f00 	cmp.w	r8, #0
 801147c:	da09      	bge.n	8011492 <__kernel_rem_pio2+0x5b2>
 801147e:	f1b9 0f00 	cmp.w	r9, #0
 8011482:	d002      	beq.n	801148a <__kernel_rem_pio2+0x5aa>
 8011484:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011488:	4619      	mov	r1, r3
 801148a:	9b04      	ldr	r3, [sp, #16]
 801148c:	e9c3 0100 	strd	r0, r1, [r3]
 8011490:	e793      	b.n	80113ba <__kernel_rem_pio2+0x4da>
 8011492:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011496:	f7ee febd 	bl	8000214 <__adddf3>
 801149a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801149e:	e7eb      	b.n	8011478 <__kernel_rem_pio2+0x598>
 80114a0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80114a4:	f7ee feb6 	bl	8000214 <__adddf3>
 80114a8:	3c01      	subs	r4, #1
 80114aa:	e7c1      	b.n	8011430 <__kernel_rem_pio2+0x550>
 80114ac:	4602      	mov	r2, r0
 80114ae:	460b      	mov	r3, r1
 80114b0:	e7c6      	b.n	8011440 <__kernel_rem_pio2+0x560>
 80114b2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80114b6:	f7ee fead 	bl	8000214 <__adddf3>
 80114ba:	3401      	adds	r4, #1
 80114bc:	e7cb      	b.n	8011456 <__kernel_rem_pio2+0x576>
 80114be:	ed35 7b02 	vldmdb	r5!, {d7}
 80114c2:	ed8d 7b00 	vstr	d7, [sp]
 80114c6:	ed95 7b02 	vldr	d7, [r5, #8]
 80114ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80114ce:	ec53 2b17 	vmov	r2, r3, d7
 80114d2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80114d6:	f7ee fe9d 	bl	8000214 <__adddf3>
 80114da:	4602      	mov	r2, r0
 80114dc:	460b      	mov	r3, r1
 80114de:	4606      	mov	r6, r0
 80114e0:	460f      	mov	r7, r1
 80114e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80114e6:	f7ee fe93 	bl	8000210 <__aeabi_dsub>
 80114ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80114ee:	f7ee fe91 	bl	8000214 <__adddf3>
 80114f2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80114f6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80114fa:	e9c5 6700 	strd	r6, r7, [r5]
 80114fe:	e771      	b.n	80113e4 <__kernel_rem_pio2+0x504>
 8011500:	ed34 7b02 	vldmdb	r4!, {d7}
 8011504:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8011508:	ec51 0b17 	vmov	r0, r1, d7
 801150c:	4652      	mov	r2, sl
 801150e:	465b      	mov	r3, fp
 8011510:	ed8d 7b00 	vstr	d7, [sp]
 8011514:	f7ee fe7e 	bl	8000214 <__adddf3>
 8011518:	4602      	mov	r2, r0
 801151a:	460b      	mov	r3, r1
 801151c:	4606      	mov	r6, r0
 801151e:	460f      	mov	r7, r1
 8011520:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011524:	f7ee fe74 	bl	8000210 <__aeabi_dsub>
 8011528:	4652      	mov	r2, sl
 801152a:	465b      	mov	r3, fp
 801152c:	f7ee fe72 	bl	8000214 <__adddf3>
 8011530:	3d01      	subs	r5, #1
 8011532:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011536:	e9c4 6700 	strd	r6, r7, [r4]
 801153a:	e757      	b.n	80113ec <__kernel_rem_pio2+0x50c>
 801153c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011540:	f7ee fe68 	bl	8000214 <__adddf3>
 8011544:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8011548:	e758      	b.n	80113fc <__kernel_rem_pio2+0x51c>
 801154a:	bf00      	nop
 801154c:	f3af 8000 	nop.w
	...
 8011558:	41700000 	.word	0x41700000
 801155c:	3e700000 	.word	0x3e700000
 8011560:	9b04      	ldr	r3, [sp, #16]
 8011562:	9a04      	ldr	r2, [sp, #16]
 8011564:	601d      	str	r5, [r3, #0]
 8011566:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 801156a:	605c      	str	r4, [r3, #4]
 801156c:	609f      	str	r7, [r3, #8]
 801156e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8011572:	60d3      	str	r3, [r2, #12]
 8011574:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011578:	6110      	str	r0, [r2, #16]
 801157a:	6153      	str	r3, [r2, #20]
 801157c:	e71d      	b.n	80113ba <__kernel_rem_pio2+0x4da>
 801157e:	bf00      	nop

08011580 <_init>:
 8011580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011582:	bf00      	nop
 8011584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011586:	bc08      	pop	{r3}
 8011588:	469e      	mov	lr, r3
 801158a:	4770      	bx	lr

0801158c <_fini>:
 801158c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801158e:	bf00      	nop
 8011590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011592:	bc08      	pop	{r3}
 8011594:	469e      	mov	lr, r3
 8011596:	4770      	bx	lr
